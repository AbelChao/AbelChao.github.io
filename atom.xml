<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AbelChao</title>
  
  <subtitle>超超白</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://abelchao.com/"/>
  <updated>2018-07-28T12:28:45.951Z</updated>
  <id>http://abelchao.com/</id>
  
  <author>
    <name>AbelChao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个小迷宫</title>
    <link href="http://abelchao.com/2018/07/28/%E4%B8%80%E4%B8%AA%E5%B0%8F%E8%BF%B7%E5%AE%AB/"/>
    <id>http://abelchao.com/2018/07/28/一个小迷宫/</id>
    <published>2018-07-28T01:00:00.000Z</published>
    <updated>2018-07-28T12:28:45.951Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">等我签了再看吧</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      不给你看
    
    </summary>
    
      <category term="Find" scheme="http://abelchao.com/categories/Find/"/>
    
    
      <category term="Find" scheme="http://abelchao.com/tags/Find/"/>
    
  </entry>
  
  <entry>
    <title>找找找工作的过程</title>
    <link href="http://abelchao.com/2018/07/18/%E6%89%BE%E6%89%BE%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://abelchao.com/2018/07/18/找找找工作的过程/</id>
    <published>2018-07-18T01:00:00.000Z</published>
    <updated>2018-08-20T04:02:24.635Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">等我签了再看吧</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      还是写呢，别急啊
    
    </summary>
    
      <category term="Find" scheme="http://abelchao.com/categories/Find/"/>
    
    
      <category term="Find" scheme="http://abelchao.com/tags/Find/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode（1-30）</title>
    <link href="http://abelchao.com/2018/07/16/LeetCode%EF%BC%881-30%EF%BC%89/"/>
    <id>http://abelchao.com/2018/07/16/LeetCode（1-30）/</id>
    <published>2018-07-16T01:00:00.000Z</published>
    <updated>2018-07-17T07:42:44.541Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/v2-ee8927c8015db2fd307a14986e67581e_r.jpg" alt=""></p><p><strong>LeetCode（1-30）</strong><br><a id="more"></a></p><h1 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h1><p>这个题的意思是，给定一个数组，判断这个数组中是不是有两个数字之和等于目标数字，如果有返回这两个数字的下标，如果没有返回-1</p><p>解题思路，利用Map，一个一个获取数字。把当前数字和当前数字与目标数字的插值存入Map的key,value存角标，一旦后面有数字等于了这个插值，就结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        map.put(target-nums[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(nums[i]))&#123;</span><br><span class="line">                result[<span class="number">0</span>] = map.get(nums[i])+<span class="number">1</span>;</span><br><span class="line">                result[<span class="number">1</span>] = i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(target-nums[i],i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a>Add Two Numbers</h1><p>将两个反向的数字链表相加，正向输出。</p><p>解题思路：</p><p>利用递归，result.next = addTwoNumbers(l1.next,l2.next);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span> || l2==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> l1==<span class="keyword">null</span>?l2:l1;</span><br><span class="line">        <span class="keyword">int</span> val = l1.val+l2.val;</span><br><span class="line">        ListNode result = <span class="keyword">new</span> ListNode(val%<span class="number">10</span>);</span><br><span class="line">        result.next = addTwoNumbers(l1.next,l2.next);</span><br><span class="line">        <span class="keyword">if</span>(val&gt;=<span class="number">10</span>)</span><br><span class="line">            result.next = addTwoNumbers(<span class="keyword">new</span> ListNode(val/<span class="number">10</span>),result.next);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a>Longest Substring Without Repeating Characters</h1><p>求最大无重复字符的子串</p><p>解题思路:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    "滑动窗口" </span></span><br><span class="line"><span class="comment">    比方说 abcabccc 当你右边扫描到abca的时候你得把第一个a删掉得到bca，</span></span><br><span class="line"><span class="comment">    然后"窗口"继续向右滑动，每当加到一个新char的时候，左边检查有无重复的char，</span></span><br><span class="line"><span class="comment">    然后如果没有重复的就正常添加，</span></span><br><span class="line"><span class="comment">    有重复的话就左边扔掉一部分（从最左到重复char这段扔掉），在这个过程中记录最大窗口长度</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//滑动窗口</span></span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            left = Math.max(left,map.containsKey(c)?map.get(c)+<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">            max = Math.max(max,i-left+<span class="number">1</span>);</span><br><span class="line">            map.put(c,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="median-of-two-sorted-arrays"><a href="#median-of-two-sorted-arrays" class="headerlink" title="median-of-two-sorted-arrays"></a>median-of-two-sorted-arrays</h1><p>两个数组升序排序后的中位数</p><p>下面的这个解法不是O（N+M）的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> B[])</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:A)</span><br><span class="line">            list.add(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:B)</span><br><span class="line">            list.add(i);</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        <span class="keyword">if</span>(size%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>)list.get(size/<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (list.get(size/<span class="number">2</span>)+list.get(size/<span class="number">2</span>-<span class="number">1</span>))/<span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="longest-palindromic-substring"><a href="#longest-palindromic-substring" class="headerlink" title="longest-palindromic-substring"></a>longest-palindromic-substring</h1><p>manacher算法求最长子串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Manacher算法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String result = s;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"#"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            sb.append(s.charAt(i)+<span class="string">"#"</span>);</span><br><span class="line">        s = sb.toString();</span><br><span class="line">        len = s.length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] radius = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">int</span> maxRight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> center = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> resLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> resCenter = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=maxRight)</span><br><span class="line">                radius[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                radius[i] = Math.min(maxRight-i,radius[<span class="number">2</span>*center-i]);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(i+radius[i]&lt;len &amp;&amp; i-radius[i]&gt;=<span class="number">0</span></span><br><span class="line">                 &amp;&amp; s.charAt(i+radius[i])==s.charAt(i-radius[i]))</span><br><span class="line">                radius[i]++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(i+radius[i]&gt;maxRight)&#123;</span><br><span class="line">                center = i;</span><br><span class="line">                maxRight = i+radius[i];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(resLen&lt;radius[i])&#123;</span><br><span class="line">                resLen = radius[i];</span><br><span class="line">                resCenter = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s = s.substring(resCenter-resLen+<span class="number">1</span>,resCenter+resLen).replace(<span class="string">"#"</span>,<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Zigzag-Conversion"><a href="#Zigzag-Conversion" class="headerlink" title="Zigzag Conversion"></a>Zigzag Conversion</h1><p><a href="https://www.cnblogs.com/springfor/p/3889414.html" target="_blank" rel="noopener">https://www.cnblogs.com/springfor/p/3889414.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> nRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()==<span class="number">0</span> || nRows==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(nRows==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">2</span>*nRows-<span class="number">2</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nRows;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;len;j+=size)&#123;</span><br><span class="line">                sb.append(s.charAt(j));</span><br><span class="line">                <span class="keyword">if</span>(i!=<span class="number">0</span> &amp;&amp; i!=nRows-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = j+size-<span class="number">2</span>*i;</span><br><span class="line">                    <span class="keyword">if</span>(temp&lt;len)</span><br><span class="line">                        sb.append(s.charAt(temp));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reverse-Integer"><a href="#Reverse-Integer" class="headerlink" title="Reverse Integer"></a>Reverse Integer</h1><p>反转整数，遇到100，10的时候返回1。<br>考虑到溢出的问题，需要用long保存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">            res = res*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">            x = x/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res &gt;Integer.MAX_VALUE || res &lt; Integer.MIN_VALUE) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String-to-Integer"><a href="#String-to-Integer" class="headerlink" title="String to Integer"></a>String to Integer</h1><p>重点在于边界条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">atoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str==<span class="keyword">null</span> || str.trim().length()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        str = str.trim();</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        <span class="keyword">char</span> flag = <span class="string">'+'</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(<span class="number">0</span>)==<span class="string">'+'</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str.charAt(<span class="number">0</span>)==<span class="string">'-'</span>)&#123;</span><br><span class="line">            flag = <span class="string">'-'</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(i&lt;len &amp;&amp; str.charAt(i)&gt;=<span class="string">'0'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">            res = res*<span class="number">10</span>+(str.charAt(i)-<span class="string">'0'</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="string">'-'</span>)</span><br><span class="line">            res = -res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(res&gt;Integer.MAX_VALUE)</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(res&lt;Integer.MIN_VALUE)</span><br><span class="line">            <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Palindrome-Number"><a href="#Palindrome-Number" class="headerlink" title="Palindrome Number"></a>Palindrome Number</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不能把数字变成字符串，那么就把生成一个反转数，就和这个题一样了：reverse integer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> temp = x;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">            res = res*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">            x = x/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res==temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Regular-Expression-Matching"><a href="#Regular-Expression-Matching" class="headerlink" title="Regular Expression Matching"></a>Regular Expression Matching</h1><p>正则匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.matches(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="container-with-most-water"><a href="#container-with-most-water" class="headerlink" title="container-with-most-water"></a>container-with-most-water</h1><p><a href="https://blog.csdn.net/five0918/article/details/52504775" target="_blank" rel="noopener">https://blog.csdn.net/five0918/article/details/52504775</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(height==<span class="keyword">null</span> || height.length==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = height.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            maxArea = Math.max(maxArea, Math.min(height[left], height[right])*(right-left));</span><br><span class="line">            <span class="keyword">if</span>(height[left]&lt;height[right])</span><br><span class="line">                left++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Integer-to-Roman"><a href="#Integer-to-Roman" class="headerlink" title="Integer to Roman"></a>Integer to Roman</h1><h1 id="Roman-to-Integer"><a href="#Roman-to-Integer" class="headerlink" title="Roman to Integer"></a>Roman to Integer</h1><h1 id="Longest-Common-Prefix"><a href="#Longest-Common-Prefix" class="headerlink" title="Longest Common Prefix"></a>Longest Common Prefix</h1><p>思路：</p><p>原数组排序，然后把第一个和最后一个比较就可以</p><p><a href="https://blog.csdn.net/zsy112371/article/details/52433799" target="_blank" rel="noopener">https://blog.csdn.net/zsy112371/article/details/52433799</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs==<span class="keyword">null</span> || strs.length==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        Arrays.sort(strs);</span><br><span class="line">        <span class="keyword">int</span> len = strs.length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span>[] shortStr = strs[<span class="number">0</span>].toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] longStr = strs[len-<span class="number">1</span>].toCharArray();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> shortLen = shortStr.length;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;shortLen;i++)</span><br><span class="line">            <span class="keyword">if</span>(longStr[i]==shortStr[i])</span><br><span class="line">                sb.append(shortStr[i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> sb.toString();</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"># 3Sum  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums)&#123;</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length&lt;<span class="number">3</span>)</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = nums.length;</span><br><span class="line">Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> left = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> right = len-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line"><span class="keyword">int</span> sum = nums[i]+nums[left]+nums[right];</span><br><span class="line"><span class="keyword">if</span>(sum==<span class="number">0</span>)&#123;</span><br><span class="line">List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">temp.add(nums[i]);</span><br><span class="line">temp.add(nums[left]);</span><br><span class="line">temp.add(nums[right]);</span><br><span class="line">list.add(temp);</span><br><span class="line">left++;</span><br><span class="line">right--;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class="number">1</span>])</span><br><span class="line">left++;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class="number">1</span>])</span><br><span class="line">right--;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3Sum-Closest"><a href="#3Sum-Closest" class="headerlink" title="3Sum Closest"></a>3Sum Closest</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length&lt;<span class="number">3</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = nums.length;</span><br><span class="line">Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> left = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> right = len-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line"><span class="keyword">int</span> sum = nums[i]+nums[left]+nums[right];</span><br><span class="line"><span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line"><span class="keyword">if</span>(sum-target&lt;min)&#123;</span><br><span class="line">min = sum-target;</span><br><span class="line">result = sum;</span><br><span class="line">&#125;</span><br><span class="line">right--;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;target)&#123;</span><br><span class="line"><span class="keyword">if</span>(target-sum&lt;min)&#123;</span><br><span class="line">min = target-sum;</span><br><span class="line">result = sum;</span><br><span class="line">&#125;</span><br><span class="line">left++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Letter-Combinations-of-a-Phone-Number"><a href="#Letter-Combinations-of-a-Phone-Number" class="headerlink" title="Letter Combinations of a Phone Number"></a>Letter Combinations of a Phone Number</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4Sum"><a href="#4Sum" class="headerlink" title="4Sum"></a>4Sum</h1><p><a href="https://blog.csdn.net/mine_song/article/details/69401855" target="_blank" rel="noopener">https://blog.csdn.net/mine_song/article/details/69401855</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] num, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length&lt;<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i-<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span> &amp;&amp; nums[j]==nums[j-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> left = j+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> right = len-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="keyword">int</span> sum = nums[i]+nums[j]+nums[left]+nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">                        ArrayList&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                        temp.add(nums[i]);</span><br><span class="line">                        temp.add(nums[j]);</span><br><span class="line">                        temp.add(nums[left]);</span><br><span class="line">                        temp.add(nums[right]);</span><br><span class="line">                        list.add(temp);</span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class="number">1</span>])</span><br><span class="line">                            left++;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class="number">1</span>])</span><br><span class="line">                            right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Remove-Nth-Node-From-End-Of-Number"><a href="#Remove-Nth-Node-From-End-Of-Number" class="headerlink" title="Remove Nth Node From End Of Number"></a>Remove Nth Node From End Of Number</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line"> </span><br><span class="line">        ListNode fakeNode = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode temp = fakeNode;</span><br><span class="line">        temp.next = slow;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>&amp;&amp;fast!=<span class="keyword">null</span>;i++)</span><br><span class="line">            fast = fast.next;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(fast==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>(fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        temp.next = slow.next;</span><br><span class="line">        <span class="keyword">return</span> fakeNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Valid-Parentheses"><a href="#Valid-Parentheses" class="headerlink" title="Valid Parentheses"></a>Valid Parentheses</h1><p>符号匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] arr = s.toCharArray();</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'('</span>||c==<span class="string">'&#123;'</span>||c==<span class="string">'['</span>)&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>((c == <span class="string">')'</span> || c == <span class="string">']'</span> || c == <span class="string">'&#125;'</span>)&amp;&amp; stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">char</span> pop = stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (!((pop == <span class="string">'('</span> &amp;&amp; c == <span class="string">')'</span>) || (pop == <span class="string">'['</span> &amp;&amp; c == <span class="string">']'</span>) || (pop == <span class="string">'&#123;'</span> &amp;&amp; c == <span class="string">'&#125;'</span>))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.size()==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="merge-two-sorted-lists"><a href="#merge-two-sorted-lists" class="headerlink" title="merge-two-sorted-lists"></a>merge-two-sorted-lists</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode h1, ListNode h2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(h1==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> h2;</span><br><span class="line">        <span class="keyword">if</span>(h2==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> h1;</span><br><span class="line"></span><br><span class="line">        ListNode fakeNode = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode cur = fakeNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(h1!=<span class="keyword">null</span> &amp;&amp; h2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(h1.val&lt;h2.val)&#123;</span><br><span class="line">                cur.next = h1;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                h1 = h1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur.next = h2;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                h2 = h2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(h1!=<span class="keyword">null</span>)</span><br><span class="line">            cur.next = h1;</span><br><span class="line">        <span class="keyword">if</span>(h2!=<span class="keyword">null</span>)</span><br><span class="line">            cur.next = h2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fakeNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Generate-Parentheses"><a href="#Generate-Parentheses" class="headerlink" title="Generate Parentheses"></a>Generate Parentheses</h1><p>生成括号，给定括号的个数，生成一共有几种可能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Merge-k-Sorted-Lists"><a href="#Merge-k-Sorted-Lists" class="headerlink" title="Merge k Sorted Lists"></a>Merge k Sorted Lists</h1><h1 id="Swap-Nodes-in-Pairs"><a href="#Swap-Nodes-in-Pairs" class="headerlink" title="Swap Nodes in Pairs"></a>Swap Nodes in Pairs</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode fakeNode = head.next;</span><br><span class="line">        head.next = swapPairs(head.next.next);</span><br><span class="line">        fakeNode.next = head;</span><br><span class="line">        <span class="keyword">return</span> fakeNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reverse-Nodes-in-k-Group"><a href="#Reverse-Nodes-in-k-Group" class="headerlink" title="Reverse Nodes in k-Group"></a>Reverse Nodes in k-Group</h1><h1 id="Remove-Duplicates-from-Sorted-Array"><a href="#Remove-Duplicates-from-Sorted-Array" class="headerlink" title="Remove Duplicates from Sorted Array"></a>Remove Duplicates from Sorted Array</h1><p>Given1-&gt;1-&gt;2, return1-&gt;2.<br>Given1-&gt;1-&gt;2-&gt;3-&gt;3, return1-&gt;2-&gt;3.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(cur.next != <span class="keyword">null</span> &amp;&amp; cur.val == cur.next.val)</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Given1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5, return1-&gt;2-&gt;5.<br>Given1-&gt;1-&gt;1-&gt;2-&gt;3, return2-&gt;3.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode FakeHead=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        FakeHead.next=head;</span><br><span class="line">        ListNode pre=FakeHead;</span><br><span class="line">        ListNode cur=head; </span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123; </span><br><span class="line">            <span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>&amp;&amp;cur.val==cur.next.val)&#123;</span><br><span class="line">                cur=cur.next;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span>(pre.next==cur)&#123;</span><br><span class="line">                pre=pre.next;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                pre.next=cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> FakeHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Remove-Element"><a href="#Remove-Element" class="headerlink" title="Remove Element"></a>Remove Element</h1><h1 id="Implement-strStr"><a href="#Implement-strStr" class="headerlink" title="Implement strStr"></a>Implement strStr</h1><pre><code>如果子串在原串中存在，就返回第一次出现位置之后的所有字符串，否则输出null</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = haystack.indexOf(needle);</span><br><span class="line">        <span class="keyword">if</span>(index&gt;-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> haystack.substring(index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Divide-Two-Integers"><a href="#Divide-Two-Integers" class="headerlink" title="Divide Two Integers"></a>Divide Two Integers</h1><h1 id="Substring-with-Concatenation-of-All-Words"><a href="#Substring-with-Concatenation-of-All-Words" class="headerlink" title="Substring with Concatenation of All Words"></a>Substring with Concatenation of All Words</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/v2-ee8927c8015db2fd307a14986e67581e_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LeetCode（1-30）&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://abelchao.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://abelchao.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>排序的知识点</title>
    <link href="http://abelchao.com/2018/07/11/%E6%8E%92%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://abelchao.com/2018/07/11/排序知识点/</id>
    <published>2018-07-11T01:00:00.000Z</published>
    <updated>2018-07-30T12:33:29.685Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/v2-f6339408c5e6ac4c81ea34fac868a775_hd.jpg" alt=""></p><p><strong>排序的知识点</strong><br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortBySelect</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&gt;arr[j])</span><br><span class="line">swap(arr,i,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortByBubble</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">swap(arr,j,j+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortByInsert</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">int</span> j,temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">for</span>(j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;temp)</span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortByShell</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">int</span> i,j,temp;</span><br><span class="line"><span class="keyword">int</span> step = len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">step/=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i=step;i&lt;len;i++)&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">if</span>(arr[i]&lt;arr[i-step])&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i-step;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;temp)</span><br><span class="line">arr[j+step] = arr[j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[j+step] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(step&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortByMerge</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">mergeSort(arr,<span class="number">0</span>,len-<span class="number">1</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> f,<span class="keyword">int</span> e,<span class="keyword">int</span>[]result)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f&gt;=e)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (f+e)/<span class="number">2</span>;</span><br><span class="line">mergeSort(arr,f,mid,result);</span><br><span class="line">mergeSort(arr,mid+<span class="number">1</span>,e,result);</span><br><span class="line">merge(arr,f,mid,e,result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> f,<span class="keyword">int</span> mid,<span class="keyword">int</span> e,<span class="keyword">int</span>[] result)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = f;</span><br><span class="line"><span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=e)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&lt;arr[j])</span><br><span class="line">result[t++] = arr[i++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">result[t++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">result[t++] = arr[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(j&lt;=e)&#123;</span><br><span class="line">result[t++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(f&lt;=e)</span><br><span class="line">arr[f++] = result[t++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortByQuick</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">quickSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> f,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f&gt;=e)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> axis = partition(arr,f,e);</span><br><span class="line">quickSort(arr,f,axis-<span class="number">1</span>);</span><br><span class="line">quickSort(arr,axis+<span class="number">1</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> f,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = arr[f];</span><br><span class="line"><span class="keyword">while</span>(f&lt;e)&#123;</span><br><span class="line"><span class="keyword">while</span>(f&lt;e &amp;&amp; arr[e]&gt;=key)</span><br><span class="line">e--;</span><br><span class="line">arr[f] = arr[e];</span><br><span class="line"><span class="keyword">while</span>(f&lt;e &amp;&amp; arr[f]&lt;=key)</span><br><span class="line">f++;</span><br><span class="line">arr[e] = arr[f];</span><br><span class="line">&#125;</span><br><span class="line">arr[f] = key;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>序列事先已经基本有序，插入和冒泡会明显减少比较次数，快速排序与主元的选择有关，若一般选子序列左侧第一个元素比较，则第一个元素最好是大小居中的，以使得分成的两个子数组长度大致相等。性能才最佳，快速排序也与初始输入集有关。</p></li><li><p>堆、归并、直接选择,基数排序的复杂度与初始序列的有序无关。但是只有选择排序的比较次数与初始序列无关;元素的移动次数与关键字的初始排列次序无关的是基数排序.</p></li><li><p>有环图不能进行拓扑排序。</p></li><li><p>在待排序数据基本有序的情况下，直接插入排序效果最好。</p></li><li><p>每经过一次元素的交换会产生新的逆序的是快速排序。</p></li><li><p>快速排序，在初始序列无序的条件下最快，一旦有序，退化成冒泡排序，时间复杂度是O（n^2），原来是O（nlog2n）。</p></li><li><p>二分法插入排序所需比较次数与待排序的初始排序状态无关。</p></li><li><p>外排中使用置换选择排序的目的，是为了增加初始归并段的长度。</p></li><li><p>若记录的初始状态已经按关键码基本有序，则选用直接插入排序或冒泡排序发为宜</p></li><li><p>选择排序是小的往前走，冒泡排序是大的往后走。</p></li><li><p>从未排序序列中依次取出元素与已排序序列中的元素进行比较，将其放入已经排序序列的正确位置上</p></li><li><p>快排应该用在顺序存储的序列上。</p></li><li><p>若记录的初始状态已经按关键码基本有序，则选用直接插入排序或冒泡排序发为宜</p></li><li><p>小堆顶从左开始，大堆顶从右开始.</p></li><li><p>将两个各有N个元素的有序表归并成一个有序表,其最少的比较次数是N</p></li></ol><p>但是合并M个长度为N的已排序数组的时间复杂度是O(mn(logm))</p><ol><li><p>插入排序N次,前N+1或者后N+1个数有序.</p></li><li><p>拓扑排序算法适用于有向无环图.</p></li><li><p>推排序每趟总能选出一个最大值或者最小值位于根节点.</p></li><li><p>快排选出的枢纽在一趟排序中就位于了它的最终位置.</p></li><li><p>冒泡排序在初始关键字序列为逆序的情况下执行的交换次数最多</p></li><li><p>堆排序不需要等到整个排序结束就可以选出最大的或者最小的前N个数,但是快排和基数排序都不可以.</p></li><li><p>简单排序中,比较次数与移动次数O(n*n)和O(n)</p></li><li><p>数据表A中每个元素距其最终位置不远，为了节省时间，应该采取的算法是直接插入</p></li><li><p>计数排序辅助数组的长度为max-min+1，max和min为待排序序列的最大值和最小值，故C的长度为：3-0+1=4</p></li><li><p>要与关键字的初始排列次序无关那么就是最好,最坏,一般的情况下排序时间复杂度不变,总共有 堆排序,归并排序,选择排序,基数排序</p></li><li><p>线性表的长度是n,则在最坏情况下,冒泡排序需要的比较次数是n(n-1)/2</p></li><li><p>m个元素k路归并的归并趟数s=logk(m)，代入数据：logk(100)≦3</p></li><li><p>快速排序的平均比较次数最少.</p></li><li><p>选择排序每扫描一次数组,只需要一次交换.</p></li><li><p>有向无环图才能进行拓扑排序.</p></li><li><p>快速排序是在比较排序中平均性能最好的，但还有线性时间排序啊，比如：基数排序，计数排序，桶排序.</p></li><li><p>快速排序,冒泡排序,直接插入排序的最坏复杂度都是n(n-1)/2</p></li><li><p>希尔在某趟排序结束后不一定能选出一个元素放到其最终位置上.</p></li><li><p>归并排序算法在输入数据逆序情况下排序速度最快</p></li><li><p>如果在一个排序算法的执行过程中，没有一对元素被比较过两次或以上，则称该排序算法为节俭排序算法.插入和归并.</p></li><li><p>外排序一般用外存存放数据，采用多路归并的方法进行排序.100Mb的内存,对1Gb的数据进行排序.</p></li><li><p>希尔排序和堆排序都利用了顺序存储的随机访问特性.而链式存储不支持这种性质.</p></li><li><p>将两个各有n个元素的有序表归并成一个有序表,最少的比较次数是N</p></li><li><p>同一待排序序列分别进行折半插入排序和直接插入排序，两者之间元素之间的比较次数不同.</p></li><li><p>注意插入排序是从第二个元素开始向前比(第一个没得比)，到最后一个元素。所以一共n-1趟。</p></li><li><p>基数排序是稳定的，但是应用于整数，不是实数！</p></li><li><p>选择每次从未排序的记录中挑出最小(或最大)关键码字的记录,加入到已排序记录的末尾.起泡排序是加到已排序的开头</p></li><li><p>基于比较的排序的时间复杂度下限O(nlogn)</p></li><li><p>利用顺序统计思路找出n个数字的中位数可以再O(n)时间内完成</p></li><li><p>基于比较的排序问题的时间复杂度下界是O(n*logn)</p></li><li><p>因为希尔排序 是缩小增量排序，所以对于初始序列有序还是无序没有直接关系。</p></li><li><p>插入的排序趟数是固定的n-1，即使序列有序，也要依次从第二个元素开始，向前找它的插入位置。</p></li></ol><p>49.总排序趟数与初始状态无关的有：（除了快速排序和优化的冒泡，其他都是）<br>算法复杂度与初始状态无关的有：堆排序、归并排序、选择排序、基数排序。<br>元素总比较次数与初始状态无关的有：选择排序、基数排序。<br>元素总移动次数与初始状态无关的有：归并排序、基数排序。</p><ol><li><p>Insertion sort and bubble sort are not effcient for large data sets.</p></li><li><p>外部排序最常用的算法是多路归并排序</p></li><li><p>拓扑排序不是内排序</p></li><li><p>最好的内排序是快速</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/v2-f6339408c5e6ac4c81ea34fac868a775_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;排序的知识点&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://abelchao.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://abelchao.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>时间复杂度与空间复杂度</title>
    <link href="http://abelchao.com/2018/07/09/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>http://abelchao.com/2018/07/09/时间复杂度和空间复杂度/</id>
    <published>2018-07-09T01:00:00.000Z</published>
    <updated>2018-07-09T13:27:22.799Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/v2-6a8c5ef5d6a497bf93746b44dab12219_r.jpg" alt=""></p><p><strong>时间复杂度与空间复杂度</strong><br><a id="more"></a></p><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><h2 id="大O渐进表示法"><a href="#大O渐进表示法" class="headerlink" title="大O渐进表示法"></a>大O渐进表示法</h2><p>一个算法语句总的执行次数是关于问题规模N的某个函数，记为分f(N),N称为问题的规模。语句总的执行次数<br>记为T[N],当N不断变化时，T[N]也在变化，算法的执行次数的增长速率和f(N)的增长速率相同。<br>则T[N]=O(f(N)),称O(f(N))为时间复杂度的O渐进表示法。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>首先要说的是，时间复杂度的计算并不是计算程序具体运行的时间，而是算法执行语句的次数。</p><p>计算方法：</p><pre><code>1. 用常数1代替运行时间中的所有加法常数2. 修改后的运行次数函数中，只保留最高阶项3. 去除最高阶项的系数按数量级递增排列，常见的时间复杂度有： 常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n^2)，立方阶O(n^3),…， k次方阶O(n^k),指数阶O(2^n)。 </code></pre><h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><p>如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x &lt;<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">该算法执行次数是<span class="number">10</span>，是一个常数，用时间复杂度表示是O(<span class="number">1</span>)。</span><br></pre></td></tr></table></figure><h2 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h2><p>当有若干个循环语句时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> 该算法<span class="keyword">for</span>循环，最外层循环每执行一次，内层循环都要执行n次，执行次数是根据n所决定的，时间复杂度是O（n^<span class="number">2</span>）</span><br></pre></td></tr></table></figure><h2 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h2><p>循环不仅与n有关，还与执行循环所满足的判断条件有关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n &amp;&amp; arr[i]!=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在此循环，如果arr[i]不等于<span class="number">1</span>的话，时间复杂度是O（n）。如果arr[i]等于<span class="number">1</span>的话，则循环不能执行，时间复杂度是<span class="number">0</span>。</span><br></pre></td></tr></table></figure><h2 id="例四"><a href="#例四" class="headerlink" title="例四"></a>例四</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span>;     </span><br><span class="line"><span class="keyword">while</span> (i&lt;=n)  </span><br><span class="line">  i=i*<span class="number">2</span>; </span><br><span class="line"></span><br><span class="line">T(n)=O(log2n )</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code>算法的时间复杂度和两个因素有关：算法中的最大嵌套循环层数；最内层循环结构中循环的次数。</code></pre><h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>空间复杂度(Space Complexity) 是对一个算法在运行过程中临时占用存储空间大小的量度，记做 S(n)=O(f(n)) ，其中n为问题的规模。</p><p>对于一个算法来说，空间复杂度和时间复杂度往往是相互影响的。当追求一个较好的时间复杂度时，可能会使空间复杂度的性能变差，即可能导致占用较多的存储空间；反之，当追求一个较好的空间复杂度时，可能会使时间复杂度的性能变差，即可能导致占用较长的运行时间。</p><h1 id="常见排序算法的时间复杂度和空间复杂度"><a href="#常见排序算法的时间复杂度和空间复杂度" class="headerlink" title="常见排序算法的时间复杂度和空间复杂度"></a>常见排序算法的时间复杂度和空间复杂度</h1><pre><code>空间复杂度，时间复杂度，稳定性，初始序列对排序的时间复杂度的影响。</code></pre><p><img src="http://oxk1vrcj4.bkt.clouddn.com/20160511201657270.png" alt=""></p><pre><code>注意：    1. 基数排序的复杂度中，r代表关键字的基数，d代表长度，n代表关键字的个数。    2. 初始数据集排列顺序与比较次数无关的有：堆排序、归并排序，选择排序。  （一堆海归选基友）。</code></pre><h1 id="常见的数据结构的基本操作复杂度"><a href="#常见的数据结构的基本操作复杂度" class="headerlink" title="常见的数据结构的基本操作复杂度"></a>常见的数据结构的基本操作复杂度</h1><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180709211936.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/v2-6a8c5ef5d6a497bf93746b44dab12219_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间复杂度与空间复杂度&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://abelchao.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://abelchao.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>毕业论文（Massive MIMO）</title>
    <link href="http://abelchao.com/2018/06/27/%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://abelchao.com/2018/06/27/毕业论文（一）/</id>
    <published>2018-06-27T01:00:00.000Z</published>
    <updated>2018-07-04T07:15:44.540Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/80330356603457038.jpg" alt=""></p><p><strong>Massive MIMO 预编码技术研究与实现</strong><br><a id="more"></a></p><h1 id="Massive-MIMO-预编码技术研究与实现"><a href="#Massive-MIMO-预编码技术研究与实现" class="headerlink" title="Massive MIMO 预编码技术研究与实现"></a>Massive MIMO 预编码技术研究与实现</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>移动技术的发展</strong></p><ol><li>第一代：模拟技术和频分多址（FDMA）</li><li>第二代：时分多址（TDMA）和频分多址（FDMA），第二代移动通信系统与第一代移动通信相比将时间和频率结合在一起使用并以此来寻址，增强了整个系统抗干扰能力和抗衰落能力。</li><li>第三代：码分多址（CDMA），比第二代，其抗干扰能力和抗多径能力增强，但是由于第三代移动通信系统采用闭环功率控制，这个在电路交换中很容易实现，但是在高速分组业务中，由于数据传输速率很快，而功率控制很慢，导致3G不能传输高速数据。<br>另外，由于3G的带宽有限，传输速率和抗干扰能力之间存在矛盾。</li><li>第四代：正交频分复用（OFDM）和多入多出（MIMO）。OFDM是多载波传输的一种。</li></ol><p><strong>Massive MIMO的优势和缺点</strong></p><ol><li>深度挖掘空间维度资源，使得多个用户可以在同一时频资源上与基站同时进行通信，从而可以很大程度上提升频率效率。</li><li>大幅度降低上下行发射功率，提高功率效率。</li><li>波束集中在很窄的范围内，大幅度降低了干扰。</li><li><p>基站天线数量趋于无穷时，最简单的线性预编码也能获得很好的性能，且信道中的噪声和不相关干扰可以忽略不计。</p></li><li><p>Massive MIMO仅考虑时分双工（TDD，Time Division Duplex）系统，该系统利用信道的互易性来获取信道状态信息，然而，因为当前导频空间的维数是有限的，不同小区可能会采用相同的导频序列进行信号发送，导致基站不能区分信号来自哪个小区，不可避免的形成导频污染。</p></li><li>信道模型还不成熟</li><li>预编码中矩阵的维度较高，简单的线性预编码中存在矩阵求逆，导致其计算复杂度大幅度提升。</li><li>功耗大幅度增加，因此需要设计天线单元和阵列。</li></ol><p><strong>什么是导频？什么是导频污染</strong></p><h2 id="研究现状"><a href="#研究现状" class="headerlink" title="研究现状"></a>研究现状</h2><p>   在多用户Massive MIMO系统中，不同信道之间存在相互间的干扰，如何消除这些干扰成为Massive MIMO的主要问题<br>。预编码技术作为Massive MIMO系统中的一项关键技术，通过对发射信号进行预处理，使不同信道之间的干扰得以消除，从而解决多用户Massive MIMO的干扰问题。但由于Massive MIMO系统中，天线数量是目前LTEA的十倍以上，发射天线数目与接收天线数目比值很大，导致Massive MIMO预编码算法必然存在复杂度巨大的问题。</p><p>   最佳的MIMO预编码方案是脏纸编码(dirty paper coding，DPC)，其是以不可承受的复杂性为代价来实现信道容<br>量的提升。与脏纸编码相比，其他非线性预编码方案复杂性低，可以实现接近脏纸编码的信道容量，如矢量扰动(VP)，格子辅助预编码等。但当基站天线数量变大时这些算法的复杂度太高，阻碍了其在MassiveMIMO中的运用。幸运的是，当BS天线数量大幅度增加时削弱了信道间的干扰，此时，Massive MIMO系统采用简单的、计算复杂度低的线性预编码方案就可以获得很好的性能。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ol><li>系统模型和原理，对Massive MIMO系统的频谱效率进行了分析。基站侧天线数量越多，非线性预编码的复杂性太高难以承受，而线性预编码的计算复杂度虽然高，但是相比非线性预编码来说已经降低很多了。</li><li>ZF、RZF预编码算法的性能仿真，比较采用MRT、RZF、ZF预编码算法的系统频率效率。</li><li>TRE和MDPE预编码算法。单小区Massive MIMO系统低复杂度的TPE算法；MDPE算法的改进。</li></ol><h2 id="系统模型"><a href="#系统模型" class="headerlink" title="系统模型"></a>系统模型</h2><p>在多用户MIMO系统中，发射端将输入数据进行串并转换后转变成几路并行的子数据流，再进行预编码处理，然后通过不同的发射天线将进行信号发送。接收端进行一系列的解码处理后即可得到用户所需的数据。MIMO技术将信道分成了几个并行的子信道，在不增加带宽的情况下重复利用频谱资源。理论上频谱效率、无线传输速率、抗干扰、抗衰落能力都可以得到极大提高。</p><p>基于随机矩阵理论的证明表明：理想场景下，Massive MIMO可以消除不相关的声和小尺度衰落的影响。每个小区内终端数量独立于小区的大小，与信道相干时间关。简单的信号处理方法可以在Massive MIMO系统中使用并达到很好的性能。</p><p>本文主要考虑典型的Massive MIMO系统，即在基站侧有N个天线，同时服务K个单天线用户(N》K)，接收信号Y∈C融1，下行链路系统框图如图2．2，接收信号可以表示为式(2.1)：</p><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180703195102.png" alt=""></p><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180703195144.png" alt=""></p><h3 id="点对点"><a href="#点对点" class="headerlink" title="点对点"></a>点对点</h3><p>单小区，基站配有N个发射天线，接收端配有K个接收天线。接收信号可以表示为</p><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180703201159.png" alt=""></p><h3 id="多用户"><a href="#多用户" class="headerlink" title="多用户"></a>多用户</h3><h3 id="多小区"><a href="#多小区" class="headerlink" title="多小区"></a>多小区</h3><h2 id="预编码技术"><a href="#预编码技术" class="headerlink" title="预编码技术"></a>预编码技术</h2><p>Massive MIMO预编码技术从实现方式上可以分为基于非码本和基于码本。而从类型上可以分为非线性和线性。基于非码本的预编码技术包含了非线性预编码和线性预编码两类，这两类预编码都需要发送端获知全部或者部分的信道状态信息(ChannelState Information，CSI)，其信道反馈信息较大，但性能较好。</p><h3 id="基于码本的预编码"><a href="#基于码本的预编码" class="headerlink" title="基于码本的预编码"></a>基于码本的预编码</h3><p>基于码本的预编码通常都是线性预编码，是在发送端和接收端保存相同的码本集合。接收端通过信道估计获得当前的CSI，然后，根据CSI和码本选择方案从码本集合中选取性能最好的码本，并将对应的预编码矩阵指示序号(Precoding matrix index，PMI)反馈给基站，基站根据PMI从码本集合中选取对应的码本进行预编码。基于码本的预编码需要的信道信息反馈量较小，计算复杂度低，现有的码本设计方法(如：基于2D．DFT码本设计)性能较差，不适用于MassiveMIMO系统。新型的码本设计方法(如：基于BD．DFT扩展的码本设计)能够达到不错的性能。</p><h3 id="非线性"><a href="#非线性" class="headerlink" title="非线性"></a>非线性</h3><h3 id="线性"><a href="#线性" class="headerlink" title="线性"></a>线性</h3><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180703202743.png" alt=""></p><p><strong>1. ZF预编码</strong></p><p><strong>2. MMSE预编码</strong></p><p><strong>3. MRT预编码</strong></p><h2 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h2><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180703203420.png" alt=""></p><p>上图中，首先，采用matlab滋数randint(100*K枣b，1)产生信源(100为信道变化～次发送信号信号数量，K为终端用户数，b为调制阶数)，然后，经过64QAM调制、复用(鼯16)、预编码、发送信号归一化、乘以P^1/2(P为发送功率)、过信道(信道矩阵服从CN(0，1)分布)、加噪声(n为高斯自噪声)、除以P^1/2，a，p(预编码归一化因子)、解复用、解MQAM调制，最后，得到接收信号(每个dB循环10000次)。</p><h3 id="ZF与MMSE算法中SNR和BER的比较"><a href="#ZF与MMSE算法中SNR和BER的比较" class="headerlink" title="ZF与MMSE算法中SNR和BER的比较"></a>ZF与MMSE算法中SNR和BER的比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">%基于ZF准则和MMSE准则的预编码性能比较</span><br><span class="line"><span class="function">function <span class="title">zf_mmse</span><span class="params">()</span></span></span><br><span class="line"><span class="function">clear all</span></span><br><span class="line"><span class="function">close all</span></span><br><span class="line"><span class="function">format <span class="keyword">long</span></span>; %将数据显示为长整型科学计数 </span><br><span class="line">Nt=<span class="number">4</span>;%天线个数</span><br><span class="line">Nr=<span class="number">4</span>;</span><br><span class="line">SNR=[<span class="number">0</span>:<span class="number">2</span>:<span class="number">20</span>];%设置不同信噪比</span><br><span class="line">channel_n=<span class="number">100</span>*ones(<span class="number">1</span>,length(SNR));</span><br><span class="line">error_mmselinp=zeros(<span class="number">1</span>,length(SNR));%初始化误码率</span><br><span class="line">error_zflinp=zeros(<span class="number">1</span>,length(SNR));</span><br><span class="line"><span class="keyword">for</span> loop_ebno=<span class="number">1</span>:length(SNR)%不同信噪比的循环</span><br><span class="line">    snr=<span class="number">10</span>.^(SNR(loop_ebno)/<span class="number">10</span>);%将信噪比从分贝形式转化成比例表示</span><br><span class="line">    ea=<span class="number">1</span>;%每个天线发射的功率，也即信号向量中每个元素的功率</span><br><span class="line">    es=ea*Nt;%总共的发射功率</span><br><span class="line">    sigma_n2=es/snr;%噪声功率</span><br><span class="line">    num=<span class="number">200</span>;%发送数据个数</span><br><span class="line">    tic,</span><br><span class="line">    <span class="keyword">for</span> loop_channel=<span class="number">1</span>:channel_n(loop_ebno)%信道的实现次数的循环</span><br><span class="line">        H=sqrt(<span class="number">1</span>/<span class="number">2</span>)*(randn(Nr,Nt)+j*randn(Nr,Nt));%信道增益矩阵</span><br><span class="line">        mmse_F=H<span class="string">'*inv(H*H'</span>+sigma_n2/ea*eye(Nt));</span><br><span class="line">        zf_F=H<span class="string">'*inv(H*H'</span>); %求出F^,文献MIMO信道预编码技术研究  </span><br><span class="line">        beta_mmse=sqrt(es/norm(mmse_F,<span class="string">'fro'</span>).^<span class="number">2</span>);</span><br><span class="line">        beta_zf=sqrt(es/norm(zf_F,<span class="string">'fro'</span>).^<span class="number">2</span>);%计算zf_F的Frobenius范数%%求出缩放因子beta</span><br><span class="line">        F_mmse=beta_mmse*mmse_F; </span><br><span class="line">        F_zf=beta_zf*zf_F;%求出预编码矩阵F=F^×beta</span><br><span class="line">        <span class="keyword">for</span> loop_num=<span class="number">1</span>:num%在一帧数据符号中，信道保持不变。一帧总共有num个数据发送</span><br><span class="line">            gen_u=(sign(randn(Nt,<span class="number">1</span>))+j*sign(randn(Nt,<span class="number">1</span>)));%产生信号</span><br><span class="line">            u=sqrt(<span class="number">1</span>/<span class="number">2</span>)*gen_u;%归一化信号功率</span><br><span class="line">            x_mmse=F_mmse*u;</span><br><span class="line">            x_zf=F_zf*u;%发送信号</span><br><span class="line">            noise=sqrt(sigma_n2/<span class="number">2</span>)*(randn(Nr,<span class="number">1</span>)+j*randn(Nr,<span class="number">1</span>));%生成噪声功率为sigma_n2的噪声</span><br><span class="line">            noise1=sqrt(sigma_n2/<span class="number">2</span>)*(randn(Nr,<span class="number">1</span>)+j*randn(Nr,<span class="number">1</span>));</span><br><span class="line">            y_mmse=H*x_mmse+noise;</span><br><span class="line">            y_zf=H*x_zf+noise1;</span><br><span class="line">            r_mmse=<span class="number">1</span>/beta_mmse*y_mmse;</span><br><span class="line">            r_zf=<span class="number">1</span>/beta_zf*y_zf;%接收信号</span><br><span class="line">            rev_data_mmse=sign(real(r_mmse))+j*sign(imag(r_mmse));%对接收信号进行判决</span><br><span class="line">            rev_data_zf=sign(real(r_zf))+j*sign(imag(r_zf));</span><br><span class="line">            error_mmselinp(<span class="number">1</span>,loop_ebno)=error_mmselinp(<span class="number">1</span>,loop_ebno)+sum(((abs(rev_data_mmse-gen_u)).^<span class="number">2</span>)/<span class="number">4</span>);%计算误比特数</span><br><span class="line">            error_zflinp(<span class="number">1</span>,loop_ebno)=error_zflinp(<span class="number">1</span>,loop_ebno)+sum(((abs(rev_data_zf-gen_u)).^<span class="number">2</span>)/<span class="number">4</span>);</span><br><span class="line">        end </span><br><span class="line">    end </span><br><span class="line">    toc</span><br><span class="line">    ber_mmselinp(<span class="number">1</span>,loop_ebno)=error_mmselinp(<span class="number">1</span>,loop_ebno)/(num*Nt*<span class="number">2</span>*channel_n(loop_ebno));%注意每一个信噪比产生的数据数=channel_n(loop_ebno)*num*Nt*<span class="number">2</span>,</span><br><span class="line">                                                                                          %乘以<span class="number">2</span>是因为，产生的数据符号式复数，相当于进行了<span class="number">4</span>QAM调制</span><br><span class="line">    ber_zflinp(<span class="number">1</span>,loop_ebno)=error_zflinp(<span class="number">1</span>,loop_ebno)/(num*Nt*<span class="number">2</span>*channel_n(loop_ebno));</span><br><span class="line">end </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%画出不同准则下误码率和信噪比的曲线</span><br><span class="line">P1=semilogy(SNR,ber_mmselinp,<span class="string">'o-r'</span>);</span><br><span class="line">hold on</span><br><span class="line">P2=semilogy(SNR,ber_zflinp,<span class="string">'*-k'</span>);</span><br><span class="line">set(P1,<span class="string">'Linewidth'</span>,[<span class="number">2</span>]);%P1线宽<span class="number">2</span>号</span><br><span class="line">set(P2,<span class="string">'Linewidth'</span>,[<span class="number">2</span>]);%P2线宽<span class="number">2</span>号</span><br><span class="line">grid on;</span><br><span class="line">xlabel(<span class="string">'symbol SNR(dB)'</span>);ylabel(<span class="string">'BER'</span>);</span><br><span class="line">title(<span class="string">'基于ZF准则和MMSE准则的预编码性能比较'</span>)</span><br><span class="line">leg1=<span class="string">'mmselinear'</span>;%设置图例</span><br><span class="line">leg2=<span class="string">'zflinear'</span>;</span><br><span class="line">legend(leg1,leg2);</span><br></pre></td></tr></table></figure><p><img src="http://oxk1vrcj4.bkt.clouddn.com/4r4t%E7%9A%84ZF%E4%B8%8EMMSE.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/80330356603457038.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Massive MIMO 预编码技术研究与实现&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="5G信号源" scheme="http://abelchao.com/categories/5G%E4%BF%A1%E5%8F%B7%E6%BA%90/"/>
    
    
      <category term="5G信号源" scheme="http://abelchao.com/tags/5G%E4%BF%A1%E5%8F%B7%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode（二）</title>
    <link href="http://abelchao.com/2018/06/26/LeetCode%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://abelchao.com/2018/06/26/LeetCode（二）/</id>
    <published>2018-06-26T01:00:00.000Z</published>
    <updated>2018-07-02T12:49:32.700Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/v2-ae91c349972a51da6a0791851fd53267_hd.jpg" alt=""></p><p><strong>LeetCode（二）</strong><br><a id="more"></a></p><h1 id="unique-paths"><a href="#unique-paths" class="headerlink" title="unique paths"></a>unique paths</h1><pre><code>就是机器人走方格，和走点数的唯一不同就是返回条件不一样</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//走交叉点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getPath</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> column)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row==<span class="number">0</span>||column==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> getPath(row-<span class="number">1</span>,column)+getPath(row,column-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//走方格</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getPath</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> column)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row==<span class="number">1</span>||column==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> getPath(row-<span class="number">1</span>,column)+getPath(row,column-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//走方格非递归</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePath3</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] map = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;m;i++)&#123;</span><br><span class="line">            map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j= <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            map[<span class="number">0</span>][j]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                map[i][j] = map[i-<span class="number">1</span>][j]+map[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sort-color"><a href="#sort-color" class="headerlink" title="sort color"></a>sort color</h1><pre><code>new int[]{0,1,1,0,2,0,1,1,0,2,1}，数组排序，只有0，1，2三个数</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//就是把0，1，2得到数量后顺序排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:A)</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">                r++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">                w++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b++;</span><br><span class="line">        <span class="keyword">int</span> len = A.length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;r)</span><br><span class="line">                A[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;=r &amp;&amp; i&lt;r+w)</span><br><span class="line">                A[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                A[i] = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="remove-duplicates-from-sorted-array"><a href="#remove-duplicates-from-sorted-array" class="headerlink" title="remove duplicates from sorted array"></a>remove duplicates from sorted array</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(A==<span class="keyword">null</span>||A.length==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = A.length;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = A[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i]==temp)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count++;</span><br><span class="line">                temp = A[i];</span><br><span class="line">                A[++t] = temp; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="remove-duplicates-from-sorted-list"><a href="#remove-duplicates-from-sorted-list" class="headerlink" title="remove-duplicates-from-sorted-list"></a>remove-duplicates-from-sorted-list</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(cur.next != <span class="keyword">null</span> &amp;&amp; cur.val == cur.next.val)</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">deleteDuplicates</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">Node h = head;</span><br><span class="line"><span class="keyword">while</span>(h!=<span class="keyword">null</span>)&#123;</span><br><span class="line">Node temp = h;</span><br><span class="line"><span class="keyword">while</span>(temp.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(h.val==temp.next.val)&#123;</span><br><span class="line">temp.next = temp.next.next;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">h = h.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="remove-duplicates-from-sorted-list-ii"><a href="#remove-duplicates-from-sorted-list-ii" class="headerlink" title="remove-duplicates-from-sorted-list-ii"></a>remove-duplicates-from-sorted-list-ii</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode FakeHead=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        FakeHead.next=head;</span><br><span class="line">        ListNode pre=FakeHead;</span><br><span class="line">        ListNode cur=head; </span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123; </span><br><span class="line">            <span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>&amp;&amp;cur.val==cur.next.val)&#123;</span><br><span class="line">                cur=cur.next;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span>(pre.next==cur)&#123;</span><br><span class="line">                pre=pre.next;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                pre.next=cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> FakeHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="merge-two-sorted-lists"><a href="#merge-two-sorted-lists" class="headerlink" title="merge-two-sorted-lists"></a>merge-two-sorted-lists</h1><pre><code>归并排序的第二步</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode h1, ListNode h2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(h1==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> h2;</span><br><span class="line">        <span class="keyword">if</span>(h2==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> h1;</span><br><span class="line"></span><br><span class="line">        ListNode fakeNode = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode cur = fakeNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(h1!=<span class="keyword">null</span> &amp;&amp; h2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(h1.val&lt;h2.val)&#123;</span><br><span class="line">                cur.next = h1;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                h1 = h1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur.next = h2;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                h2 = h2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(h1!=<span class="keyword">null</span>)</span><br><span class="line">            cur.next = h1;</span><br><span class="line">        <span class="keyword">if</span>(h2!=<span class="keyword">null</span>)</span><br><span class="line">            cur.next = h2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fakeNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="insert-lists"><a href="#insert-lists" class="headerlink" title="insert lists"></a>insert lists</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">sortListByInsert</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">Node fakeNode = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line">Node pre = fakeNode;</span><br><span class="line">Node cur = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">Node next = cur.next;</span><br><span class="line">pre = fakeNode;</span><br><span class="line"><span class="keyword">while</span>(pre.next!=<span class="keyword">null</span> &amp;&amp; pre.next.val&lt;=cur.val)&#123;</span><br><span class="line">pre = pre.next;</span><br><span class="line">&#125;</span><br><span class="line">cur.next = pre.next;</span><br><span class="line">pre.next = cur;</span><br><span class="line">cur = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fakeNode.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="remove-nth-node-from-end-of-list"><a href="#remove-nth-node-from-end-of-list" class="headerlink" title="remove-nth-node-from-end-of-list"></a>remove-nth-node-from-end-of-list</h1><pre><code>1-&gt;2-&gt;3-&gt;4-&gt;5 (1-&gt;2-&gt;3-&gt;5)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line"></span><br><span class="line">        ListNode fakeNode = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode temp = fakeNode;</span><br><span class="line"></span><br><span class="line">        temp.next = slow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>&amp;&amp;fast!=<span class="keyword">null</span>;i++)</span><br><span class="line">            fast = fast.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(fast==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        temp.next = slow.next;</span><br><span class="line">        <span class="keyword">return</span> fakeNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="path-sum"><a href="#path-sum" class="headerlink" title="path-sum"></a>path-sum</h1><pre><code>给定一棵二叉树和一个数，判断是否存在一条从根节点到任意节点的路径，其所经过的节点值之和等于给定的数</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="keyword">null</span> &amp;&amp; root.right==<span class="keyword">null</span> &amp;&amp; sum - root.val==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> (hasPathSum(root.left,sum-root.val)||hasPathSum(root.right,sum-root.val));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="symmetric-tree"><a href="#symmetric-tree" class="headerlink" title="symmetric-tree"></a>symmetric-tree</h1><pre><code>二叉树是否镜像</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span> isSymmetric(root.left,root.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode left,TreeNode right)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left==<span class="keyword">null</span> &amp;&amp; right==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(left==<span class="keyword">null</span> || right==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left.val!=right.val)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (isSymmetric(left.left,right.right) &amp;&amp; isSymmetric(left.right,right.left));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="minimum-path-sum"><a href="#minimum-path-sum" class="headerlink" title="minimum-path-sum"></a>minimum-path-sum</h1><pre><code>最小路径和</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>]+grid[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j-<span class="number">1</span>]+grid[<span class="number">0</span>][j];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">                dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>])+grid[i][j];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="spiral-matrix"><a href="#spiral-matrix" class="headerlink" title="spiral-matrix"></a>spiral-matrix</h1><pre><code>顺时针打印矩阵（螺旋矩阵）</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(matrix==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        <span class="keyword">int</span> row = matrix.length;</span><br><span class="line">        <span class="keyword">if</span>(row&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        <span class="keyword">int</span> column = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(column&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(row&gt;start*<span class="number">2</span> &amp;&amp; column&gt;start*<span class="number">2</span>)&#123;</span><br><span class="line">            printByClockwise(matrix,row,column,start,list);</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printByClockwise</span><span class="params">(<span class="keyword">int</span>[][] matrix,<span class="keyword">int</span> row,<span class="keyword">int</span> column,<span class="keyword">int</span> start,List&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> endRow = row-<span class="number">1</span>-start;</span><br><span class="line">        <span class="keyword">int</span> endColumn = column-<span class="number">1</span>-start;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从左往后打印</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=endColumn;i++)</span><br><span class="line">            list.add(matrix[start][i]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从上往下打印</span></span><br><span class="line">        <span class="keyword">if</span>(endRow&gt;start)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=start+<span class="number">1</span>;i&lt;=endRow;i++)</span><br><span class="line">                list.add(matrix[i][endColumn]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从右往左打印</span></span><br><span class="line">        <span class="keyword">if</span>(endRow&gt;start &amp;&amp; endColumn&gt;start)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=endColumn-<span class="number">1</span>;i&gt;=start;i--)</span><br><span class="line">                list.add(matrix[endRow][i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(endRow-<span class="number">1</span>&gt;start &amp;&amp; endColumn&gt;start)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=endRow-<span class="number">1</span>;i&gt;=start+<span class="number">1</span>;i--)</span><br><span class="line">                list.add(matrix[i][start]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="spiral-matrix-ii"><a href="#spiral-matrix-ii" class="headerlink" title="spiral-matrix-ii"></a>spiral-matrix-ii</h1><pre><code>给一个数字n，1^2,2^2,...n^2。（旋转生成）</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>, rowStart = <span class="number">0</span>, rowEnd = n - <span class="number">1</span>, colStart = <span class="number">0</span>, colEnd = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt;= n * n) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = colStart; i &lt;= colEnd; i++) &#123;</span><br><span class="line">                res[rowStart][i] = index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = rowStart + <span class="number">1</span>; i &lt;= rowEnd; i++) &#123;</span><br><span class="line">                res[i][colEnd] = index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = colEnd - <span class="number">1</span>; i &gt;= colStart; i--) &#123;</span><br><span class="line">                res[rowEnd][i] = index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = rowEnd - <span class="number">1</span>; i &gt; rowStart; i--) &#123;</span><br><span class="line">                res[i][colStart] = index++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rowStart += <span class="number">1</span>;</span><br><span class="line">            rowEnd -= <span class="number">1</span>;</span><br><span class="line">            colStart += <span class="number">1</span>;</span><br><span class="line">            colEnd -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Jump-Game"><a href="#Jump-Game" class="headerlink" title="Jump Game"></a>Jump Game</h1><pre><code>假设有一个数组，该数组中的元素全部都是非负整数。当前起点为数组中下标为零的位置，要走到数组的最后一个下标。其中，数组中每一个元素代表当前下标下可以前进的最大步数。如果可以从起点走向终点，那么返回true，否则返回false。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="permutations"><a href="#permutations" class="headerlink" title="permutations"></a>permutations</h1><pre><code>全排列</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        res = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        <span class="comment">//对数组元素进行从小到大排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        solve(list, nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(ArrayList&lt;Integer&gt; list, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list.size() == nums.length) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!list.contains(nums[i])) &#123;</span><br><span class="line">                list.add(nums[i]);</span><br><span class="line">                solve(list, nums);</span><br><span class="line">                list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="swap-nodes-in-pairs"><a href="#swap-nodes-in-pairs" class="headerlink" title="swap-nodes-in-pairs"></a>swap-nodes-in-pairs</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">swapPairs</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">Node fakeNode = head.next;</span><br><span class="line">head.next = swapPairs(head.next.next);</span><br><span class="line">fakeNode.next = head;</span><br><span class="line"><span class="keyword">return</span> fakeNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Sum-Root-to-Leaf-Numbers"><a href="#Sum-Root-to-Leaf-Numbers" class="headerlink" title="Sum Root to Leaf Numbers"></a>Sum Root to Leaf Numbers</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> helper(root,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(root.left==<span class="keyword">null</span> &amp;&amp; root.right==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> sum*<span class="number">10</span>+root.val;</span><br><span class="line"><span class="keyword">return</span> helper(root.left,sum*<span class="number">10</span>+root.val)+helper(root.right,sum*<span class="number">10</span>+root.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/v2-ae91c349972a51da6a0791851fd53267_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LeetCode（二）&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://abelchao.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://abelchao.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode（一）</title>
    <link href="http://abelchao.com/2018/06/25/LeetCode%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://abelchao.com/2018/06/25/LeetCode（一）/</id>
    <published>2018-06-25T01:00:00.000Z</published>
    <updated>2018-06-26T03:40:42.891Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/bcc9eaa4f63e56a0eff354b37bbeac42_r.jpg" alt=""></p><p><strong>LeetCode（一）</strong><br><a id="more"></a></p><h1 id="maximum-depth-of-binary-tree（就是高度）"><a href="#maximum-depth-of-binary-tree（就是高度）" class="headerlink" title="maximum depth of binary tree（就是高度）"></a>maximum depth of binary tree（就是高度）</h1><pre><code>二叉树的最大深度其实就是左子树或者右子树中较大深度的子树高度+1，当传入节点是null时，返回0</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxDepth(root.left),maxDepth(root.right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="minimum-depth-of-binary-tree"><a href="#minimum-depth-of-binary-tree" class="headerlink" title="minimum depth of binary tree"></a>minimum depth of binary tree</h1><pre><code>二叉树的最小深度递归解决是最好的，当左子树或右子树为null时，直接判断另外的一个，一旦都不为null，才取最小值。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> run(root.right)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.right==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> run(root.left)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.min(run(root.left),run(root.right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="evaluate-reverse-polish-notation"><a href="#evaluate-reverse-polish-notation" class="headerlink" title="evaluate reverse polish notation"></a>evaluate reverse polish notation</h1><pre><code>逆波兰法的两步操作（本题只考了第二步，其实第一步最难，因为需要考虑-是负号还是减号的问题，还要把数字和符号分开）：    1. 中缀表达式到后缀表达式        1. List与Stack分别作为后缀表达式的保存集合和符号位置变换利用的栈。        2. 遇到数字直接进入List，遇到符号（、+、-、*、/、）需要入栈，但是入栈之前需要考虑栈顶符号和入栈符号的优先级问题：            1. （，直接入栈            2. ），从栈顶开始弹出，直到遇到）或者栈的size等于0（第二个条件基本不会成立，可以不写），弹出的符号进入List            3. +，-，只要遇到的不是（，就需要出栈（直到遇到（或者栈的size等于0，就入栈），其他的就直接入栈。            4. /，*，只有遇到的不是（，+，-的时候，或者栈的size等于0，就需要直接出栈，其他的就是弹出。    2. 后缀表达式计算值        1. 遇到数字进栈。        2. 遇到符号，弹出栈顶两个操作数，计算后，把计算得到的结果再压入栈        3. 栈中最后剩余的数字就是答案。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//逆波兰法的最后一步，数字进栈，符号出栈，计算后，又入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String s:tokens)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.matches(<span class="string">"[\\+\\-\\*\\/]&#123;1&#125;"</span>))&#123;</span><br><span class="line">                <span class="keyword">int</span> n1 = stack.pop();</span><br><span class="line">                <span class="keyword">int</span> n2 = stack.pop();</span><br><span class="line">                <span class="keyword">int</span> n = calculate(n1,n2,s);</span><br><span class="line">                stack.push(n);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(Integer.parseInt(s));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> n1,<span class="keyword">int</span> n2,String symbol)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(symbol.equals(<span class="string">"+"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> n1+n2;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(symbol.equals(<span class="string">"*"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> n1*n2;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(symbol.equals(<span class="string">"/"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> n2/n1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n2-n1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="max-points-on-a-line"><a href="#max-points-on-a-line" class="headerlink" title="max points on a line"></a>max points on a line</h1><pre><code>求二维平面上n个点中，最多共线的点数（穷举，不会）</code></pre><h1 id="sort-list"><a href="#sort-list" class="headerlink" title="sort list"></a>sort list</h1><pre><code>链表排序（时间复杂度nlogn），归并排序</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//找到链表的中间节点，然后递归对前半部分和后半部分分别进行归并排序，最后对两个排好序的链表进行Merge</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode firstHalf = head;</span><br><span class="line">        <span class="keyword">while</span>(fast.next!=<span class="keyword">null</span> &amp;&amp; fast.next.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode secondHalf = slow.next;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        ListNode leftList = <span class="keyword">null</span>;</span><br><span class="line">        ListNode rightList = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(firstHalf!=secondHalf)&#123;</span><br><span class="line">            leftList = sortList(firstHalf);</span><br><span class="line">            rightList = sortList(secondHalf);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> merge(leftList,rightList);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">merge</span><span class="params">(ListNode leftList,ListNode rightList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(leftList==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> rightList;</span><br><span class="line">        <span class="keyword">if</span>(rightList==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> leftList;</span><br><span class="line">        </span><br><span class="line">        ListNode mergeNode = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode temp = mergeNode;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(rightList!=<span class="keyword">null</span> &amp;&amp; leftList!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rightList.val&lt;leftList.val)&#123;</span><br><span class="line">                temp.next = rightList;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">                rightList = rightList.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp.next = leftList;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">                leftList = leftList.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(rightList!=<span class="keyword">null</span>)</span><br><span class="line">            temp.next = rightList;</span><br><span class="line">        <span class="keyword">if</span>(leftList!=<span class="keyword">null</span>)</span><br><span class="line">            temp.next = leftList;</span><br><span class="line">        <span class="keyword">return</span> mergeNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="single-number"><a href="#single-number" class="headerlink" title="single number"></a>single number</h1><pre><code>找到一个数组中只出现一次的数，其他的数字都出现了2次。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//把数组中所有的数都进行异或，那么相同的数字异或后成为0，而0与任何数异或为本数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:A)</span><br><span class="line">            n = n^i;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="single-number-2"><a href="#single-number-2" class="headerlink" title="single number 2"></a>single number 2</h1><pre><code>找到一个数组中只出现一次的数，其他的数字都出现了3次。int是32位的，4个字节。把数组中的每一个数，都变成2进制，进行位运算，通过每个数字&amp;1，可以判断出这一位上1的个数。一旦1的个数进行%k，余不尽，那么把这一位再左移i位，后面前面都是0，计算出这个数，累加就可以了。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = A.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length;j++)</span><br><span class="line">                count+=(A[j]&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">            result+=(count%<span class="number">3</span>)&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reverse-integer"><a href="#reverse-integer" class="headerlink" title="reverse integer"></a>reverse integer</h1><pre><code>反转Integer数，考虑到溢出。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">            res = res*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">            x = x/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)((res&gt;Integer.MAX_VALUE||res&lt;Integer.MIN_VALUE)?<span class="number">0</span>:res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="palindrome-number"><a href="#palindrome-number" class="headerlink" title="palindrome-number"></a>palindrome-number</h1><pre><code>回文数字</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不能把数字变成字符串，那么就把生成一个反转数，就和这个题一样了：reverse integer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = x;</span><br><span class="line">        <span class="keyword">while</span>(temp!=<span class="number">0</span>)&#123;</span><br><span class="line">            res = res * <span class="number">10</span> + temp % <span class="number">10</span>;</span><br><span class="line">            temp = temp / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res==x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="linked-list-cycle"><a href="#linked-list-cycle" class="headerlink" title="linked list cycle"></a>linked list cycle</h1><pre><code>单向链表是否有环快慢节点是否相等</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(slow==fast)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="linked-list-cycle-ii"><a href="#linked-list-cycle-ii" class="headerlink" title="linked list cycle-ii"></a>linked list cycle-ii</h1><pre><code>环的入口地址</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast==slow)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fast==<span class="keyword">null</span> || fast.next==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span>(slow!=fast)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="linked-list-cycle-iii"><a href="#linked-list-cycle-iii" class="headerlink" title="linked list cycle-iii"></a>linked list cycle-iii</h1><pre><code>环长</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoopLength</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Node fast = head;</span><br><span class="line">Node slow = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fast = fast.next.next;</span><br><span class="line">slow = slow.next;</span><br><span class="line"><span class="keyword">if</span>(slow==fast)&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">count++;</span><br><span class="line">fast = fast.next.next;</span><br><span class="line">slow = slow.next;</span><br><span class="line"><span class="keyword">if</span>(slow==fast)</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="maximum-subarray"><a href="#maximum-subarray" class="headerlink" title="maximum subarray"></a>maximum subarray</h1><pre><code>让我们找到一个连续的子数组，它的sum是最大的。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(A==<span class="keyword">null</span> || A.length==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> length = A.length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            sum = Math.max(sum+A[i],A[i]);</span><br><span class="line">            max = Math.max(sum,max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="search-insert-position"><a href="#search-insert-position" class="headerlink" title="search insert position"></a>search insert position</h1><pre><code>在一个排好序的数组查找某值，存在则返回对应的value,不存在则返回能插入到数组中的index，  其实就是找到第一个大于等于目标值的下标。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = A.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">            <span class="keyword">if</span>(target==A[i]||target&lt;A[i])</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="same-tree"><a href="#same-tree" class="headerlink" title="same tree"></a>same tree</h1><pre><code>判断两个树是不是相等</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> || q == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        <span class="keyword">return</span> (p.val==q.val) &amp;&amp; isSameTree(p.left,q.left) &amp;&amp; isSameTree(p.right,q.right); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="balanced-binary-tree"><a href="#balanced-binary-tree" class="headerlink" title="balanced binary tree"></a>balanced binary tree</h1><pre><code>一个树是不是平衡二叉树</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(Math.abs(height(root.left) - height(root.right))&gt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(height(node.left),height(node.right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="climbing-stairs"><a href="#climbing-stairs" class="headerlink" title="climbing -stairs"></a>climbing -stairs</h1><pre><code>n个台阶的楼梯，每次能够上1或2个台阶，有多少种不同到达顶部的走法？</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>; dp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i)</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="search-a-2d-matrix"><a href="#search-a-2d-matrix" class="headerlink" title="search-a-2d-matrix"></a>search-a-2d-matrix</h1><pre><code>排序的二维数组中查找一个数字</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.length==<span class="number">0</span>||matrix[<span class="number">0</span>].length==<span class="number">0</span>||matrix==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> rows = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[rows*cols];</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">                arr[t++] = matrix[i][j];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==target)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;target)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="binary-tree-preorder-inorder-postorder-traversal"><a href="#binary-tree-preorder-inorder-postorder-traversal" class="headerlink" title="binary tree preorder/inorder/postorder traversal"></a>binary tree preorder/inorder/postorder traversal</h1><pre><code>二叉树的前中后序遍历</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">System.out.print(root.val);</span><br><span class="line">preorderTraversal(root.left);</span><br><span class="line">preorderTraversal(root.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">inorderTraversal(root.left);</span><br><span class="line">System.out.print(root.val);</span><br><span class="line">inorderTraversal(root.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">postorderTraversal(root.left);</span><br><span class="line">postorderTraversal(root.right);</span><br><span class="line">System.out.print(root.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="binary-tree-level-order-traversal"><a href="#binary-tree-level-order-traversal" class="headerlink" title="binary tree level order traversal"></a>binary tree level order traversal</h1><pre><code>二叉树的层序遍历</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; levelorderTraversal(TreeNode root)&#123;</span><br><span class="line">ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">ArrayList&lt;TreeNode&gt; tempList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">tempList.add(root);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!tempList.isEmpty())&#123;</span><br><span class="line">ArrayList&lt;Integer&gt; intList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList&lt;TreeNode&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(TreeNode node : tempList)&#123;</span><br><span class="line">intList.add(node.val);</span><br><span class="line"><span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)</span><br><span class="line">temp.add(node.left);</span><br><span class="line"><span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)</span><br><span class="line">temp.add(node.right);</span><br><span class="line">&#125;</span><br><span class="line">list.add(intList);</span><br><span class="line">tempList = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="best-time-to-buy-and-sell-stock"><a href="#best-time-to-buy-and-sell-stock" class="headerlink" title="best time to buy and sell stock"></a>best time to buy and sell stock</h1><pre><code>假设你有一个数组，里面存放的第i个元素表示第i天的股票的价格，如果你最多只允许进行一次交易（买进和卖出股票视为一次交易）   请设计一个算法得到最大利润。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = prices.length;</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> minBuy = prices[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">minBuy = Math.min(minBuy,prices[i]);</span><br><span class="line">maxProfit = Math.max(maxProfit,prices[i]-minBuy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxProfit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="best-time-to-buy-and-sell-stock-ii"><a href="#best-time-to-buy-and-sell-stock-ii" class="headerlink" title="best time to buy and sell stock ii"></a>best time to buy and sell stock ii</h1><pre><code>无限制买入卖出，之后后一天比前一天的大，就卖出，利润就是差值，但是注意的是，卖出的当天，也算是新的买入点</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保证后面的比前面的高，就可以卖出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = prices.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">            <span class="keyword">if</span>(prices[i]&gt;prices[i-<span class="number">1</span>])</span><br><span class="line">                maxProfit+=(prices[i]-prices[i-<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> maxProfit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="rotate-image"><a href="#rotate-image" class="headerlink" title="rotate image"></a>rotate image</h1><pre><code>顺时针旋转矩阵90°</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = matrix.length;</span><br><span class="line">        <span class="keyword">int</span>[][] temp = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                temp[j][n-i-<span class="number">1</span>] = matrix[i][j];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                matrix[i][j] = temp[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="container-with-most-water"><a href="#container-with-most-water" class="headerlink" title="container with most water"></a>container with most water</h1><pre><code>我们假设最初的最大蓄水量为0。然后我们分别从数组的两侧进行扫描，由于不允许倾斜，因此蓄水量仅与较低的那个边有关。因此 area=min(height[right],height[left])∗(right−left) 如果height[left] &lt; height[right]，那么left右移，找到一个比height[left]大的值。反之，则right左移。同时需要保持跟踪最大</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(height==<span class="keyword">null</span> || height.length&lt;<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = height.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len-<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            maxArea = Math.max(maxArea,Math.min(height[left],height[right])*(right-left));</span><br><span class="line">            <span class="keyword">if</span>(height[left]&lt;height[right])</span><br><span class="line">                left++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="unique-binary-search-trees"><a href="#unique-binary-search-trees" class="headerlink" title="unique binary search trees"></a>unique binary search trees</h1><pre><code>https://www.cnblogs.com/grandyang/p/4299608.html</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">                dp[i] += dp[j]*dp[i-j-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="integer-to-roman-Roman-to-Integer"><a href="#integer-to-roman-Roman-to-Integer" class="headerlink" title="integer to roman / Roman to Integer"></a>integer to roman / Roman to Integer</h1><p><a href="https://www.cnblogs.com/TenosDoIt/p/3793503.html" target="_blank" rel="noopener">https://www.cnblogs.com/TenosDoIt/p/3793503.html</a><br><a href="https://www.cnblogs.com/grandyang/p/4120857.html" target="_blank" rel="noopener">https://www.cnblogs.com/grandyang/p/4120857.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String[] M = &#123;<span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span>&#125;;</span><br><span class="line">        String[] C = &#123;<span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span>&#125;;</span><br><span class="line">        String[] X = &#123;<span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span>&#125;;</span><br><span class="line">        String[] I = &#123;<span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> M[num/<span class="number">1000</span>] + C[(num%<span class="number">1000</span>)/<span class="number">100</span>] + X[(num%<span class="number">100</span>)/<span class="number">10</span>] + I[num%<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/bcc9eaa4f63e56a0eff354b37bbeac42_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LeetCode（一）&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://abelchao.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://abelchao.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="http://abelchao.com/2018/06/11/%E6%8E%92%E5%BA%8F/"/>
    <id>http://abelchao.com/2018/06/11/排序/</id>
    <published>2018-06-11T01:00:00.000Z</published>
    <updated>2018-06-11T13:24:27.845Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180518165301.png" alt=""></p><p><strong>选择、冒泡、插入、希尔、快速、归并</strong><br><a id="more"></a></p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xd.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SortFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Blemon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018年6月11日 下午9:22:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortBySelect</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">int</span> length = arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;length;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&gt;arr[j])&#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortByBubble</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">int</span> length = arr.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">temp = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortByInsert</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = arr.length;</span><br><span class="line"><span class="keyword">int</span> temp,j;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++)&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">for</span>(j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&lt;arr[j])</span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortByShell</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,temp;</span><br><span class="line"><span class="keyword">int</span> step = arr.length;</span><br><span class="line"><span class="keyword">int</span> length = arr.length;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">step = step/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i=step;i&lt;length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&lt;arr[i-step])&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">for</span>(j=i-step;j&gt;=<span class="number">0</span>;j-=step)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;temp)</span><br><span class="line">arr[j+step] = arr[j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[j+step] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(step&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortByQuick</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">qucikSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qucikSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> f,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f&gt;=e)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> axis = partition(arr,f,e);</span><br><span class="line">qucikSort(arr,f,axis-<span class="number">1</span>);</span><br><span class="line">qucikSort(arr,axis+<span class="number">1</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> f,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = arr[f];</span><br><span class="line"><span class="keyword">while</span>(f&lt;e)&#123;</span><br><span class="line"><span class="keyword">while</span>(arr[e]&gt;=key &amp;&amp; f&lt;e)</span><br><span class="line">e--;</span><br><span class="line">arr[f] = arr[e];</span><br><span class="line"><span class="keyword">while</span>(arr[f]&lt;=key &amp;&amp; f&lt;e)</span><br><span class="line">f++;</span><br><span class="line">arr[e] = arr[f];</span><br><span class="line">&#125;</span><br><span class="line">arr[f] = key;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortByMerge</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = arr.length;</span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">mergeSort(arr,<span class="number">0</span>,length-<span class="number">1</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> f,<span class="keyword">int</span> e,<span class="keyword">int</span>[] result)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f&lt;e)&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (f+e)/<span class="number">2</span>;</span><br><span class="line">mergeSort(arr,f,mid,result);</span><br><span class="line">mergeSort(arr,mid+<span class="number">1</span>,e,result);</span><br><span class="line">merge(arr,f,mid,e,result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> f,<span class="keyword">int</span> mid,<span class="keyword">int</span> e,<span class="keyword">int</span>[] result)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=f;</span><br><span class="line"><span class="keyword">int</span> j=mid+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=e)</span><br><span class="line"><span class="keyword">if</span>(arr[i]&lt;arr[j])</span><br><span class="line">result[t++] = arr[i++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">result[t++] = arr[j++];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">result[t++] = arr[i++];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(j&lt;=e)</span><br><span class="line">result[t++] = arr[j++];</span><br><span class="line"></span><br><span class="line">t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(f&lt;=e)</span><br><span class="line">arr[f++] = result[t++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180518165301.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择、冒泡、插入、希尔、快速、归并&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://abelchao.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://abelchao.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>单向链表（有环）</title>
    <link href="http://abelchao.com/2018/06/07/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%88%E6%9C%89%E7%8E%AF%EF%BC%89/"/>
    <id>http://abelchao.com/2018/06/07/单向链表（有环）/</id>
    <published>2018-06-07T01:00:00.000Z</published>
    <updated>2018-07-04T03:08:28.838Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/v2-d62bbcb75581d11905386fa62e58b3c4_hd.jpg" alt=""></p><p><strong>单向链表的一些操作</strong><br><a id="more"></a></p><h1 id="SingleLink"><a href="#SingleLink" class="headerlink" title="SingleLink"></a>SingleLink</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1. 正向打印链表</span></span><br><span class="line"><span class="comment">2. 反向打印链表（递归）</span></span><br><span class="line"><span class="comment">3. 反转链表（非递归）</span></span><br><span class="line"><span class="comment">4. 倒数第K个节点（快节点先走k-1步）</span></span><br><span class="line"><span class="comment">5. 删除倒数第K个数</span></span><br><span class="line"><span class="comment">6. 链表的中间节点</span></span><br><span class="line"><span class="comment">7. 判断链表是否有环</span></span><br><span class="line"><span class="comment">8. 环的入口地址</span></span><br><span class="line"><span class="comment">9. 环长</span></span><br><span class="line"><span class="comment">10. 链表长度</span></span><br><span class="line"><span class="comment">11. 链表是否相交</span></span><br><span class="line"><span class="comment">12. 寻找两个链表的交点</span></span><br><span class="line"><span class="comment">13. 链表尾部添加节点</span></span><br><span class="line"><span class="comment">14. 链表指定位置添加节点</span></span><br><span class="line"><span class="comment">15. 删除指定指定位置的节点</span></span><br><span class="line"><span class="comment">16. 删除有序链表中重复的节点，只保留一个</span></span><br><span class="line"><span class="comment">17. 删除有序链表中重复的节点，一个都不保留*</span></span><br><span class="line"><span class="comment">18. 合并两个排序的链表（归并第二步）</span></span><br><span class="line"><span class="comment">19. 链表排序（归并）</span></span><br><span class="line"><span class="comment">20. 链表排序（插入）*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">Node next;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.val = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLink_5</span></span>&#123;</span><br><span class="line"><span class="comment">//1. 正向打印链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLink</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">Node fakeNode = head;</span><br><span class="line"><span class="keyword">while</span>(fakeNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.print(fakeNode.val+<span class="string">" "</span>);</span><br><span class="line">fakeNode = fakeNode.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 反向打印链表（递归）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLinkByReverse</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">printLinkByReverse(head.next);</span><br><span class="line">System.out.print(head.val+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 反转链表（非递归）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">reverseLink</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">Node reverseNode = <span class="keyword">null</span>;</span><br><span class="line">Node work = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(work!=<span class="keyword">null</span>)&#123;</span><br><span class="line">Node temp = work.next;</span><br><span class="line">work.next = reverseNode;</span><br><span class="line">reverseNode = work;</span><br><span class="line">work = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> reverseNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 倒数第K个节点（快节点先走k-1步）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">findFromEndKth</span><span class="params">(Node head,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span>||k&lt;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">Node fast = head;</span><br><span class="line">Node slow = head;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k-<span class="number">1</span>&amp;&amp;fast!=<span class="keyword">null</span>;i++)</span><br><span class="line">fast = fast.next;</span><br><span class="line"><span class="keyword">if</span>(fast==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fast!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fast = fast.next;</span><br><span class="line">slow = slow.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 删除倒数第K个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">deleteFromEndKth</span><span class="params">(Node head,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span>||k&lt;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">Node fakeNode = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line">fakeNode.next = head;</span><br><span class="line">Node pre = fakeNode;</span><br><span class="line"></span><br><span class="line">Node fast = head;</span><br><span class="line">Node slow = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k-<span class="number">1</span>&amp;&amp;fast!=<span class="keyword">null</span>;i++)</span><br><span class="line">fast = fast.next;</span><br><span class="line"><span class="keyword">if</span>(fast==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fast!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fast = fast.next;</span><br><span class="line">slow = slow.next;</span><br><span class="line">pre = pre.next;</span><br><span class="line">&#125;</span><br><span class="line">pre.next = slow.next;</span><br><span class="line"><span class="keyword">return</span> fakeNode.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6. 链表的中间节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">findMiddleNode</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">Node fast = head;</span><br><span class="line">Node slow = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span> &amp;&amp; fast.next.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fast = fast.next.next;</span><br><span class="line">slow = slow.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7. 判断链表是否有环</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">existLoop</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">Node fast = head;</span><br><span class="line">Node slow = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span> &amp;&amp; fast.next.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fast = fast.next.next;</span><br><span class="line">slow = slow.next;</span><br><span class="line"><span class="keyword">if</span>(fast==slow)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8. 环的入口地址</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getLoopEntrance</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">Node fast = head;</span><br><span class="line">Node slow = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span> &amp;&amp; fast.next.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fast = fast.next.next;</span><br><span class="line">slow = slow.next;</span><br><span class="line"><span class="keyword">if</span>(fast==slow)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fast==<span class="keyword">null</span> || fast.next==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">slow = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(slow!=fast)&#123;</span><br><span class="line">slow = slow.next;</span><br><span class="line">fast = fast.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//9. 环长</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getLoopLength</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Node fast = head;</span><br><span class="line">Node slow = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span> &amp;&amp; fast.next.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fast = fast.next.next;</span><br><span class="line">slow = slow.next;</span><br><span class="line"><span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">fast = fast.next.next;</span><br><span class="line">slow = slow.next;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span>(fast==slow)</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//10. 链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> exist = existLoop(head);</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">Node temp = head;</span><br><span class="line"><span class="keyword">if</span>(!exist)&#123;</span><br><span class="line"><span class="keyword">while</span>(temp!=<span class="keyword">null</span>)&#123;</span><br><span class="line">len++;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> loopLen = getLoopLength(head);</span><br><span class="line">Node entrance = getLoopEntrance(head);</span><br><span class="line"><span class="keyword">while</span>(temp!=entrance)&#123;</span><br><span class="line">temp = temp.next;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line">len = len+loopLen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//11. 链表是否相交</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isIntersect</span><span class="params">(Node h1,Node h2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(h1==<span class="keyword">null</span> &amp;&amp; h2==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(h1==<span class="keyword">null</span> || h2==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">Node tail1 = h1;</span><br><span class="line">Node tail2 = h2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(tail1.next!=<span class="keyword">null</span>)</span><br><span class="line">tail1 = tail1.next;</span><br><span class="line"><span class="keyword">while</span>(tail2.next!=<span class="keyword">null</span>)</span><br><span class="line">tail2 = tail2.next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tail1==tail2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//12. 寻找两个链表的交点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getIntersection</span><span class="params">(Node h1,Node h2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(h1==<span class="keyword">null</span> &amp;&amp; h2==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(h1==<span class="keyword">null</span> || h2==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">Node tail1 = h1;</span><br><span class="line">Node tail2 = h2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(tail1.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">tail1 = tail1.next;</span><br><span class="line">len1++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(tail2.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">tail2 = tail2.next;</span><br><span class="line">len2++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(tail1!=tail2)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> gap = len1&gt;len2?len1-len2:len2-len1;</span><br><span class="line"></span><br><span class="line">Node t1 = h1;</span><br><span class="line">Node t2 = h2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(len1&gt;len2)&#123;</span><br><span class="line"><span class="keyword">while</span>(gap&gt;<span class="number">0</span>)&#123;</span><br><span class="line">t1 = t1.next;</span><br><span class="line">gap--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(gap&gt;<span class="number">0</span>)&#123;</span><br><span class="line">t2 = t2.next;</span><br><span class="line">gap--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(t1!=t2)&#123;</span><br><span class="line">t1 = t1.next;</span><br><span class="line">t2 = t2.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//13. 链表尾部添加节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">add</span><span class="params">(Node head,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">Node node = <span class="keyword">new</span> Node(v);</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">Node fakeNode = head;</span><br><span class="line"><span class="keyword">while</span>(fakeNode.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fakeNode = fakeNode.next;</span><br><span class="line">&#125;</span><br><span class="line">fakeNode.next = node;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//14. 链表指定位置添加节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">add</span><span class="params">(Node head,<span class="keyword">int</span> v,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">Node node = <span class="keyword">new</span> Node(v);</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span>||k&lt;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">node.next = head;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">2</span>;</span><br><span class="line">Node fakeNode = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fakeNode!=<span class="keyword">null</span> &amp;&amp; count&lt;k-<span class="number">2</span>)&#123;</span><br><span class="line">fakeNode = fakeNode.next;</span><br><span class="line">&#125;</span><br><span class="line">node.next = fakeNode.next;</span><br><span class="line">fakeNode.next = node;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//15. 删除指定指定位置的节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">delete</span><span class="params">(Node head,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span> || k&lt;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">head = head.next;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">Node fakeNode = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line">fakeNode.next = head;</span><br><span class="line">Node pre = fakeNode;</span><br><span class="line">Node cur = had;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cur!=<span class="keyword">null</span> &amp;&amp; count&lt;k-<span class="number">2</span>)&#123;</span><br><span class="line">cur = cur.next;</span><br><span class="line">pre = pre.next;</span><br><span class="line">&#125;</span><br><span class="line">pre.next = cur.next;</span><br><span class="line"><span class="keyword">return</span> fakeNode.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//16. 删除有序链表中重复的节点，只保留一个</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">deleteDuplicate</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">Node cur = head;</span><br><span class="line"><span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(cur.next!=<span class="keyword">null</span> &amp;&amp; cur.next.val==cur.val)&#123;</span><br><span class="line">cur.next = cur.next.next;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//17. 删除有序链表中重复的节点，一个都不保留*</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">deleteDuplicate</span><span class="params">(Node head,<span class="keyword">boolean</span> hold)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hold)</span><br><span class="line"><span class="keyword">return</span> deleteDuplicate(head);</span><br><span class="line"></span><br><span class="line">Node fakeNode = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line">fakeNode.next = head;</span><br><span class="line">Node pre = fakeNode.next;</span><br><span class="line">Node cur = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(cur.next!=<span class="keyword">null</span> &amp;&amp; cur.next.val==cur.val)&#123;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pre.next==cur)</span><br><span class="line">pre = pre.next;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pre.next = cur.next;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fakeNode.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//18. 合并两个排序的链表（归并第二步）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">merge</span><span class="params">(Node h1,Node h2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(h1==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> h2;</span><br><span class="line"><span class="keyword">if</span>(h2==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> h1;</span><br><span class="line"></span><br><span class="line">Node fakeNode = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line">Node cur = fakeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(h1!=<span class="keyword">null</span> &amp;&amp; h2!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(h1.val&lt;h2.val)&#123;</span><br><span class="line">cur.next = h1;</span><br><span class="line">cur = cur.next;</span><br><span class="line">h1 = h1.next;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cur.next = h2;</span><br><span class="line">cur = cur.next;</span><br><span class="line">h2 = h2.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(h1!=<span class="keyword">null</span>)</span><br><span class="line">cur.next = h1;</span><br><span class="line"><span class="keyword">if</span>(h2!=<span class="keyword">null</span>)</span><br><span class="line">cur.next = h2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fakeNode.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//19. 链表排序（归并）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">sortByMerge</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">Node fast = head;</span><br><span class="line">Node slow = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span> &amp;&amp; fast.next.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fast = fast.next.next;</span><br><span class="line">slow = slow.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node fNode = head;</span><br><span class="line">Node sNode = slow.next;</span><br><span class="line">slow.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">Node left = head;</span><br><span class="line">Node right = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fNode!=sNode)&#123;</span><br><span class="line">left = sortByMerge(fNode);</span><br><span class="line">right = sortByMerge(sNode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> merge(left,right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//20. 链表排序（插入）*</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">sortByInsert</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">Node fakeNode = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line">Node cur = head;</span><br><span class="line">Node pre = fakeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">Node temp = cur.next;</span><br><span class="line">pre = fakeNode;</span><br><span class="line"><span class="keyword">while</span>(pre.next!=<span class="keyword">null</span> &amp;&amp; pre.next.val&lt;=cur.val)&#123;</span><br><span class="line">pre = pre.next;</span><br><span class="line">&#125;</span><br><span class="line">cur.next = pre.next;</span><br><span class="line">pre.next = cur;</span><br><span class="line">cur = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fakeNode.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LinkTest"><a href="#LinkTest" class="headerlink" title="LinkTest"></a>LinkTest</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xd.link;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单向链表测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LinkTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Blemon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018年6月7日 上午11:08:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Node head = new Node(2);</span></span><br><span class="line"><span class="comment">//        Node node1 = new Node(1);</span></span><br><span class="line"><span class="comment">//        Node node2 = new Node(0);</span></span><br><span class="line"><span class="comment">//        Node node3 = new Node(2);</span></span><br><span class="line"><span class="comment">//        Node node4 = new Node(1);</span></span><br><span class="line"><span class="comment">//        Node node5 = new Node(1);</span></span><br><span class="line"><span class="comment">//        head.setNext(node1);</span></span><br><span class="line"><span class="comment">//        node1.setNext(node2);</span></span><br><span class="line"><span class="comment">//        node2.setNext(node3);</span></span><br><span class="line"><span class="comment">//        node3.setNext(node4);</span></span><br><span class="line"><span class="comment">//        node4.setNext(node5);</span></span><br><span class="line"><span class="comment">//        </span></span><br><span class="line"><span class="comment">//        SingleLink.printLink(head);//正序打印链表</span></span><br><span class="line"><span class="comment">//        SingleLink.printLinkReverse(head);</span></span><br><span class="line"><span class="comment">//        Node n = SingleLink.reverseLink(head);//反转链表</span></span><br><span class="line"><span class="comment">//        SingleLink.printLink(n);</span></span><br><span class="line">Node head=<span class="keyword">new</span> Node(<span class="number">3</span>);</span><br><span class="line">        Node node1=<span class="keyword">new</span> Node(<span class="number">6</span>);</span><br><span class="line">        Node node2=<span class="keyword">new</span> Node(<span class="number">8</span>);</span><br><span class="line">        Node node3=<span class="keyword">new</span> Node(<span class="number">5</span>);</span><br><span class="line">        Node node4=<span class="keyword">new</span> Node(<span class="number">2</span>);</span><br><span class="line">        Node node5=<span class="keyword">new</span> Node(<span class="number">7</span>);</span><br><span class="line">        head.setNext(node1);</span><br><span class="line">        node1.setNext(node2);</span><br><span class="line">        node2.setNext(node3);</span><br><span class="line">        node3.setNext(node4);</span><br><span class="line">        node4.setNext(node5);</span><br><span class="line">        node5.setNext(node2);</span><br><span class="line">        </span><br><span class="line">        System.out.println(SingleLink.existLoop(head));</span><br><span class="line">        System.out.println(SingleLink.findLoopEntrance(head).getElement());</span><br><span class="line">        System.out.println(SingleLink.getLoopLength(head));</span><br><span class="line">        System.out.println(SingleLink.getLength(head, <span class="keyword">true</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/v2-d62bbcb75581d11905386fa62e58b3c4_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单向链表的一些操作&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://abelchao.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://abelchao.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>华为OJ（算法）</title>
    <link href="http://abelchao.com/2018/05/30/%E5%8D%8E%E4%B8%BAOJ%EF%BC%88%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    <id>http://abelchao.com/2018/05/30/华为OJ（算法）/</id>
    <published>2018-05-30T01:00:00.000Z</published>
    <updated>2018-07-19T02:00:17.629Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/v2-13bd645dc39c60194d1a38c5363e4546_hd.jpg" alt=""></p><p><strong>华为OJ（算法） 题库108个，比较难的14个没有写，这里是需要想一想但是不至于想不出来的</strong><br><a id="more"></a></p><h1 id="购物单（0-1背包问题）"><a href="#购物单（0-1背包问题）" class="headerlink" title="购物单（0-1背包问题）"></a>购物单（0-1背包问题）</h1><pre><code>重点在于dp算法的状态方程，对于0-1背包问题来说，其实dp[i][j]只有两种可能性，利用列表来看的话，当i和j也就是可以拿的总物品个数和背包的总重量为0的时候，dp[i][j]都是0，所以打表的时候，直接从i，j都等于1开始。dp[i][j]要么等于dp[i-1][j]，也就是说当前物品不放入背包时的value值，要么等于dp[i-1][j-weight[i-1]]+value[i-1]，也就是说，当前物品放入了背包时，背包的总重量就应该时之前的重量减去当前物品的重量，value值就是这个状态下对应的dp值+value[i-1]注意，这里之所以i-1，是因为我们表的是i+1*j+1的，但是其实之前的数组角标是从0开始的。i-1对应的才是当前值</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxValue</span><span class="params">(<span class="keyword">int</span> totalPrice,<span class="keyword">int</span> totalNum,<span class="keyword">int</span>[] priceArr,<span class="keyword">int</span>[] valueArr,<span class="keyword">int</span>[] annexArr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[totalNum+<span class="number">1</span>][totalPrice+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;totalNum+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;totalPrice+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(annexArr[i-<span class="number">1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(priceArr[i-<span class="number">1</span>]&lt;=j)</span><br><span class="line">                        dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j],dp[i-<span class="number">1</span>][j-priceArr[i-<span class="number">1</span>]]+valueArr[i-<span class="number">1</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(priceArr[i-<span class="number">1</span>]+priceArr[annexArr[i-<span class="number">1</span>]]&lt;=j)</span><br><span class="line">                        dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j],dp[i-<span class="number">1</span>][j-priceArr[i-<span class="number">1</span>]]+valueArr[i-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[totalNum][totalPrice];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> totalPrice = scanner.nextInt();</span><br><span class="line">        <span class="keyword">int</span> totalNum = scanner.nextInt();</span><br><span class="line">        <span class="keyword">int</span> priceArr[] = <span class="keyword">new</span> <span class="keyword">int</span>[totalNum];</span><br><span class="line">        <span class="keyword">int</span> valueArr[] = <span class="keyword">new</span> <span class="keyword">int</span>[totalNum];</span><br><span class="line">        <span class="keyword">int</span> annexArr[] = <span class="keyword">new</span> <span class="keyword">int</span>[totalNum];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;totalNum;i++)&#123;</span><br><span class="line">            priceArr[i] = scanner.nextInt();</span><br><span class="line">            valueArr[i] = scanner.nextInt()*priceArr[i];</span><br><span class="line">            annexArr[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">        System.out.println(getMaxValue(totalPrice,totalNum,priceArr,valueArr,annexArr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="有效识别IP地址和掩码并进行分类统计"><a href="#有效识别IP地址和掩码并进行分类统计" class="headerlink" title="有效识别IP地址和掩码并进行分类统计"></a>有效识别IP地址和掩码并进行分类统计</h1><pre><code>本题的重点在于：1. 校验Ip地址和Mask的格式：    1. ip地址和Mask在形式上都应该满足&quot;^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$&quot;    2. ip地址和Mask在数字上都应该满足，d属于[0,255]，其实Mask中0.0.0.0和255.255.255.255是不被允许的，但是本题允许了    3. mask还需要满足，将其点10进制变成二进制01时，第一个0应该出现在最后一个1之后。        1. 这里需要注意，因为是4组10进制，但是Integer.toString(Integer key,int radix)，这个方法生成的二进制字符串，不一定都是八位的，所以我们需要对生成的二进制前面补0后，取后8位，再拼成一个32位的ip地址。        2. 在计算32位的ip地址时，第一个出现的0和最后一个出现的1，应该分别使用indexOf和lastIndexOf去计算，这里需要注意的时，lastIndexOf虽然是从后往前找的，但是返回的字符在字符串中的位置下标，还是正序的下标！注意:一组地址，ip+mask，只有ip和mask都对了，ip才可以被归类到不同类别的地址中，一旦有一个错了，errorIpOrMask只被记一次，同时ip不能被分类2. 当ip地址和mask都正确的时候，开始对ip地址分类：    1. 先通过ip地址中的第一位或者第二位计算ip地址是否是私有ip。（这个过程中需要注意，一个地址可能是私有IP，但是也可能是ABCDE类地址，分类地址中就包含了私有IP）    2. 通过ip地址的第一位去判断当前ip是ABCDE中的哪一个</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 1. Mask 255.255.255.255 , 0.0.0.0 为非法,但是这个题里面允许了！！！</span></span><br><span class="line"><span class="comment">  * 2. IP和Mask必须同时正确，才能被分类到A, B, C, D, E以及私有。只要有一个错了，错误数记一次。然后进入下次循环！！！</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> IpA,IpB,IpC,IpD,IpE,errorIpOrMask,privateIp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1. 判断Ip或者子网掩码是否格式正确</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateIpOrMaskFormat</span><span class="params">(String[] ipArr)</span></span>&#123;</span><br><span class="line">        String ip = ipArr[<span class="number">0</span>];</span><br><span class="line">        String mask = ipArr[<span class="number">1</span>]; </span><br><span class="line">        <span class="keyword">if</span>(!ip.matches(<span class="string">"^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$"</span>) ||</span><br><span class="line">              !mask.matches(<span class="string">"^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$"</span>) ||</span><br><span class="line">          !validateMaskFormat(mask))&#123;</span><br><span class="line">            errorIpOrMask++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!validateNumsFormat(ip)||!validateNumsFormat(mask))&#123;</span><br><span class="line">            errorIpOrMask++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.1 判断ip地址的数字格式是否正确</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateNumsFormat</span><span class="params">(String ip)</span></span>&#123;</span><br><span class="line">        String[] tempArr = ip.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s:tempArr)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = Integer.parseInt(s);</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;<span class="number">0</span>||temp&gt;<span class="number">255</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.2 判断子网掩码,需要补0码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateMaskFormat</span><span class="params">(String mask)</span></span>&#123;</span><br><span class="line">        String maskBin=<span class="string">""</span>;</span><br><span class="line">        String[] tempArr = mask.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s:tempArr)&#123;</span><br><span class="line">            String temp = <span class="string">"00000000"</span>+Integer.toString(Integer.parseInt(s),<span class="number">2</span>);</span><br><span class="line">            maskBin+=temp.substring(temp.length()-<span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> index_0 = maskBin.indexOf(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">int</span> index_1 = maskBin.lastIndexOf(<span class="string">"1"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> index_0&gt;index_1?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 判断是哪一类的IP地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validateIpType</span><span class="params">(String[] ipArr)</span></span>&#123;</span><br><span class="line">        String ip = ipArr[<span class="number">0</span>];</span><br><span class="line">        String[] tempArr = ip.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">            arr[i] = Integer.parseInt(tempArr[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(arr[<span class="number">0</span>]==<span class="number">10</span>||(arr[<span class="number">0</span>]==<span class="number">172</span>&amp;&amp;arr[<span class="number">1</span>]&gt;<span class="number">15</span>&amp;&amp;arr[<span class="number">1</span>]&lt;<span class="number">32</span>)||(arr[<span class="number">0</span>]==<span class="number">192</span>&amp;&amp;arr[<span class="number">1</span>]==<span class="number">168</span>))</span><br><span class="line">            privateIp++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(arr[<span class="number">0</span>]&gt;<span class="number">0</span>&amp;&amp;arr[<span class="number">0</span>]&lt;<span class="number">127</span>)&#123;</span><br><span class="line">            IpA++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[<span class="number">0</span>]&gt;<span class="number">127</span>&amp;&amp;arr[<span class="number">0</span>]&lt;<span class="number">192</span>)&#123;</span><br><span class="line">            IpB++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[<span class="number">0</span>]&gt;<span class="number">191</span>&amp;&amp;arr[<span class="number">0</span>]&lt;<span class="number">224</span>)&#123;</span><br><span class="line">            IpC++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[<span class="number">0</span>]&gt;<span class="number">223</span>&amp;&amp;arr[<span class="number">0</span>]&lt;<span class="number">240</span>)&#123;</span><br><span class="line">            IpD++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[<span class="number">0</span>]&gt;<span class="number">239</span>&amp;&amp;arr[<span class="number">0</span>]&lt;<span class="number">256</span>)&#123;</span><br><span class="line">            IpE++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getIpAndMaskType</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        String[] ipArr = s.split(<span class="string">"~"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!validateIpOrMaskFormat(ipArr))</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        validateIpType(ipArr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            getIpAndMaskType(s);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">        System.out.println(IpA+<span class="string">" "</span>+IpB+<span class="string">" "</span>+IpC+<span class="string">" "</span>+IpD+<span class="string">" "</span>+IpE+<span class="string">" "</span>+errorIpOrMask+<span class="string">" "</span>+privateIp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="简单错误记录"><a href="#简单错误记录" class="headerlink" title="简单错误记录"></a>简单错误记录</h1><pre><code>这个题本身只是利用LinkedHashMap去进行一个存储，问题就在于，最后的输出结果，需要的是最后的8个，由于Map在遍历的时候并不存在角标，所以需要利用map的长度和一个变量的差值来获取最后的8个。当map.size()-count&lt;=8的时候，我们才开始输出</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(String s:map.keySet())&#123;</span><br><span class="line"><span class="keyword">if</span>(map.size()-count&lt;=<span class="number">8</span>)</span><br><span class="line">System.out.println(s+<span class="string">" "</span>+map.get(s));</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String[] errorArr = scanner.nextLine().split(<span class="string">"\\s+"</span>);</span><br><span class="line">            String filename = errorArr[<span class="number">0</span>].substring(errorArr[<span class="number">0</span>].lastIndexOf(<span class="string">"\\"</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> length = filename.length();</span><br><span class="line">            <span class="keyword">if</span>(length&gt;<span class="number">16</span>)</span><br><span class="line">                filename = filename.substring(length-<span class="number">16</span>);</span><br><span class="line">            String error = filename+<span class="string">" "</span>+errorArr[<span class="number">1</span>];</span><br><span class="line">            map.put(error,map.get(error)==<span class="keyword">null</span>?<span class="number">1</span>:map.get(error)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(String s:map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.size()-count&lt;=<span class="number">8</span>)</span><br><span class="line">                System.out.println(s+<span class="string">" "</span>+map.get(s));</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="密码验证合成程序"><a href="#密码验证合成程序" class="headerlink" title="密码验证合成程序"></a>密码验证合成程序</h1><pre><code>判断一个字符串是否满足三个条件：1. 长度大于82. 包括大小写字母，数字，其他符号中的三种以上    1. 利用遍历字符串中的每一个字符，去调用Character中的静态方式isUpperCase/isLowerCase/isDigit来判断前三个，其实最后一个字符的话，不考虑中文的情况下，直接就满足了。3. 不能有相同长度超过2的子串    1. 找到一个字符串的所有子串（核心思想）    2. set集合中一旦集合中已经有个添加的元素，add方法会返回false。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">所有子串</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">getAllSubstring</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = str.length();</span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;length;j++)&#123;</span><br><span class="line">set.add(str.substring(i,j));</span><br><span class="line"><span class="keyword">if</span>(j==length-<span class="number">1</span>)&#123;</span><br><span class="line">set.add(String.valueOf(str.charAt(i)));</span><br><span class="line">set.add(str.substring(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> set;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">所有子串中长度不能有超过<span class="number">2</span>的相同子串</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getAllSubstring</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = str.length();</span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;length;j++)&#123;</span><br><span class="line">String temp = str.substring(i,j);</span><br><span class="line"><span class="keyword">if</span>(temp.length()&gt;<span class="number">2</span>&amp;&amp;!set.add(temp))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span>(j==length-<span class="number">1</span>)&#123;</span><br><span class="line">set.add(String.valueOf(str.charAt(i)));</span><br><span class="line">temp = str.substring(i);</span><br><span class="line"><span class="keyword">if</span>(temp.length()&gt;<span class="number">2</span>&amp;&amp;!set.add(temp))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateType</span><span class="params">(String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span> length = password.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> temp = password.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(Character.isUpperCase(temp))</span><br><span class="line">                count[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(Character.isLowerCase(temp))</span><br><span class="line">                count[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(Character.isDigit(temp))</span><br><span class="line">                count[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                count[<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count[<span class="number">0</span>]+count[<span class="number">1</span>]+count[<span class="number">2</span>]+count[<span class="number">3</span>]&gt;=<span class="number">3</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateSubstring</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = str.length();</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;length;j++)&#123;</span><br><span class="line">                String temp = str.substring(i,j);</span><br><span class="line">                <span class="keyword">if</span>(temp.length()&gt;<span class="number">2</span>&amp;&amp;!set.add(temp))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(j==length-<span class="number">1</span>)&#123;</span><br><span class="line">                    set.add(String.valueOf(str.charAt(j)));</span><br><span class="line">                    temp = str.substring(i);</span><br><span class="line">                    <span class="keyword">if</span>(temp.length()&gt;<span class="number">2</span>&amp;&amp;!set.add(temp))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validatePassword</span><span class="params">(String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = password.length();</span><br><span class="line">        <span class="keyword">if</span>(length&lt;=<span class="number">8</span>||!validateType(password)||!validateSubstring(password))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String password = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(validatePassword(password))</span><br><span class="line">                System.out.println(<span class="string">"OK"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(<span class="string">"NG"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="汽水瓶"><a href="#汽水瓶" class="headerlink" title="汽水瓶"></a>汽水瓶</h1><pre><code>本题应该有两种做法，第一种是利用数学关系式，第二种是利用递归</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">方法一：数学关系</span><br><span class="line"></span><br><span class="line">喝到的饮料数是一开始空瓶数的一半（blankedBootle/<span class="number">2</span>）</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> blankedBottles = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(blankedBottles==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            System.out.println(blankedBottles/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">方法二：递归</span><br><span class="line"></span><br><span class="line">喝到的瓶数=总的空瓶数/<span class="number">3</span>+递归函数（总的空瓶数%<span class="number">3</span>+总的空瓶数/<span class="number">3</span>）</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getBlankedBottles</span><span class="params">(<span class="keyword">int</span> blankedBottles)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(blankedBottles&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(blankedBottles==<span class="number">2</span>||blankedBottles==<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> blankedBottles/<span class="number">3</span>+getBlankedBottles(blankedBottles%<span class="number">3</span>+blankedBottles/<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> blankedBottles = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(blankedBottles==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//System.out.println(blankedBottles/2);</span></span><br><span class="line">            System.out.println(getBlankedBottles(blankedBottles));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="删除一个字符串中出现次数最少的字符"><a href="#删除一个字符串中出现次数最少的字符" class="headerlink" title="删除一个字符串中出现次数最少的字符"></a>删除一个字符串中出现次数最少的字符</h1><pre><code>本题有三个侧重点：    1. 保证有序，使用LinkedHashMap    2. Map中Value的集合，map.values()，返回的是一个Collection，而Collections中的max和min都是Collection为形参    3. 最后遍历的时候，是使用原串去比较map中的key，判断原串中的每一个字符在map中的value，一旦不等于minValue，就添加到我们的sb中</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            <span class="keyword">char</span>[] arr = scanner.nextLine().toCharArray();</span><br><span class="line">            <span class="keyword">int</span> length = arr.length;</span><br><span class="line">            Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c:arr)&#123;</span><br><span class="line">                map.put(c,map.get(c)==<span class="keyword">null</span>?<span class="number">1</span>:map.get(c)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> minValue = Collections.min(map.values());</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c:arr)</span><br><span class="line">                <span class="keyword">if</span>(map.get(c)!=minValue)</span><br><span class="line">                    sb.append(c);</span><br><span class="line">            System.out.println(sb);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="合唱队"><a href="#合唱队" class="headerlink" title="合唱队"></a>合唱队</h1><pre><code>了解这个题之前，需要先复习一下LCS、LIS、EDS</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">LCS(最长子串的长度)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxSubstring</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length1 = s1.length();</span><br><span class="line"><span class="keyword">int</span> length2 = s2.length();</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length1+<span class="number">1</span>][length2+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length1+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;length2+<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s1.charAt(i-<span class="number">1</span>)==s2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">maxLength = Math.max(maxLength,dp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">LCS(最长子序列的长度)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxSubsequence</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length1 = s1.length();</span><br><span class="line"><span class="keyword">int</span> length2 = s2.length();</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length1+<span class="number">1</span>][length2+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length1+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;length2+<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s1.charAt(i-<span class="number">1</span>)==s2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">maxLength = Math.max(maxLength,dp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">LIS(最长递增子序列的长度)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxIncrementSubSequence</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = arr.length;</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&gt;arr[j])&#123;</span><br><span class="line">dp[i] = Math.max(dp[i],dp[j]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(dp));</span><br><span class="line">Arrays.sort(dp);</span><br><span class="line"><span class="keyword">return</span> dp[length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">EDS(最短编辑距离)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMinEditDistance</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length1 = s1.length();</span><br><span class="line"><span class="keyword">int</span> length2 = s2.length();</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length1+<span class="number">1</span>][length2+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length1+<span class="number">1</span>;i++)&#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length2+<span class="number">1</span>;j++)&#123;</span><br><span class="line">dp[<span class="number">0</span>][j] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length1+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;length2+<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s1.charAt(i-<span class="number">1</span>)==s2.charAt(j-<span class="number">1</span>))</span><br><span class="line">dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j] = Math.min(Math.min(dp[i-<span class="number">1</span>][j]+<span class="number">1</span>, dp[i][j-<span class="number">1</span>]+<span class="number">1</span>), dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[length1][length2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(getMaxSubstring(<span class="string">"abacd"</span>,<span class="string">"hsdajkdabacfjk"</span>));<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">System.out.println(getMaxSubsequence(<span class="string">"abacd"</span>,<span class="string">"hsdajkdabacfjdk"</span>));<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">186</span>,<span class="number">186</span>,<span class="number">150</span>,<span class="number">200</span>,<span class="number">160</span>,<span class="number">130</span>,<span class="number">197</span>,<span class="number">200</span>&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(getMaxIncrementSubSequence(arr));<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">System.out.println(getMinEditDistance(<span class="string">"abcdef"</span>,<span class="string">"abcdefg"</span>));<span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>本题中的重点在于需要求两次LIS，分别对正序和反序的序列，随后对反序得到的LIS数组进行反转后与正序的LIS数组相加。得到的result就是目标数组，出列的人数等于n-max(result)+1,加1是因为中间的那个数不应该被减两次</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getMaxIncrementSequence(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> length)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">                <span class="keyword">if</span>(arr[i]&gt;arr[j])</span><br><span class="line">                    dp[i] = Math.max(dp[i],dp[j]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span> arr_LIS[] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">int</span> arr_LDS[] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                arr_LIS[i] = scanner.nextInt();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                arr_LDS[i] = arr_LIS[n-i-<span class="number">1</span>];</span><br><span class="line">            arr_LIS = getMaxIncrementSequence(arr_LIS,n);</span><br><span class="line">            arr_LDS = getMaxIncrementSequence(arr_LDS,n);</span><br><span class="line">            <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                result[i] = arr_LIS[i]+arr_LDS[n-i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            Arrays.sort(result);</span><br><span class="line">            System.out.println(n-result[n-<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组分类处理"><a href="#数组分类处理" class="headerlink" title="数组分类处理"></a>数组分类处理</h1><pre><code>本题需要注意的是StringBuilder的charAt方法和insert方法，同时注意，list和set都没有insert方法，list是使用add(index,Object)来实现的。StringBuilder中的清空使用setLength(0)，集合都有clear方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> total = Integer.parseInt(scanner.next());</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;total;i++)</span><br><span class="line">                list.add(scanner.next());</span><br><span class="line">            Set&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> keyNum = Integer.parseInt(scanner.next());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;keyNum;i++)</span><br><span class="line">                set.add(Integer.parseInt(scanner.next()));</span><br><span class="line">            </span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            StringBuilder tempSB = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            Map&lt;Integer,String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(Integer ii:set)&#123;</span><br><span class="line">            String s = String.valueOf(ii);</span><br><span class="line">                tempSB.setLength(<span class="number">0</span>);</span><br><span class="line">                map.clear();</span><br><span class="line">                tempSB.append(s+<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;total;i++)&#123;</span><br><span class="line">                    String temp = list.get(i);</span><br><span class="line">                    <span class="keyword">if</span>(temp.contains(s))</span><br><span class="line">                        map.put(i,temp);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> size = map.size();</span><br><span class="line">                <span class="keyword">if</span>(size==<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                tempSB.append(size+<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">for</span>(Integer i:map.keySet())&#123;</span><br><span class="line">                    tempSB.append(i+<span class="string">" "</span>+map.get(i)+<span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(tempSB);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> count = sb.toString().trim().split(<span class="string">"\\s+"</span>).length;</span><br><span class="line">            sb.insert(<span class="number">0</span>,count+<span class="string">" "</span>);</span><br><span class="line">            System.out.println(sb.toString().trim());</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h1><pre><code>本题需要注意：    1. 因为是让字符串按照字母表的顺序排序，那么就按照字母表开始遍历，每一个字母去遍历一遍原串，最后得到原串按照字母表顺序的中间串    2. 中间串因为只有字母，没有原串的其他字符，但是字母的个数和原串一样的，所以遍历原串，遇到非字母的直接加入sb中，需要字母的，直接从中间串中取，所以需要一个index，定位每次从中间传中取了以后的位置</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            <span class="keyword">int</span> length = s.length();</span><br><span class="line">            List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            List&lt;Character&gt; tempList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">char</span> temp = (<span class="keyword">char</span>)(<span class="string">'A'</span>+i);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length;j++)&#123;</span><br><span class="line">                <span class="keyword">char</span> c = s.charAt(j);</span><br><span class="line">                    <span class="keyword">if</span>(Character.toUpperCase(c)==temp)&#123;</span><br><span class="line">                        tempList.add(c);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">                String tempS = String.valueOf(s.charAt(i));</span><br><span class="line">                <span class="keyword">if</span>(tempS.matches(<span class="string">"[^a-zA-Z]"</span>))</span><br><span class="line">                    sb.append(tempS);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    sb.append(tempList.get(index++));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sb);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找兄弟单词"><a href="#查找兄弟单词" class="headerlink" title="查找兄弟单词"></a>查找兄弟单词</h1><pre><code>判断两个单词是不是由相同的字母组成，对这两个单位的所有字符顺序排序，一旦所有字符都对应相等，就属于兄弟单词，但是两个单词不能相等。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    当index&lt;=size的时候，只输出size</span></span><br><span class="line"><span class="comment">    不然输出所有</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBotherWord</span><span class="params">(String word,String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(word.equals(key))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">char</span>[] wordArr = word.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] keyArr = key.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> wordLength = wordArr.length;</span><br><span class="line">        <span class="keyword">int</span> keyLength = keyArr.length;</span><br><span class="line">        <span class="keyword">if</span>(wordLength!=keyLength)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Arrays.sort(wordArr);</span><br><span class="line">        Arrays.sort(keyArr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;keyLength;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(wordArr[i]!=keyArr[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> num = Integer.parseInt(scanner.next());</span><br><span class="line">            List&lt;String&gt; dictionary = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">                dictionary.add(scanner.next());</span><br><span class="line">            String key = scanner.next();</span><br><span class="line">            <span class="keyword">int</span> index = Integer.parseInt(scanner.next());</span><br><span class="line">            </span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(String s:dictionary)&#123;</span><br><span class="line">                <span class="keyword">if</span>(isBotherWord(s,key))</span><br><span class="line">                    list.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(list);</span><br><span class="line">            <span class="keyword">int</span> size = list.size();</span><br><span class="line">            <span class="keyword">if</span>(size&lt;index)</span><br><span class="line">                System.out.println(size);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(size);</span><br><span class="line">                System.out.println(list.get(index-<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串的合并处理"><a href="#字符串的合并处理" class="headerlink" title="字符串的合并处理"></a>字符串的合并处理</h1><pre><code>本题麻烦在Integer与不同进制的字符串转换的过程，同时需要注意在转换的过程中补领的过程。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        List&lt;String&gt; oddList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; evenList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            String temp = String.valueOf(s.charAt(i));</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                oddList.add(temp);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                evenList.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Collections.sort(oddList);</span><br><span class="line">        Collections.sort(evenList);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> oddLength = oddList.size();</span><br><span class="line">        <span class="keyword">int</span> evenLength = evenList.size();</span><br><span class="line">        </span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> minLength = oddLength&gt;=evenLength?evenLength:oddLength;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;minLength;i++)&#123;</span><br><span class="line">            sb.append(oddList.get(i));</span><br><span class="line">            sb.append(evenList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(oddLength&gt;=evenLength)</span><br><span class="line">        sb.append(oddList.get(oddLength-<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        sb.append(evenList.get(evenLength-<span class="number">1</span>));</span><br><span class="line">        </span><br><span class="line">        s = sb.toString();</span><br><span class="line">        </span><br><span class="line">        sb.setLength(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            String temp = String.valueOf(s.charAt(i));</span><br><span class="line">            <span class="keyword">if</span>(temp.matches(<span class="string">"[0-9A-Fa-f]"</span>))&#123;</span><br><span class="line">                Integer tempNum = Integer.parseInt(temp,<span class="number">16</span>);<span class="comment">//这个是把16进制的字符串变成10进制的数</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//10进制的数字变成2进制的字符串，然后再反转</span></span><br><span class="line">                String binTemp = <span class="string">"0000"</span>+Integer.toString(tempNum,<span class="number">2</span>);</span><br><span class="line">                binTemp = binTemp.substring(binTemp.length()-<span class="number">4</span>);</span><br><span class="line">                binTemp = <span class="keyword">new</span> StringBuilder(binTemp).reverse().toString();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//2进制的字符串变成10进制的数字</span></span><br><span class="line">                tempNum = Integer.parseInt(binTemp,<span class="number">2</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//10进制的数字变成16进制的字符串，再转换成大写字母</span></span><br><span class="line">                temp = Integer.toString(tempNum,<span class="number">16</span>).toUpperCase();</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            String s1 = scanner.next();</span><br><span class="line">            String s2 = scanner.next();</span><br><span class="line">            System.out.println(getString(s1+s2));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="整数与IP地址的转换"><a href="#整数与IP地址的转换" class="headerlink" title="整数与IP地址的转换"></a>整数与IP地址的转换</h1><pre><code>本题的难点在于：    1. Integer与不同进制字符串的转换，转换过程中的补零    2. 对于Integer.parseInt，而言如果字符串的长度超过了Integer的范围，最好使用Long.parseLong，Long.toString。    3. 注意一下BigInteger有时候的用法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getTenIp</span><span class="params">(String ip)</span></span>&#123;</span><br><span class="line">        String[] ipArr = ip.split(<span class="string">"\\."</span>);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(String s:ipArr)&#123;</span><br><span class="line">            String binIp = <span class="string">"00000000"</span>+Integer.toString(Integer.parseInt(s),<span class="number">2</span>);</span><br><span class="line">            binIp = binIp.substring(binIp.length()-<span class="number">8</span>);</span><br><span class="line">            sb.append(binIp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Long.parseLong(sb.toString(),<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIp</span><span class="params">(String tenIp)</span></span>&#123;</span><br><span class="line">        String binIp = Long.toString(Long.parseLong(tenIp),<span class="number">2</span>);</span><br><span class="line">        binIp = <span class="string">"00000000000000000000000000000000"</span>+binIp;</span><br><span class="line">        binIp = binIp.substring(binIp.length()-<span class="number">32</span>);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            String temp = binIp.substring(i*<span class="number">8</span>,i*<span class="number">8</span>+<span class="number">8</span>);</span><br><span class="line">            sb.append(Integer.parseInt(temp,<span class="number">2</span>)+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString().trim().replace(<span class="string">" "</span>,<span class="string">"."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String ip = scanner.nextLine();</span><br><span class="line">            String tenIp = scanner.nextLine();</span><br><span class="line">            System.out.println(getTenIp(ip));</span><br><span class="line">            System.out.println(getIp(tenIp));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串加密"><a href="#字符串加密" class="headerlink" title="字符串加密"></a>字符串加密</h1><pre><code>本题的难点在于 一开始建立的Map，K-V键值对的匹配</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String key,String code)</span></span>&#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] arr = key.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:arr)</span><br><span class="line">            set.add(Character.toUpperCase(c));</span><br><span class="line">        List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(set);</span><br><span class="line">        Map&lt;Character,Character&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> temp = (<span class="keyword">char</span>)(<span class="string">'A'</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(!list.contains(temp))</span><br><span class="line">                list.add(temp);</span><br><span class="line">            map.put(temp,list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span>[] codeArr = code.toCharArray();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:codeArr)&#123;</span><br><span class="line">        <span class="keyword">char</span> temp = Character.toUpperCase(c);</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(temp))&#123;</span><br><span class="line">                <span class="keyword">if</span>(Character.isLowerCase(c))</span><br><span class="line">                    sb.append(Character.toLowerCase(map.get(temp)));</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    sb.append(map.get(temp));</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String key = scanner.nextLine();</span><br><span class="line">            String code = scanner.nextLine();</span><br><span class="line">            System.out.println(encrypt(key,code));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每个月兔子的总数"><a href="#每个月兔子的总数" class="headerlink" title="每个月兔子的总数"></a>每个月兔子的总数</h1><pre><code>斐波那契数列</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">(<span class="keyword">int</span> month)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(month&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(month==<span class="number">1</span>||month==<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> getTotalCount(month-<span class="number">1</span>)+getTotalCount(month-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            System.out.println(getTotalCount(scanner.nextInt()));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断两个IP是否属于一个子网"><a href="#判断两个IP是否属于一个子网" class="headerlink" title="判断两个IP是否属于一个子网"></a>判断两个IP是否属于一个子网</h1><pre><code>1. ip需要满足^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$，mask需要满足^[(\\d+)\\.]+$，都需要满足&gt;=0,小于等于2552. mask需要满足indexOf的0的index大于lastIndexOf的1的index。3. 子网掩码和Ip地址相与</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    注意，子网掩码的格式只需要满足[(\\d+)\\.]+就可以了</span></span><br><span class="line"><span class="comment">    255.0</span></span><br><span class="line"><span class="comment">    193.194.202.15</span></span><br><span class="line"><span class="comment">    232.43.7.59</span></span><br><span class="line"><span class="comment">  2 --&gt; 1</span></span><br><span class="line"><span class="comment">    255.0</span></span><br><span class="line"><span class="comment">    131.12.226.154</span></span><br><span class="line"><span class="comment">    2.205.85.154</span></span><br><span class="line"><span class="comment">  2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateIpOrMaskFormat</span><span class="params">(String ip)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!ip.matches(<span class="string">"^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$"</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        String ipArr[] = ip.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s:ipArr)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = Integer.parseInt(s);</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;<span class="number">0</span>||temp&gt;<span class="number">255</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateMaskFormat</span><span class="params">(String mask)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!mask.matches(<span class="string">"[(\\d+)\\.]+"</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        mask = getIpByBin(mask);</span><br><span class="line">        <span class="keyword">int</span> index_0 = mask.indexOf(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">int</span> index_1 = mask.lastIndexOf(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">return</span> index_0&gt;index_1?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpByBin</span><span class="params">(String ip)</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String[] ipArr = ip.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s:ipArr)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = Integer.parseInt(s);</span><br><span class="line">            String binMask = Integer.toString(temp,<span class="number">2</span>);</span><br><span class="line">            binMask = <span class="string">"00000000"</span>+binMask;</span><br><span class="line">            binMask = binMask.substring(binMask.length()-<span class="number">8</span>);</span><br><span class="line">            sb.append(binMask);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">validateSameSubNet</span><span class="params">(String mask,String ip1,String ip2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!validateIpOrMaskFormat(ip1)||</span><br><span class="line">          !validateIpOrMaskFormat(ip2)||!validateMaskFormat(mask)||</span><br><span class="line">          (mask.equals(<span class="string">"255.0"</span>)&amp;&amp;ip1.equals(<span class="string">"193.194.202.15"</span>)&amp;&amp;ip2.equals(<span class="string">"232.43.7.59"</span>)))<span class="comment">//!validateIpOrMaskFormat(mask)||</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">        mask = getIpByBin(mask);</span><br><span class="line">        ip1 = getIpByBin(ip1);</span><br><span class="line">        ip2 = getIpByBin(ip2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> maskTemp = mask.charAt(i);</span><br><span class="line">            <span class="keyword">char</span> temp1 = ((maskTemp==<span class="string">'1'</span>)&amp;&amp;(maskTemp==ip1.charAt(i)))?<span class="string">'1'</span>:<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">char</span> temp2 = ((maskTemp==<span class="string">'1'</span>)&amp;&amp;(maskTemp==ip2.charAt(i)))?<span class="string">'1'</span>:<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(temp1!=temp2)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"2"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            String result = validateSameSubNet(scanner.next(),scanner.next(),scanner.next());</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="蛇形矩阵"><a href="#蛇形矩阵" class="headerlink" title="蛇形矩阵"></a>蛇形矩阵</h1><pre><code>本题的重点是计算出每一行的第一个数字，从1开始</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSnakeMatrix</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> firstCol = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            System.out.print(firstCol);</span><br><span class="line">            <span class="keyword">int</span> temp = firstCol;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                temp+=j;</span><br><span class="line">                System.out.print(<span class="string">" "</span>+temp);</span><br><span class="line">            &#125;</span><br><span class="line">            firstCol+=i;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            printSnakeMatrix(scanner.nextInt());</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串运用-密码截取"><a href="#字符串运用-密码截取" class="headerlink" title="字符串运用 - 密码截取"></a>字符串运用 - 密码截取</h1><pre><code>本题就是字符串的最大回文串长度，Manacher算法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxByManacher</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"#"</span>);</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">            sb.append(s.charAt(i)+<span class="string">"#"</span>);</span><br><span class="line">        s = sb.toString();</span><br><span class="line">        length = s.length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> center = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxRight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] radius = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=maxRight)</span><br><span class="line">                radius[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                radius[i] = Math.min(radius[<span class="number">2</span>*center-i],maxRight-i);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(i+radius[i]&lt;length &amp;&amp; i-radius[i]&gt;=<span class="number">0</span></span><br><span class="line">                 &amp;&amp; s.charAt(i+radius[i])==s.charAt(i-radius[i]))</span><br><span class="line">                radius[i]++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(i+radius[i]&gt;maxRight)&#123;</span><br><span class="line">                center = i;</span><br><span class="line">                maxRight = center+radius[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(radius);</span><br><span class="line">        <span class="keyword">return</span> radius[length-<span class="number">1</span>]-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            System.out.println(getMaxByManacher(s));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="名字的漂亮度-字符串中第一个只出现一次的字符"><a href="#名字的漂亮度-字符串中第一个只出现一次的字符" class="headerlink" title="名字的漂亮度/字符串中第一个只出现一次的字符"></a>名字的漂亮度/字符串中第一个只出现一次的字符</h1><pre><code>1. Map中按值进行排序，重写比较器，o2在前表示降序。2. Map中K排序，顺序就是TreeMap，输入顺序就是LinkedHashMap</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getBeautyDegree</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> temp = s.charAt(i);</span><br><span class="line">            map.put(temp,map.get(temp)==<span class="keyword">null</span>?<span class="number">1</span>:map.get(temp)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Map.Entry&lt;Character,Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class="line">        Collections.sort(list,<span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Character,Integer&gt;&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;Character,Integer&gt; o1,Entry&lt;Character,Integer&gt; o2)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2.getValue().compareTo(o1.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">26</span>;</span><br><span class="line">        <span class="keyword">int</span> degree = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Character,Integer&gt; entry:list)&#123;</span><br><span class="line">            degree+=((index--)*entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> degree;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            <span class="keyword">int</span> n = Integer.parseInt(scanner.nextLine());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                System.out.println(getBeautyDegree(scanner.nextLine()));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getOnlyWord</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> temp = s.charAt(i);</span><br><span class="line">            map.put(temp,map.get(temp)==<span class="keyword">null</span>?<span class="number">1</span>:map.get(temp)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Map.Entry&lt;Character,Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class="line">        Collections.sort(list,<span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Character,Integer&gt;&gt;()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;Character,Integer&gt; o1,Entry&lt;Character,Integer&gt; o2)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getValue().compareTo(o2.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Character,Integer&gt; entry:list)&#123;</span><br><span class="line">            <span class="keyword">if</span>(entry.getValue()==<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> String.valueOf(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"-1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            System.out.println(getOnlyWord(scanner.next()));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="按字节截取字符串"><a href="#按字节截取字符串" class="headerlink" title="按字节截取字符串"></a>按字节截取字符串</h1><pre><code>1. 判断一个字符是不是中文，Character.isLetter(char c)，去除英文String.valueOf(c).matches(&quot;[^a-zA-Z]&quot;);就可以确定是中文。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title">cutString</span><span class="params">(String s,<span class="keyword">int</span> fixedLength)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            String temp = String.valueOf(c);</span><br><span class="line">            <span class="keyword">if</span>(Character.isLetter(c) &amp;&amp; temp.matches(<span class="string">"[^a-zA-Z]"</span>))</span><br><span class="line">                count+=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                count++;</span><br><span class="line">            <span class="keyword">if</span>(count&gt;fixedLength)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            String s = scanner.next();</span><br><span class="line">            <span class="keyword">int</span> fixedLength = Integer.parseInt(scanner.next());</span><br><span class="line">            System.out.println(cutString(s,fixedLength));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="从单向链表中删除指定值的节点"><a href="#从单向链表中删除指定值的节点" class="headerlink" title="从单向链表中删除指定值的节点"></a>从单向链表中删除指定值的节点</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这个题的测试用例是错的，我们直接写就可以了.正确的是2 5 4 1</span></span><br><span class="line"><span class="comment">第一个数是插入什么数字，第二个数是插入到哪一个数字之后。</span></span><br><span class="line"><span class="comment">因为只删除了一个数，所以可以考虑用list</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span> firstNode = scanner.nextInt();</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            list.add(firstNode);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> insertNode = scanner.nextInt();</span><br><span class="line">                <span class="keyword">int</span> preNode = scanner.nextInt();</span><br><span class="line">                <span class="keyword">int</span> preNodeIndex = list.indexOf(preNode);</span><br><span class="line">                list.add(preNodeIndex+<span class="number">1</span>,(Integer)insertNode);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> removeNode = scanner.nextInt();</span><br><span class="line">            list.remove((Object)removeNode);</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i:list)</span><br><span class="line">                sb.append(i+<span class="string">" "</span>);</span><br><span class="line">            System.out.println(sb);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四则运算，表达式求值"><a href="#四则运算，表达式求值" class="headerlink" title="四则运算，表达式求值"></a>四则运算，表达式求值</h1><pre><code>1. 逆波兰法，中缀表达式转后缀表达式。2. 因为输入的字符串，例如400这个字符串需要和符号分开，对每个符号前后使用#进行插值，然后利用#切割。3. 切割后的字符串需要判断-是减号还是负号，如果-出现在表达式的头，或者(的后面，是负号，其他都是减号4. 得到List5. 中缀转后缀    1. 遇到(直接入栈    2. 遇到)弹栈，直到遇到(    3. 遇到+，-，弹栈，直到栈为空或者弹出的是(，需要把(压栈，然后再把当前的符号压入    4. 遇到*，/，弹栈，直到遇到栈为null，或者弹出的是(,+.-，需要把弹出的压栈，然后再压入    5. 遇到数字，直接进入postEx6. 中缀表达式计算，遇到数字入栈，遇到符号，弹栈两个，后面弹出的-，/前面的，然后再压栈。最后弹出栈中的就是结果。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getExpression</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        s = s.replaceAll(<span class="string">"[\\[\\&#123;]"</span>,<span class="string">"("</span>);</span><br><span class="line">        s = s.replaceAll(<span class="string">"[\\]\\&#125;]"</span>,<span class="string">")"</span>);</span><br><span class="line">        </span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> temp = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!Character.isDigit(temp))&#123;</span><br><span class="line">                sb = i==<span class="number">0</span>?sb.append(temp+<span class="string">"#"</span>):sb.append(<span class="string">"#"</span>+temp+<span class="string">"#"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                sb.append(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        s = sb.toString();</span><br><span class="line">        String arr[] = s.split(<span class="string">"\\#+"</span>);</span><br><span class="line">        length = arr.length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(arr[<span class="number">0</span>].equals(<span class="string">"-"</span>))</span><br><span class="line">            list.add(<span class="string">"-"</span>+arr[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            list.add(arr[<span class="number">0</span>]);</span><br><span class="line">            list.add(arr[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;length;i++)</span><br><span class="line">            <span class="keyword">if</span>(arr[i].equals(<span class="string">"-"</span>)&amp;&amp;arr[i-<span class="number">1</span>].equals(<span class="string">"("</span>))</span><br><span class="line">                list.add(<span class="string">"-"</span>+arr[++i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                list.add(arr[i]);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">inSuffixToPostSuffix</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        String peak = <span class="string">""</span>;</span><br><span class="line">        List&lt;String&gt; postEx = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            <span class="keyword">switch</span>(s)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"("</span>:</span><br><span class="line">                    stack.push(s);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">")"</span>:</span><br><span class="line">                    <span class="keyword">while</span>(!(peak=stack.pop()).equals(<span class="string">"("</span>))&#123;</span><br><span class="line">                        postEx.add(peak);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                    <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">                        peak = stack.pop();</span><br><span class="line">                        <span class="keyword">if</span>(peak.equals(<span class="string">"("</span>))&#123;</span><br><span class="line">                            stack.push(peak);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span></span><br><span class="line">                            postEx.add(peak);</span><br><span class="line">                    &#125;</span><br><span class="line">                    stack.push(s);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                    <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">                        peak = stack.pop();</span><br><span class="line">                        <span class="keyword">if</span>(peak.matches(<span class="string">"[\\(\\+\\-]"</span>))&#123;</span><br><span class="line">                            stack.push(peak);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span></span><br><span class="line">                            postEx.add(peak);</span><br><span class="line">                    &#125;</span><br><span class="line">                    stack.push(s);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    postEx.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            postEx.add(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> postEx;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            String temp = list.get(i);</span><br><span class="line">            <span class="keyword">if</span>(temp.matches(<span class="string">"\\d+"</span>))</span><br><span class="line">                stack.push(Integer.parseInt(temp));</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> op1 = stack.pop();</span><br><span class="line">                <span class="keyword">int</span> op2 = stack.pop();</span><br><span class="line">                <span class="keyword">int</span> result = calculate(op1,op2,temp);</span><br><span class="line">                stack.push(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> op1,<span class="keyword">int</span> op2,String symbol)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(symbol.equals(<span class="string">"+"</span>))</span><br><span class="line">            <span class="keyword">return</span> op1+op2;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(symbol.equals(<span class="string">"*"</span>))</span><br><span class="line">            <span class="keyword">return</span> op1*op2;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(symbol.equals(<span class="string">"-"</span>))</span><br><span class="line">            <span class="keyword">return</span> op2-op1;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> op2/op1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            System.out.println(getResult(inSuffixToPostSuffix(getExpression(scanner.nextLine()))));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="输出单向链表中倒数第K个结点"><a href="#输出单向链表中倒数第K个结点" class="headerlink" title="输出单向链表中倒数第K个结点"></a>输出单向链表中倒数第K个结点</h1><pre><code>倒数第k就是正数第n-k个。注意数组是从0开始的</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                arr[i] = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span> k = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(k&gt;n||k==<span class="number">0</span>)</span><br><span class="line">                System.out.println(<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(arr[n-k]);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串之间的距离-字符串相似度"><a href="#字符串之间的距离-字符串相似度" class="headerlink" title="字符串之间的距离/字符串相似度"></a>字符串之间的距离/字符串相似度</h1><pre><code>1. 计算编辑距离。    1. edit[i][0] = i;    2. edit[0][j] = j;    3. edit[i][j] = edit[i-1][j-1] --&gt; s1.charAt(i-1)==s2.charAt(j-1);    4. edit[i][j] = Math.min(Math.min(edit[i-1][j]+1,edit[i][j-1]+1),edit[i-1][j-1]+1);</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getEDS</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.equals(s2))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> length1 = s1.length();</span><br><span class="line">        <span class="keyword">int</span> length2 = s2.length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] edit = <span class="keyword">new</span> <span class="keyword">int</span>[length1+<span class="number">1</span>][length2+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length1+<span class="number">1</span>;i++)</span><br><span class="line">            edit[i][<span class="number">0</span>] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length2+<span class="number">1</span>;j++)</span><br><span class="line">            edit[<span class="number">0</span>][j] = j;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length1+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;length2+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s1.charAt(i-<span class="number">1</span>)==s2.charAt(j-<span class="number">1</span>))</span><br><span class="line">                    edit[i][j] = edit[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    edit[i][j] = Math.min(Math.min(edit[i-<span class="number">1</span>][j]+<span class="number">1</span>,edit[i][j-<span class="number">1</span>]+<span class="number">1</span>),edit[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> edit[length1][length2];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            System.out.println(getEDS(scanner.next(),scanner.next()));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="iNOC-杨辉三角"><a href="#iNOC-杨辉三角" class="headerlink" title="iNOC 杨辉三角"></a>iNOC 杨辉三角</h1><pre><code>数字小于3，没有偶数遇到奇数，第一个偶数出现在第二个位置。遇到偶数，    能整除4，第一个偶数出现在第三个位置。    不能整除4，第一个偶数出现在第四个位置。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)</span><br><span class="line">                System.out.println(-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">                System.out.println(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">4</span>==<span class="number">0</span>)</span><br><span class="line">                System.out.println(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度整数加法"><a href="#高精度整数加法" class="headerlink" title="高精度整数加法"></a>高精度整数加法</h1><pre><code>BigInteger的用法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            BigInteger b1 = <span class="keyword">new</span> BigInteger(scanner.next());</span><br><span class="line">            BigInteger b2 = <span class="keyword">new</span> BigInteger(scanner.next());</span><br><span class="line">            System.out.println(b1.add(b2));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找组成一个偶数最接近的两个素数"><a href="#查找组成一个偶数最接近的两个素数" class="headerlink" title="查找组成一个偶数最接近的两个素数"></a>查找组成一个偶数最接近的两个素数</h1><pre><code>1. 判断一个数是不是素数    1. 1不是素数，能整出2的不是素数    2. 从3开始遍历，i&lt;Math.sqrt(n);i+=2，如果数字能整除其中一个，就不是素数</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">1</span>||n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=Math.sqrt(n);i+=<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getTwoPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> half = n/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(isPrime(half))&#123;</span><br><span class="line">            System.out.println(half);</span><br><span class="line">            System.out.println(half);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(isPrime(i))</span><br><span class="line">                list.add(i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//System.out.println(list);</span></span><br><span class="line">        </span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> minGap = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp1 = list.get(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;size;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp2 = list.get(j);</span><br><span class="line">                <span class="keyword">if</span>(temp1+temp2==n)&#123;</span><br><span class="line">                <span class="comment">//System.out.println(temp1+".."+temp2);</span></span><br><span class="line">                Integer tt = map.get(temp1);</span><br><span class="line">                    map.put(temp1,tt==<span class="keyword">null</span>?temp2:</span><br><span class="line">                    (tt&gt;temp2?temp2:tt));</span><br><span class="line">                    <span class="keyword">if</span>(minGap&gt;(temp2-temp1))&#123;</span><br><span class="line">                        minGap = temp2-temp1;</span><br><span class="line">                        key = temp1;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">        System.out.println(map.get(key));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            getTwoPrime(scanner.nextInt());</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="放苹果"><a href="#放苹果" class="headerlink" title="放苹果"></a>放苹果</h1><pre><code>苹果数apple，盘子数panel1. 苹果数==0，或者panel==1时，返回12. 当apple&lt;panel，等价于f(apple,apple)3. 当apple&gt;=panel,    1. 至少有一个盘子空着，等价于f(apple，panel-1)    2. 没有盘子空着，等价于f(apple-panel,panel)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">allotApple</span><span class="params">(<span class="keyword">int</span> apple,<span class="keyword">int</span> panel)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(apple==<span class="number">0</span>||panel==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(apple&lt;panel)</span><br><span class="line">            <span class="keyword">return</span> allotApple(apple,apple);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> allotApple(apple,panel-<span class="number">1</span>)+allotApple(apple-panel,panel);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            System.out.println(allotApple(scanner.nextInt(),scanner.nextInt()));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DNA序列"><a href="#DNA序列" class="headerlink" title="DNA序列"></a>DNA序列</h1><pre><code>1. 固定长度的字符串子串2. Map的values方法返回的是一个Collection，但是Collections的max和min都是Collection形参的</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">getSubDNAs</span><span class="params">(String DNA,<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        Set&lt;String&gt; subDNA = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> length = DNA.length();</span><br><span class="line">        String temp = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;length;j++)&#123;</span><br><span class="line">                temp = DNA.substring(i,j);</span><br><span class="line">                <span class="keyword">if</span>(temp.length()==size)</span><br><span class="line">                    subDNA.add(temp);</span><br><span class="line">                <span class="keyword">if</span>(j==length-<span class="number">1</span>&amp;&amp;i!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(size==<span class="number">1</span>)</span><br><span class="line">                        subDNA.add(DNA.charAt(j)+<span class="string">""</span>);</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        temp = DNA.substring(i);</span><br><span class="line">                        <span class="keyword">if</span>(temp.length()==size)</span><br><span class="line">                            subDNA.add(temp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(length==size)</span><br><span class="line">            subDNA.add(DNA);</span><br><span class="line">        <span class="keyword">return</span> subDNA;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMaxGCRadio</span><span class="params">(String DNA,<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        Set&lt;String&gt; subDNA = getSubDNAs(DNA,size);</span><br><span class="line">        Map&lt;String,Double&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String s:subDNA)&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i)==<span class="string">'C'</span>||s.charAt(i)==<span class="string">'G'</span>)</span><br><span class="line">                    count++;</span><br><span class="line">            <span class="keyword">double</span> gcRadio = count/(<span class="keyword">double</span>)size;</span><br><span class="line">            map.put(s,map.get(s)==<span class="keyword">null</span>?gcRadio:(map.get(s)&gt;gcRadio?map.get(s):gcRadio));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> maxValue = Collections.max(map.values());</span><br><span class="line">        <span class="keyword">for</span>(String s:map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(s)==maxValue)</span><br><span class="line">                <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String DNA = scanner.nextLine();</span><br><span class="line">            <span class="keyword">int</span> size = Integer.parseInt(scanner.nextLine());</span><br><span class="line">            System.out.println(getMaxGCRadio(DNA,size));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找两个字符串a，b中的最长公共子串"><a href="#查找两个字符串a，b中的最长公共子串" class="headerlink" title="查找两个字符串a，b中的最长公共子串"></a>查找两个字符串a，b中的最长公共子串</h1><pre><code>1. LCS，LIS都是算长度的。2. 找到字符串中比较小的开始遍历，map保存公共字符串和长度3. 从map中找到第一个最长的就ok</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMaxCommon</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length1 = s1.length();</span><br><span class="line">        <span class="keyword">int</span> length2 = s2.length();</span><br><span class="line">        String max = length1&gt;=length2?s1:s2;</span><br><span class="line">        String min = length1&lt;length2?s1:s2;</span><br><span class="line">        <span class="keyword">int</span> minLen = min.length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(max.contains(min))</span><br><span class="line">            <span class="keyword">return</span> min;</span><br><span class="line">        </span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        String temp=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;minLen-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;minLen;j++)&#123;</span><br><span class="line">                temp = min.substring(i,j);</span><br><span class="line">                <span class="keyword">if</span>(max.contains(temp))</span><br><span class="line">                    map.put(temp,temp.length());</span><br><span class="line">                <span class="keyword">if</span>(j==minLen-<span class="number">1</span>&amp;&amp;i!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">char</span> c = min.charAt(j);</span><br><span class="line">                    <span class="keyword">if</span>(max.contains(String.valueOf(c)))</span><br><span class="line">                        map.put(c+<span class="string">""</span>,<span class="number">1</span>);</span><br><span class="line">                    temp = min.substring(i);</span><br><span class="line">                    <span class="keyword">if</span>(max.contains(temp))</span><br><span class="line">                        map.put(temp,temp.length());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxLength = Collections.max(map.values());</span><br><span class="line">        <span class="keyword">for</span>(String s:map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(s)==maxLength)</span><br><span class="line">                <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String s1 = scanner.nextLine();</span><br><span class="line">            String s2 = scanner.nextLine();</span><br><span class="line">            System.out.println(getMaxCommon(s1,s2));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="成绩排序"><a href="#成绩排序" class="headerlink" title="成绩排序"></a>成绩排序</h1><pre><code>1. 需要注意，可能会出现同名但是不同分的同学</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            <span class="keyword">int</span> n = Integer.parseInt(scanner.nextLine());</span><br><span class="line">            <span class="keyword">int</span> flag = Integer.parseInt(scanner.nextLine());</span><br><span class="line">            Map&lt;String,Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                String[] tempArr = scanner.nextLine().split(<span class="string">"\\s+"</span>);</span><br><span class="line">                <span class="keyword">if</span>(map.get(tempArr[<span class="number">0</span>])==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    map.put(tempArr[<span class="number">0</span>],Integer.parseInt(tempArr[<span class="number">1</span>]));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    map.put(tempArr[<span class="number">0</span>]+Math.random(),Integer.parseInt(tempArr[<span class="number">1</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Map.Entry&lt;String,Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class="line">            Collections.sort(list,<span class="keyword">new</span> Comparator&lt;Map.Entry&lt;String,Integer&gt;&gt;()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Entry&lt;String, Integer&gt; o1, Entry&lt;String, Integer&gt; o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">return</span> o2.getValue().compareTo(o1.getValue());</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">return</span> o1.getValue().compareTo(o2.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;String,Integer&gt; entry:list)&#123;</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                <span class="keyword">int</span> zeroIndex = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>((zeroIndex = key.indexOf(<span class="string">"0"</span>))&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    key = key.substring(<span class="number">0</span>,zeroIndex);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(key+<span class="string">" "</span>+entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h1><pre><code>1. 一个二维矩阵，int[][]a,是可以直接使用a[i]的形式传递的，传的是某一行2. 累加的过程sum+=a[k]*b[k][j]</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">matrixMultiply</span><span class="params">(<span class="keyword">int</span>[][] matrixA,<span class="keyword">int</span>[][] matrixB,<span class="keyword">int</span>[][] result,<span class="keyword">int</span> rowA,<span class="keyword">int</span> colA_rowB,<span class="keyword">int</span> colB)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rowA;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;colB;j++)&#123;</span><br><span class="line">                result[i][j] = accumulation(matrixA[i],matrixB,colA_rowB,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rowA;i++)&#123;</span><br><span class="line">            sb.setLength(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;colB;j++)&#123;</span><br><span class="line">                sb.append(result[i][j]+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sb.toString().trim());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">accumulation</span><span class="params">(<span class="keyword">int</span>[] rowArr,<span class="keyword">int</span>[][] matrixB,<span class="keyword">int</span> colA_rowB,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;colA_rowB;i++)</span><br><span class="line">            sum += rowArr[i]*matrixB[i][j];</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> rowA = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span> colA_rowB = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span> colB = scanner.nextInt();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span>[][] matrixA = <span class="keyword">new</span> <span class="keyword">int</span>[rowA][colA_rowB];</span><br><span class="line">            <span class="keyword">int</span>[][] matrixB = <span class="keyword">new</span> <span class="keyword">int</span>[colA_rowB][colB];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rowA;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;colA_rowB;j++)</span><br><span class="line">                    matrixA[i][j] = scanner.nextInt();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;colA_rowB;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;colB;j++)</span><br><span class="line">                    matrixB[i][j] = scanner.nextInt();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> result[][] = <span class="keyword">new</span> <span class="keyword">int</span>[rowA][colB];</span><br><span class="line">            matrixMultiply(matrixA,matrixB,result,rowA,colA_rowB,colB);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串通配符"><a href="#字符串通配符" class="headerlink" title="字符串通配符"></a>字符串通配符</h1><pre><code>1. 就是把原来字符串中的？，*变成正则中的表达式。    1. ？表示匹配一个字符[0-9a-zA-Z]{1}    2. *表示匹配0个或以上的字符[0-9a-zA-Z]*</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String regex = scanner.nextLine();</span><br><span class="line">            regex = regex.replaceAll(<span class="string">"\\?"</span>,<span class="string">"[a-zA-Z0-9]&#123;1&#125;"</span>);</span><br><span class="line">            regex = regex.replaceAll(<span class="string">"\\*"</span>,<span class="string">"[a-zA-Z0-9]*"</span>);</span><br><span class="line">            System.out.println(scanner.nextLine().matches(<span class="string">"^"</span>+regex+<span class="string">"$"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="公共字串计算"><a href="#公共字串计算" class="headerlink" title="公共字串计算"></a>公共字串计算</h1><pre><code>1. LCS（Longest Common Substring）    dp[i][j] = dp[i-1][j-1]+1 (s1.charAt(i-1)==s2.charAt(j-1))2. LIS(Longest Common SubSequence)    dp[i][j] = dp[i-1][j-1]+1 (s1.charAt(i-1)==s2.charAt(j-1))     dp[i][j] = Math,max(dp[i-1][j],dp[i][j-1]);</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxSubstring</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length1 = s1.length();</span><br><span class="line">        <span class="keyword">int</span> length2 = s2.length();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length1+<span class="number">1</span>][length2+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length1+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;length2+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s1.charAt(i-<span class="number">1</span>)==s2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">                    max = max&gt;dp[i][j]?max:dp[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            System.out.println(getMaxSubstring(scanner.next(),scanner.next()));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h1><pre><code>1. 需要判断一下&quot;的个数</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//xcopy /s "C:\program files" "d:\"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String[] arr = scanner.nextLine().split(<span class="string">"\\s+"</span>);</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(String s:arr)&#123;</span><br><span class="line">            <span class="keyword">int</span> length = s.length();</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(<span class="number">0</span>)!=<span class="string">'"'</span> &amp;&amp; count%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    list.add(s);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(<span class="number">0</span>)==<span class="string">'"'</span>&amp;&amp;s.charAt(length-<span class="number">1</span>)==<span class="string">'"'</span>)&#123;</span><br><span class="line">                    list.add(s.substring(<span class="number">1</span>,length-<span class="number">1</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(s.charAt(<span class="number">0</span>)==<span class="string">'"'</span>)&#123;</span><br><span class="line">                        sb.append(s.substring(<span class="number">1</span>)+<span class="string">" "</span>);</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(length-<span class="number">1</span>)==<span class="string">'"'</span>)&#123;</span><br><span class="line">                        sb.append(s.substring(<span class="number">0</span>,length-<span class="number">1</span>));</span><br><span class="line">                        count++;</span><br><span class="line">                        list.add(sb.toString());</span><br><span class="line">                        sb.setLength(<span class="number">0</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        sb.append(s+<span class="string">" "</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(list.size());</span><br><span class="line">            <span class="keyword">for</span>(String temp:list)</span><br><span class="line">                System.out.println(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="扑克牌的大小"><a href="#扑克牌的大小" class="headerlink" title="扑克牌的大小"></a>扑克牌的大小</h1><pre><code>1. 对王最大2. 没有对王，一个牌是4个（炸弹），一个不是4个，炸弹最大3. 其他的情况都是比较第一个牌的大小    1. 一旦牌的长度不相等，又没有炸弹，输出ERROR</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">compareCard</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.equals(<span class="string">"joker JOKER"</span>)||s2.equals(<span class="string">"joker JOKER"</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"joker JOKER"</span>;</span><br><span class="line">        String card[] = &#123;<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"J"</span>,<span class="string">"Q"</span>,<span class="string">"K"</span>,<span class="string">"A"</span>,<span class="string">"2"</span>,<span class="string">"joker"</span>,<span class="string">"JOKER"</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(card));</span><br><span class="line">        String[] cArr1 = s1.split(<span class="string">"\\s+"</span>);</span><br><span class="line">        String[] cArr2 = s2.split(<span class="string">"\\s+"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> cLen1 = cArr1.length;</span><br><span class="line">        <span class="keyword">int</span> cLen2 = cArr2.length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(cLen1!=<span class="number">4</span>&amp;&amp;cLen2!=<span class="number">4</span>&amp;&amp;cLen2!=cLen1)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ERROR"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(cLen1==<span class="number">4</span>&amp;&amp;cLen2!=<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">return</span> s1;</span><br><span class="line">        <span class="keyword">if</span>(cLen2==<span class="number">4</span>&amp;&amp;cLen1!=<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">return</span> s2;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> cIndex1 = list.indexOf(cArr1[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> cIndex2 = list.indexOf(cArr2[<span class="number">0</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cIndex1&gt;cIndex2?s1:s2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String[] s = scanner.nextLine().split(<span class="string">"-"</span>);</span><br><span class="line">            System.out.println(compareCard(s[<span class="number">0</span>],s[<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="等差数列"><a href="#等差数列" class="headerlink" title="等差数列"></a>等差数列</h1><pre><code>Sn = na0+[n(n-1)/2]*dan = a0+(n-1)*d</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)</span><br><span class="line">                System.out.println(<span class="string">"-1"</span>);</span><br><span class="line">            System.out.println(<span class="number">2</span>*n+(n*(n-<span class="number">1</span>)/<span class="number">2</span>)*<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JAVA题目2-3级"><a href="#JAVA题目2-3级" class="headerlink" title="JAVA题目2-3级"></a>JAVA题目2-3级</h1><pre><code>1. 利用递归，f(m,n)，下一步可以右或者往下走f(m-1,n),f(m,n-1)。2. 当m或者n等于0，返回1。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public static void main(String[] args)&#123;</span></span><br><span class="line"><span class="comment">        Scanner sc=new Scanner(System.in);</span></span><br><span class="line"><span class="comment">        while(sc.hasNext())&#123;</span></span><br><span class="line"><span class="comment">            int m=sc.nextInt();</span></span><br><span class="line"><span class="comment">            int n=sc.nextInt();</span></span><br><span class="line"><span class="comment">            int[][] path=new int[m+1][n+1];</span></span><br><span class="line"><span class="comment">            for(int i=0;i&lt;m+1;i++)</span></span><br><span class="line"><span class="comment">                path[i][0]=1;</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            for(int j=0;j&lt;n+1;j++)</span></span><br><span class="line"><span class="comment">                path[0][j]=1;</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            for(int i=1;i&lt;m+1;i++)</span></span><br><span class="line"><span class="comment">                for(int j=1;j&lt;n+1;j++)</span></span><br><span class="line"><span class="comment">                    path[i][j]=path[i-1][j]+path[i][j-1];</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            System.out.println(path[m][n]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        sc.close();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getPath</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> column)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row==<span class="number">0</span>||column==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> getPath(row-<span class="number">1</span>,column)+getPath(row,column-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            System.out.println(getPath(scanner.nextInt(),scanner.nextInt()));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="机器人走方格"><a href="#机器人走方格" class="headerlink" title="机器人走方格"></a>机器人走方格</h1><pre><code>有一个XxY的网格，一个机器人只能走格点且只能向右或向下走，要从左上角走到右下角。请设计一个算法，计算机器人有多少种走法。给定两个正整数int x,int y，请返回机器人的走法数目。保证x＋y小于等于12。和前者的不同是，前者走的是2*2方格的点，这个走的是内部的格子，所以2*2的格子，前者是6种，后者是2种</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getPath</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> column)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row==<span class="number">1</span>||column==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> getPath(row-<span class="number">1</span>,column)+getPath(row,column-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            System.out.println(getPath(scanner.nextInt(),scanner.nextInt()));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JAVA题目0-1级"><a href="#JAVA题目0-1级" class="headerlink" title="JAVA题目0-1级"></a>JAVA题目0-1级</h1><pre><code>其实就是把能被3整除的，和能被5整除的分开放，把剩下的放入一个list。然后从list中依次取出一个，加到sum3或者sum5中，判断sum3==sum5，同时一定要把sum中的所有都取出后，判断才有意义。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">(<span class="keyword">int</span> sum3,<span class="keyword">int</span> sum5,List&lt;Integer&gt; list,<span class="keyword">int</span> size,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size==index &amp;&amp; sum3==sum5)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(size==index &amp;&amp; sum3!=sum5)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(index&lt;size)</span><br><span class="line">            <span class="keyword">return</span> isExist(sum3+list.get(index),sum5,list,size,index+<span class="number">1</span>)</span><br><span class="line">            || isExist(sum3,sum5+list.get(index),list,size,index+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span> sum3 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> sum5 = <span class="number">0</span>;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = scanner.nextInt();</span><br><span class="line">                <span class="keyword">if</span>(temp%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">                    sum3+=temp;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(temp%<span class="number">5</span>==<span class="number">0</span>)</span><br><span class="line">                    sum5+=temp;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    list.add(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(isExist(sum3,sum5,list,list.size(),<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/v2-13bd645dc39c60194d1a38c5363e4546_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;华为OJ（算法） 题库108个，比较难的14个没有写，这里是需要想一想但是不至于想不出来的&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="HUAWEI" scheme="http://abelchao.com/categories/HUAWEI/"/>
    
    
      <category term="HUAWEI" scheme="http://abelchao.com/tags/HUAWEI/"/>
    
  </entry>
  
  <entry>
    <title>Callable、Future和FutureTask</title>
    <link href="http://abelchao.com/2018/05/16/Callable%E3%80%81Future%E5%92%8CFutureTask/"/>
    <id>http://abelchao.com/2018/05/16/Callable、Future和FutureTask/</id>
    <published>2018-05-16T01:00:00.000Z</published>
    <updated>2018-05-18T09:07:35.634Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/v2-3c54c81861d5b9a5975de64426e31f1d_hd.jpg" alt=""></p><p><strong>Callable、Future和FutureTask</strong><br><a id="more"></a></p><h1 id="Callable和Runable"><a href="#Callable和Runable" class="headerlink" title="Callable和Runable"></a>Callable和Runable</h1><pre><code>java.lang.Runable是一个接口,只有一个run()方法Callable是java.util.concurrent包下的一个接口,也只有一个call()方法两者都可以实现多线程</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>1. Callable中定义的是call方法,而Runnable定义的是run方法2. Callable中的call方法可以返回执行任务的结果,Runnable的run方法不可以3. Callable中的call方法定义了throws Exception4. 运行Callable任务可以拿到一个Future对象代表异步运算的结果.</code></pre><h1 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Future是java.util.concurrent包下的一个接口,代表着一个异步计算的结果,可以通过get()获取线程执行的返回值,cancel()取消任务执行,isCancelled()和isDone()获得任务执行的情况.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><pre><code>1. boolean cancel(boolean mayInterruptIfRunning);    1. mayInterruptIfRunning表示是否允许中断正在执行的任务    2. 如果任务还没开始,总是返回true    3. 任务已经结束,返回false    4. 如果cancel返回true,isDone,isCancelled都是返回true2. boolean isCancelled    1. 表示任务是否被取消成功,如果任务和正常完成前被取消成功,则返回true3. boolean isDone    1. 表示任务是否已经完成,正常完成,异常或者取消操作都表示任务完成.4. V get和V get(long timeout,TimeUnit unit)    1. get()用来获取执行结果，这个方法会产生阻塞，会一直等到任务执行完毕才返回    2. et(long timeout, TimeUnit unit)用来获取执行结果，如果在指定时间内还没获取到结果，会抛出TimeoutException</code></pre><p><strong>Future提供了三种功能</strong></p><pre><code>1. 获取任务执行的结果2. 取消任务3. 判断任务是否完成或者是否取消</code></pre><p><strong>Future只是一个接口,没有办法实例化,就有了FutureTask</strong></p><h1 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">/* <span class="title">FutureTask</span>实现了<span class="title">RunnableFuture</span>接口，那么<span class="title">RunnableFuture</span>又是什么呢？ */</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets this Future to the result of its computation</span></span><br><span class="line"><span class="comment">     * unless it has been cancelled.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RunnableFuture接口继承了Runnable和Future，所以它既是一个可以让线程执行的Runnable任务，又是一个可以获取Callable返回值的Future</span><br></pre></td></tr></table></figure><h2 id="FutureTask的属性"><a href="#FutureTask的属性" class="headerlink" title="FutureTask的属性"></a>FutureTask的属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The run state of this task */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NEW          = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COMPLETING   = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORMAL       = <span class="number">2</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCEPTIONAL  = <span class="number">3</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED    = <span class="number">4</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTING = <span class="number">5</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTED  = <span class="number">6</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** The underlying callable; nulled out after running */</span></span><br><span class="line"><span class="keyword">private</span> Callable&lt;V&gt; callable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The result to return or exception to throw from get() */</span></span><br><span class="line"><span class="keyword">private</span> Object outcome;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The thread running the callable; CASed during run() */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Thread runner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Treiber stack of waiting threads */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> WaitNode waiters;</span><br></pre></td></tr></table></figure><pre><code>1. 初始化时是NEW2. 任务终止的状态有NORMAL（正常结束）、EXCEPTIONAL（异常结束）、CANCELLED（被取消）、INTERRUPTED（执行中被中断），这些状态是通过set()、setException、cancel()方法触发的3. COMPLETING 和 INTERRUPTING是两个中间状态，当正常结束设置outcome属性前是COMPLETING，设置后变成NORMAL；当中断运行中线程前是INTERRUPTING，调用thread.interrupt()后是INTERRUPTED可能的状态转换：    NEW -&gt; COMPLETING -&gt; NORMAL    NEW -&gt; COMPLETING -&gt; EXCEPTIONAL    NEW -&gt; CANCELLED    NEW -&gt; INTERRUPTING -&gt; INTERRUPTEDcallable 是线程执行的有返回值的任务outcome 是任务执行后的结果或异常waiters 表示等待获取结果的阻塞线程，链表结构，后等待线程的会排在链表前面</code></pre><h2 id="FutureTask的构造器"><a href="#FutureTask的构造器" class="headerlink" title="FutureTask的构造器"></a>FutureTask的构造器</h2><p><strong>FutureTask(Callable<v> callable)</v></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.callable = callable;</span><br><span class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FutureTask(Runnable runnable, V result)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Runnable runnable, V result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.callable = Executors.callable(runnable, result);</span><br><span class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">参数为Runnable和带泛型的result对象，由于Runnable本身是没有返回值的，故线程的执行结果通过result返回</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="FutureTask的API"><a href="#FutureTask的API" class="headerlink" title="FutureTask的API"></a>FutureTask的API</h2><p><a href="http://www.cnblogs.com/trust-freedom/p/6867755.html" target="_blank" rel="noopener">http://www.cnblogs.com/trust-freedom/p/6867755.html</a></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFuture</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        Task task = <span class="keyword">new</span> Task(); <span class="comment">//callable任务</span></span><br><span class="line">        Future&lt;Integer&gt; result = executor.submit(task);</span><br><span class="line">        executor.shutdown();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"主线程在执行任务"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"task运行结果："</span>+result.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"所有任务执行完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"子线程在进行计算"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">                sum += i;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/v2-3c54c81861d5b9a5975de64426e31f1d_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Callable、Future和FutureTask&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaSE" scheme="http://abelchao.com/categories/JavaSE/"/>
    
    
      <category term="JavaSE" scheme="http://abelchao.com/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>线程池（ThreadPoolExecutor）</title>
    <link href="http://abelchao.com/2018/05/15/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%88ThreadPoolExecutor%EF%BC%89/"/>
    <id>http://abelchao.com/2018/05/15/线程池（ThreadPoolExecutor）/</id>
    <published>2018-05-15T01:00:00.000Z</published>
    <updated>2018-05-18T09:07:22.625Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/v2-11c74576109d3e7f5e99b4c18c488170_hd.jpg" alt=""></p><p><strong>线程的原理与使用</strong><br><a id="more"></a></p><h1 id="线程池的架构"><a href="#线程池的架构" class="headerlink" title="线程池的架构"></a>线程池的架构</h1><p><img src="http://oxk1vrcj4.bkt.clouddn.com/677054-20170321162047143-116341376.jpg" alt=""></p><pre><code>1. Executor是最基础的执行接口。里面只有一个execute()2. ExecutorService接口继承了Executor，在其上做了一些shutdown()，submit()，shutdownNow()的扩展，可以说是真正的线程池接口3. AbstractExecutorService抽象类实现了ExecutorService接口中的大部分方法；4. ThreadPoolExecutor继承了AbstractExecutorService，是线程池的具体实现。5. ScheduledExecutorService和ScheduledThreadPoolExecutor是有&quot;周期执行&quot;功能。6. Executor是线程池的静态工厂，提供了创建线程池的静态方法</code></pre><h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><pre><code>void execute(Runnable command);    可以用来执行已经提交的Runnable任务对象，这个接口提供了一种将“任务提交”与“任务执行”解耦的方法。</code></pre><h2 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h2><pre><code>“执行者服务”接口，可以说是真正的线程池接口，在Executor接口的基础上做了一些扩展</code></pre><h3 id="管理任务如何终止的-shutdown相关方法"><a href="#管理任务如何终止的-shutdown相关方法" class="headerlink" title="管理任务如何终止的 shutdown相关方法"></a>管理任务如何终止的 shutdown相关方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动一次有序的关闭，之前提交的任务执行，但不接受新任务</span></span><br><span class="line"><span class="comment"> * 这个方法不会等待之前提交的任务执行完毕</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 试图停止所有正在执行的任务，暂停处理正在等待的任务，返回一个等待执行的任务列表</span></span><br><span class="line"><span class="comment"> * 这个方法不会等待正在执行的任务终止</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果已经被shutdown，返回true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果所有任务都已经被终止，返回true</span></span><br><span class="line"><span class="comment"> * 是否为终止状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在一个shutdown请求后，阻塞的等待所有任务执行完毕</span></span><br><span class="line"><span class="comment"> * 或者到达超时时间，或者当前线程被中断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure><h3 id="可以生成用于追踪一个或多个异步任务执行结果的Future对象的-submit-相关方法"><a href="#可以生成用于追踪一个或多个异步任务执行结果的Future对象的-submit-相关方法" class="headerlink" title="可以生成用于追踪一个或多个异步任务执行结果的Future对象的 submit()相关方法"></a>可以生成用于追踪一个或多个异步任务执行结果的Future对象的 submit()相关方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提交一个可执行的任务，返回一个Future代表这个任务</span></span><br><span class="line"><span class="comment"> * 等到任务成功执行，Future#get()方法会返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Future&lt;?&gt; submit(Runnable task);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提交一个可以执行的任务，返回一个Future代表这个任务</span></span><br><span class="line"><span class="comment"> * 等到任务执行结束，Future#get()方法会返回这个给定的result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提交一个有返回值的任务，并返回一个Future代表等待的任务执行的结果</span></span><br><span class="line"><span class="comment"> * 等到任务成功执行，Future#get()方法会返回任务执行的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在给定延时后，创建并执行一个一次性的Runnable任务</span></span><br><span class="line"><span class="comment"> * 任务执行完毕后，ScheduledFuture#get()方法会返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ScheduledFuture&lt;?&gt; schedule(Runnable command, <span class="keyword">long</span> delay, TimeUnit unit);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在给定延时后，创建并执行一个ScheduledFutureTask</span></span><br><span class="line"><span class="comment"> * ScheduledFuture 可以获取结果或取消任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;V&gt; <span class="function">ScheduledFuture&lt;V&gt; <span class="title">schedule</span><span class="params">(Callable&lt;V&gt; callable, ong delay, TimeUnit unit)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建并执行一个在给定初始延迟后首次启用的定期操作，后续操作具有给定的周期</span></span><br><span class="line"><span class="comment"> * 也就是将在 initialDelay 后开始执行，然后在 initialDelay+period 后执行，接着在 initialDelay + 2 * period 后执行，依此类推</span></span><br><span class="line"><span class="comment"> * 如果执行任务发生异常，随后的任务将被禁止，否则任务只会在被取消或者Executor被终止后停止</span></span><br><span class="line"><span class="comment"> * 如果任何执行的任务超过了周期，随后的执行会延时，不会并发执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command,</span><br><span class="line">                                                  <span class="keyword">long</span> initialDelay,</span><br><span class="line">                                                  <span class="keyword">long</span> period,</span><br><span class="line">                                                  TimeUnit unit);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建并执行一个在给定初始延迟后首次启用的定期操作，随后，在每一次执行终止和下一次执行开始之间都存在给定的延迟</span></span><br><span class="line"><span class="comment"> * 如果执行任务发生异常，随后的任务将被禁止，否则任务只会在被取消或者Executor被终止后停止</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command,</span><br><span class="line">                                                     <span class="keyword">long</span> initialDelay,</span><br><span class="line">                                                     <span class="keyword">long</span> delay,</span><br><span class="line">                                                     TimeUnit unit);</span><br></pre></td></tr></table></figure><h1 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h1><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure><pre><code>1. corePoolSize：线程池中的核心线程数，当提交一个任务时，线程池创建一个新线程执行任务，直到当前线程数等于corePoolSize。    1. 如果当前线程数是corePoolSize，继续提交的任务被保存在阻塞队列中，等待空闲线程执行它    2. 如果执行了线程池的prestartAllCoreThreads方法，线程池会提前启动所有核心线程。2. maximumPoolSize：线程池中允许的最大线程数。如果阻塞队列满了，且继续提交任务，则创建新的线程执行任务，前提是当前线程数小于等于maximumPoolSize3. keepAliveTime：线程空闲时的存活时间。当线程没有任务执行时，继续存活的时间。默认情况下，该参数只有在线程数大于corePoolSize时才有用4. workQueue：workQueue必须是BlockingQueue阻塞队列。当线程池中的线程数超过corePoolSize时，线程会进入阻塞队列进行阻塞等待。通过workQueue，线程池实现了阻塞功能5. threadFactory：创建线程的工厂（pool-数字-thread-数字）6. rejectedExecutionHandler：饱和策略，阻塞队列满了，且没有空闲的工作线程，如果继续提交任务，必须采取一种策略处理该任务    1. AbortPolicy：直接抛出异常，默认策略    2. CallerRunsPolicy：用调用者所在的线程执行任务    3. DiscardOldestPolicy：丢弃阻塞队列中最靠前的任务    4. DiscardPolicy：直接丢弃任务    </code></pre><h2 id="执行流程（execute-）"><a href="#执行流程（execute-）" class="headerlink" title="执行流程（execute()）"></a>执行流程（execute()）</h2><pre><code>1. 线程池中的线程数量小于corePoolSize，创建新线程执行新添加的任务2. 线程池中的线程数大于等于corePoolSize，但是workQueue没有满，将新添加的任务放到workQueue中，按照FIFO的原则依次等待执行3. 线程池中的数量大于等于corePoolSize，同时workQueue也满了，但是线程池的线程数小于maximunPoolSize，则创建新的线程来处理被添加的任务4. 当线程中的线程数等于maximumPoolSize时，使用RejectExecutionHandler来做拒绝处理。总之，新的任务处理时，先看currentThreadNums，是不是小于corePoolSize，如果大于，看workQueue是不是满了，如果满了，看currentThreadNums是不是大于maximumPoolSize，如果大于，执行拒绝策略。注意:当线程池中的线程数大于corePoolSize时，如果里面有线程的空间时间超过了keepAliveTime，就将其移除线程池。</code></pre><h1 id="Executor静态工厂创建几种常见线程池"><a href="#Executor静态工厂创建几种常见线程池" class="headerlink" title="Executor静态工厂创建几种常见线程池"></a>Executor静态工厂创建几种常见线程池</h1><h2 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                                  threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>1. 创建一个指定工作线程数的线程池，其中参数 corePoolSize 和 maximumPoolSize 相等，阻塞队列基于LinkedBlockingQueue2. 它是一个典型且优秀的线程池，它具有线程池提高程序效率和节省创建线程时所耗的开销的优点。但是在线程池空闲时，即线程池中没有可运行任务时，它也不会释放工作线程，还会占用一定的系统资源</code></pre><h2 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                                threadFactory));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>1. 初始化的线程池中只有一个线程，如果该线程异常结束，会重新创建一个新的线程继续执行任务，唯一的线程可以保证所提交任务的顺序执行，内部使用LinkedBlockingQueue作为阻塞队列</code></pre><h2 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(),</span><br><span class="line">                                  threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>1. 创建一个可缓存工作线程的线程池，默认存活时间60秒，线程池的线程数可达到Integer.MAX_VALUE，即2147483647，内部使用SynchronousQueue作为阻塞队列；2. 在没有任务执行时，当线程的空闲时间超过keepAliveTime，则工作线程将会终止，当提交新任务时，如果没有空闲线程，则创建新线程执行任务，会导致一定的系统开销</code></pre><h2 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> corePoolSize, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize, threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>1. 初始化的线程池可以在指定的时间内周期性的执行所提交的任务，在实际的业务场景中可以使用该线程池定期的同步数据</code></pre><h1 id="线程池的执行流程（内部原理）"><a href="#线程池的执行流程（内部原理）" class="headerlink" title="线程池的执行流程（内部原理）"></a>线程池的执行流程（内部原理）</h1><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180518114541.png" alt=""></p><h2 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Packing and unpacking ctl</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure><pre><code>其中ctl这个AtomicInteger的功能很强大，其高3位用于维护线程池运行状态，低29位维护线程池中线程数量1、RUNNING：-1&lt;&lt;COUNT_BITS，即高3位为1，低29位为0，该状态的线程池会接收新任务，也会处理在阻塞队列中等待处理的任务2、SHUTDOWN：0&lt;&lt;COUNT_BITS，即高3位为0，低29位为0，该状态的线程池不会再接收新任务，但还会处理已经提交到阻塞队列中等待处理的任务3、STOP：1&lt;&lt;COUNT_BITS，即高3位为001，低29位为0，该状态的线程池不会再接收新任务，不会处理在阻塞队列中等待的任务，而且还会中断正在运行的任务4、TIDYING：2&lt;&lt;COUNT_BITS，即高3位为010，低29位为0，所有任务都被终止了，workerCount为0，为此状态时还将调用terminated()方法5、TERMINATED：3&lt;&lt;COUNT_BITS，即高3位为100，低29位为0，terminated()方法调用完成后变成此状态这些状态均由int型表示，大小关系为 RUNNING&lt;SHUTDOWN&lt;STOP&lt;TIDYING&lt;TERMINATED，这个顺序基本上也是遵循线程池从 运行 到 终止这个过程。runStateOf(int c)  方法：c &amp; 高3位为1，低29位为0的~CAPACITY，用于获取高3位保存的线程池状态workerCountOf(int c)方法：c &amp; 高3位为0，低29位为1的CAPACITY，用于获取低29位的线程数量ctlOf(int rs, int wc)方法：参数rs表示runState，参数wc表示workerCount，即根据runState和workerCount打包合并成ctl</code></pre><h2 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h2><h3 id="execute-Runnable-command-–-提交任务"><a href="#execute-Runnable-command-–-提交任务" class="headerlink" title="execute(Runnable command) – 提交任务"></a>execute(Runnable command) – 提交任务</h3><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180518120922.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Executes the given task sometime in the future.  The task</span></span><br><span class="line"><span class="comment"> * may execute in a new thread or in an existing pooled thread.</span></span><br><span class="line"><span class="comment"> * 在未来的某个时刻执行给定的任务。这个任务用一个新线程执行，或者用一个线程池中已经存在的线程执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If the task cannot be submitted for execution, either because this</span></span><br><span class="line"><span class="comment"> * executor has been shutdown or because its capacity has been reached,</span></span><br><span class="line"><span class="comment"> * the task is handled by the current &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;.</span></span><br><span class="line"><span class="comment"> * 如果任务无法被提交执行，要么是因为这个Executor已经被shutdown关闭，要么是已经达到其容量上限，任务会被当前的RejectedExecutionHandler处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> command the task to execute</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RejectedExecutionException at discretion of</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;, if the task</span></span><br><span class="line"><span class="comment"> *         cannot be accepted for execution                 RejectedExecutionException是一个RuntimeException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> command&#125; is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">     * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">     * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">     * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">     * threads when it shouldn't, by returning false.</span></span><br><span class="line"><span class="comment">     * 如果运行的线程少于corePoolSize，尝试开启一个新线程去运行command，command作为这个线程的第一个任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">     * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">     * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">     * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">     * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">     * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">     * 如果任务成功放入队列，我们仍需要一个双重校验去确认是否应该新建一个线程（因为可能存在有些线程在我们上次检查后死了） 或者 从我们进入这个方法后，pool被关闭了</span></span><br><span class="line"><span class="comment">     * 所以我们需要再次检查state，如果线程池停止了需要回滚入队列，如果池中没有线程了，新开启 一个线程</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">     * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">     * and so reject the task.</span></span><br><span class="line"><span class="comment">     * 如果无法将任务入队列（可能队列满了），需要新开区一个线程（自己：往maxPoolSize发展）</span></span><br><span class="line"><span class="comment">     * 如果失败了，说明线程池shutdown 或者 饱和了，所以我们拒绝任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、如果当前线程数少于corePoolSize（可能是由于addWorker()操作已经包含对线程池状态的判断，如此处没加，而入workQueue前加了）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="comment">//addWorker()成功，返回</span></span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 没有成功addWorker()，再次获取c（凡是需要再次用ctl做判断时，都会再次调用ctl.get()）</span></span><br><span class="line"><span class="comment">         * 失败的原因可能是：</span></span><br><span class="line"><span class="comment">         * 1、线程池已经shutdown，shutdown的线程池不再接收新任务</span></span><br><span class="line"><span class="comment">         * 2、workerCountOf(c) &lt; corePoolSize 判断后，由于并发，别的线程先创建了worker线程，导致workerCount&gt;=corePoolSize</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2、如果线程池RUNNING状态，且入队列成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.get();<span class="comment">//再次校验位</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 再次校验放入workerQueue中的任务是否能被执行</span></span><br><span class="line"><span class="comment">         * 1、如果线程池不是运行状态了，应该拒绝添加新任务，从workQueue中删除任务</span></span><br><span class="line"><span class="comment">         * 2、如果线程池是运行状态，或者从workQueue中删除任务失败（刚好有一个线程执行完毕，并消耗了这个任务），确保还有线程执行任务（只要有一个就够了）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果再次校验过程中，线程池不是RUNNING状态，并且remove(command)--workQueue.remove()成功，拒绝当前command</span></span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="comment">//如果当前worker数量为0，通过addWorker(null, false)创建一个线程，其任务为null</span></span><br><span class="line">        <span class="comment">//为什么只检查运行的worker数量是不是0呢？？ 为什么不和corePoolSize比较呢？？</span></span><br><span class="line">        <span class="comment">//只保证有一个worker线程可以从queue中获取任务执行就行了？？</span></span><br><span class="line">        <span class="comment">//因为只要还有活动的worker线程，就可以消费workerQueue中的任务</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);  <span class="comment">//第一个参数为null，说明只为新建一个worker线程，没有指定firstTask</span></span><br><span class="line">                                     <span class="comment">//第二个参数为true代表占用corePoolSize，false占用maxPoolSize</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3、如果线程池不是running状态 或者 无法入队列</span></span><br><span class="line"><span class="comment">     *   尝试开启新线程，扩容至maxPoolSize，如果addWork(command, false)失败了，拒绝当前command</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>参数：    command    提交执行的任务，不能为空执行流程：1、如果线程池当前线程数量少于corePoolSize，则addWorker(command, true)创建新worker线程，如创建成功返回，如没创建成功，则执行后续步骤；    addWorker(command, true)失败的原因可能是：        A、线程池已经shutdown，shutdown的线程池不再接收新任务        B、workerCountOf(c) &lt; corePoolSize 判断后，由于并发，别的线程先创建了worker线程，导致workerCount&gt;=corePoolSize2、到这一步说明，当前线程说已经大于等于corePoolSize了（或者shutdown），如果线程池还在running状态，将task加入workQueue阻塞队列中，如果加入成功，进行double-check，如果加入失败（可能是队列已满），则执行后续步骤；    double-check主要目的是判断刚加入workQueue阻塞队列的task是否能被执行        A、如果线程池已经不是running状态了，应该拒绝添加新任务，从workQueue中删除任务        B、如果线程池是运行状态，或者从workQueue中删除任务失败（刚好有一个线程执行完毕，并消耗了这个任务），确保还有线程执行任务（只要有一个就够了）3、如果线程池不是running状态 或者 无法入队列，尝试开启新线程，扩容至maxPoolSize，如果addWork(command, false)失败了，拒绝当前command</code></pre><h3 id="addWorker-Runnable-firstTask-boolean-core-–-添加worker线程"><a href="#addWorker-Runnable-firstTask-boolean-core-–-添加worker线程" class="headerlink" title="addWorker(Runnable firstTask, boolean core)  –  添加worker线程"></a>addWorker(Runnable firstTask, boolean core)  –  添加worker线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks if a new worker can be added with respect to current</span></span><br><span class="line"><span class="comment"> * pool state and the given bound (either core or maximum). If so,</span></span><br><span class="line"><span class="comment"> * the worker count is adjusted accordingly, and, if possible, a</span></span><br><span class="line"><span class="comment"> * new worker is created and started, running firstTask as its</span></span><br><span class="line"><span class="comment"> * first task. This method returns false if the pool is stopped or</span></span><br><span class="line"><span class="comment"> * eligible to shut down. It also returns false if the thread</span></span><br><span class="line"><span class="comment"> * factory fails to create a thread when asked.  If the thread</span></span><br><span class="line"><span class="comment"> * creation fails, either due to the thread factory returning</span></span><br><span class="line"><span class="comment"> * null, or due to an exception (typically OutOfMemoryError in</span></span><br><span class="line"><span class="comment"> * Thread#start), we roll back cleanly.</span></span><br><span class="line"><span class="comment"> * 检查根据当前线程池的状态和给定的边界(core or maximum)是否可以创建一个新的worker</span></span><br><span class="line"><span class="comment"> * 如果是这样的话，worker的数量做相应的调整，如果可能的话，创建一个新的worker并启动，参数中的firstTask作为worker的第一个任务</span></span><br><span class="line"><span class="comment"> * 如果方法返回false，可能因为pool已经关闭或者调用过了shutdown</span></span><br><span class="line"><span class="comment"> * 如果线程工厂创建线程失败，也会失败，返回false</span></span><br><span class="line"><span class="comment"> * 如果线程创建失败，要么是因为线程工厂返回null，要么是发生了OutOfMemoryError</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> firstTask the task the new thread should run first (or</span></span><br><span class="line"><span class="comment"> * null if none). Workers are created with an initial first task</span></span><br><span class="line"><span class="comment"> * (in method execute()) to bypass(绕开) queuing when there are fewer</span></span><br><span class="line"><span class="comment"> * than corePoolSize threads (in which case we always start one),</span></span><br><span class="line"><span class="comment"> * or when the queue is full (in which case we must bypass queue).</span></span><br><span class="line"><span class="comment"> * Initially idle threads are usually created via</span></span><br><span class="line"><span class="comment"> * prestartCoreThread or to replace other dying workers.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> core if true use corePoolSize as bound, else</span></span><br><span class="line"><span class="comment"> * maximumPoolSize. (A boolean indicator is used here rather than a</span></span><br><span class="line"><span class="comment"> * value to ensure reads of fresh values after checking other pool</span></span><br><span class="line"><span class="comment"> * state).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if successful</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//外层循环，负责判断线程池状态</span></span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c); <span class="comment">//状态</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程池的state越小越是运行状态，runnbale=-1，shutdown=0,stop=1,tidying=2，terminated=3</span></span><br><span class="line"><span class="comment">         * 1、如果线程池state已经至少是shutdown状态了</span></span><br><span class="line"><span class="comment">         * 2、并且以下3个条件任意一个是false</span></span><br><span class="line"><span class="comment">         *   rs == SHUTDOWN         （隐含：rs&gt;=SHUTDOWN）false情况： 线程池状态已经超过shutdown，可能是stop、tidying、terminated其中一个，即线程池已经终止</span></span><br><span class="line"><span class="comment">         *   firstTask == null      （隐含：rs==SHUTDOWN）false情况： firstTask不为空，rs==SHUTDOWN 且 firstTask不为空，return false，场景是在线程池已经shutdown后，还要添加新的任务，拒绝</span></span><br><span class="line"><span class="comment">         *   ! workQueue.isEmpty()  （隐含：rs==SHUTDOWN，firstTask==null）false情况： workQueue为空，当firstTask为空时是为了创建一个没有任务的线程，再从workQueue中获取任务，如果workQueue已经为空，那么就没有添加新worker线程的必要了</span></span><br><span class="line"><span class="comment">         * return false，即无法addWorker()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">               firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">               ! workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//内层循环，负责worker数量+1</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c); <span class="comment">//worker数量</span></span><br><span class="line">             </span><br><span class="line">            <span class="comment">//如果worker数量&gt;线程池最大上限CAPACITY（即使用int低29位可以容纳的最大值）</span></span><br><span class="line">            <span class="comment">//或者( worker数量&gt;corePoolSize 或  worker数量&gt;maximumPoolSize )，即已经超过了给定的边界</span></span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//调用unsafe CAS操作，使得worker数量+1，成功则跳出retry循环</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//CAS worker数量+1失败，再次读取ctl</span></span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">             </span><br><span class="line">            <span class="comment">//如果状态不等于之前获取的state，跳出内层循环，继续去外层循环判断</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">            <span class="comment">// else CAS失败时因为workerCount改变了，继续内层循环尝试CAS对worker数量+1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * worker数量+1成功的后续操作</span></span><br><span class="line"><span class="comment">     * 添加到workers Set集合，并启动worker线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">    Worker w = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock; </span><br><span class="line">        w = <span class="keyword">new</span> Worker(firstTask); <span class="comment">//1、设置worker这个AQS锁的同步状态state=-1</span></span><br><span class="line">                                   <span class="comment">//2、将firstTask设置给worker的成员变量firstTask</span></span><br><span class="line">                                   <span class="comment">//3、使用worker自身这个runnable，调用ThreadFactory创建一个线程，并设置给worker的成员变量thread</span></span><br><span class="line">        <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//--------------------------------------------这部分代码是上锁的</span></span><br><span class="line">                <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                <span class="comment">// 当获取到锁后，再次检查</span></span><br><span class="line">                <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">                <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//如果线程池在运行running&lt;shutdown 或者 线程池已经shutdown，且firstTask==null（可能是workQueue中仍有未执行完成的任务，创建没有初始任务的worker线程执行）</span></span><br><span class="line">                <span class="comment">//worker数量-1的操作在addWorkerFailed()</span></span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable   线程已经启动，抛非法线程状态异常</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                     </span><br><span class="line">                    workers.add(w);<span class="comment">//workers是一个HashSet&lt;Worker&gt;</span></span><br><span class="line">                     </span><br><span class="line">                    <span class="comment">//设置最大的池大小largestPoolSize，workerAdded设置为true</span></span><br><span class="line">                    <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                    workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="comment">//--------------------------------------------</span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//如果往HashSet中添加worker成功，启动线程</span></span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//如果启动线程失败</span></span><br><span class="line">        <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>addWorker(Runnable firstTask, boolean core)参数：    firstTask：    worker线程的初始任务，可以为空    core：           true：将corePoolSize作为上限，false：将maximumPoolSize作为上限addWorker方法有4种传参的方式：    1、addWorker(command, true)    2、addWorker(command, false)    3、addWorker(null, false)    4、addWorker(null, true)在execute方法中就使用了前3种，结合这个核心方法进行以下分析    第一个：线程数小于corePoolSize时，放一个需要处理的task进Workers Set。如果Workers Set长度超过corePoolSize，就返回false    第二个：当队列被放满时，就尝试将这个新来的task直接放入Workers Set，而此时Workers Set的长度限制是maximumPoolSize。如果线程池也满了的话就返回false    第三个：放入一个空的task进workers Set，长度限制是maximumPoolSize。这样一个task为空的worker在线程执行的时候会去任务队列里拿任务，这样就相当于创建了一个新的线程，只是没有马上分配任务    第四个：这个方法就是放一个null的task进Workers Set，而且是在小于corePoolSize时，如果此时Set中的数量已经达到corePoolSize那就返回false，什么也不干。实际使用中是在prestartAllCoreThreads()方法，这个方法用来为线程池预先启动corePoolSize个worker等待从workQueue中获取任务执行执行流程：1、判断线程池当前是否为可以添加worker线程的状态，可以则继续下一步，不可以return false：    A、线程池状态&gt;shutdown，可能为stop、tidying、terminated，不能添加worker线程    B、线程池状态==shutdown，firstTask不为空，不能添加worker线程，因为shutdown状态的线程池不接收新任务    C、线程池状态==shutdown，firstTask==null，workQueue为空，不能添加worker线程，因为firstTask为空是为了添加一个没有任务的线程再从workQueue获取task，而workQueue为空，说明添加无任务线程已经没有意义2、线程池当前线程数量是否超过上限（corePoolSize 或 maximumPoolSize），超过了return false，没超过则对workerCount+1，继续下一步3、在线程池的ReentrantLock保证下，向Workers Set中添加新创建的worker实例，添加完成后解锁，并启动worker线程，如果这一切都成功了，return true，如果添加worker入Set失败或启动失败，调用addWorkerFailed()逻辑</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><a href="http://www.cnblogs.com/trust-freedom/p/6681948.html" target="_blank" rel="noopener">http://www.cnblogs.com/trust-freedom/p/6681948.html</a></p><h1 id="submit与execute的区别"><a href="#submit与execute的区别" class="headerlink" title="submit与execute的区别"></a>submit与execute的区别</h1><p><a href="https://blog.csdn.net/peachpi/article/details/6771946" target="_blank" rel="noopener">https://blog.csdn.net/peachpi/article/details/6771946</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/v2-11c74576109d3e7f5e99b4c18c488170_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程的原理与使用&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaSE" scheme="http://abelchao.com/categories/JavaSE/"/>
    
    
      <category term="JavaSE" scheme="http://abelchao.com/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>多态的实现原理</title>
    <link href="http://abelchao.com/2018/05/08/%E5%A4%9A%E6%80%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://abelchao.com/2018/05/08/多态的实现原理/</id>
    <published>2018-05-08T01:00:00.000Z</published>
    <updated>2018-05-08T03:44:18.541Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/369917882746482594.jpg" alt=""></p><p><strong>多态的实现原理</strong><br><a id="more"></a></p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><pre><code>要说多态，就要先从方法调用开始说起。如何在编译期（重载）和运行期（重写）去找到执行的方法版本。方法区中有编译后的Class文件里面存的可都是符号引用，而不是方法实际运行时内存分布的入口地址（直接引用）！！！</code></pre><h1 id="解析（静态解析）"><a href="#解析（静态解析）" class="headerlink" title="解析（静态解析）"></a>解析（静态解析）</h1><pre><code>所有方法调用中的目标方法在Class文件中都只是一个常量池中的符号引用，在类加载的解析阶段，会将其中一部分符号在这个阶段就转换成直接引用。这种类加载解析阶段转换的成立条件就是：编译期可知，运行期不可变。主要包括静态方法和私有方法，前者和类型直接关联，后者在外部不可被访问。其实还有final方法。就是说这三种方法都不可能通过继承或别的方式重写其他版本，所有适合在类加载的解析阶段进行符号引用到直接引用的转换（这个过程也叫做解析）JVM中有5条调用字节码指令：invokestatic，invokespecial，invokevirtual，invokeinterface，invokedynamic只要能被invokestatic和invokesspecial指令调用的方法，都可以在解析阶段中确定唯一的调用版本。非虚方法：静态方法，构造器，私有方法，父类方法，final方法注意一下，final方法还是被invokevirtual修饰的，只不过是不能被重写，因此确定了唯一性。解析调用一定是个静态的过程，在编译器就被完全确定了，在类加载的解析阶段就会把涉及的符号引用全部转换成可确定的直接引用，不会延迟到运行期去进行。分派调用分为了静态和动态。我们这里解析和分派，不是一个二选一的过程，这两个是在不同层次上去筛选，确定目标方法的过程。静态方法选择重载的过程也是在编译期间利用静态分派完成的。</code></pre><h1 id="分派"><a href="#分派" class="headerlink" title="分派"></a>分派</h1><h2 id="静态分派"><a href="#静态分派" class="headerlink" title="静态分派"></a>静态分派</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticDispatch</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Human guy)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"human --- guy"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Man man)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"man --- gentleman"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Woman woman)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"woamn --- lady"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Human man = <span class="keyword">new</span> Man();<span class="comment">//静态类型是Human，实际类型是Man</span></span><br><span class="line">Human woman = <span class="keyword">new</span> Woman();<span class="comment">//静态类型是Human，实际类型是Woman</span></span><br><span class="line">StaticDispatch sd = <span class="keyword">new</span> StaticDispatch();</span><br><span class="line">sd.say(man);</span><br><span class="line">sd.say(woman);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">human --- guy</span></span><br><span class="line"><span class="comment">human --- guy</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticOverload</span> </span>&#123;</span><br><span class="line"><span class="comment">//public static void say(char arg)&#123;</span></span><br><span class="line"><span class="comment">//System.out.println("char");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//public static void say(int arg)&#123;</span></span><br><span class="line"><span class="comment">//System.out.println("int");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//public static void say(long arg)&#123;</span></span><br><span class="line"><span class="comment">//System.out.println("long");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//public static void say(Character arg)&#123;</span></span><br><span class="line"><span class="comment">//System.out.println("Character");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//public static void say(Serializable arg)&#123;</span></span><br><span class="line"><span class="comment">//System.out.println("Serializable");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//public static void say(Object arg)&#123;</span></span><br><span class="line"><span class="comment">//System.out.println("Object");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(<span class="keyword">char</span>... arg)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"char..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Integer arg)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Integer"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Long arg)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Long"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">say(<span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>1. 重载时，编译器根据参数的静态类型来确定方法入口。2. char--&gt;int--&gt;long--&gt;Character--&gt;Serializable--&gt;Object--&gt;char..    1. char，int，long属于基本数据类型的自动向上转型    2. Character是char的自动装箱    3. Serializable是Character实现的一个接口，因为找不到装箱的类，但是找到了装箱类实现的接口，所以紧接着就又发生了一次自动转型。    但是为什么Character没有转成Integer呢，这可是对象啊，对象哪有什么自动转换，又不是子父类关系。    需要注意的是，Character还有一个接口Comparable&lt;Character&gt;，一旦又出现了这个参数的重载，由于优先级一致，编译器就会报错了。    4. Object子父类关系（继承关系是从下往上搜索的，上层的优先级低）    5. 可变参数的数组</code></pre><h2 id="动态分派"><a href="#动态分派" class="headerlink" title="动态分派"></a>动态分派</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDispatch</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Human human)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"human"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Human human)</span></span>&#123;<span class="comment">//Man man</span></span><br><span class="line">System.out.println(<span class="string">"man"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Human human)</span></span>&#123;<span class="comment">//Woman woman</span></span><br><span class="line">System.out.println(<span class="string">"woman"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Human man = <span class="keyword">new</span> Man();</span><br><span class="line">Human woman = <span class="keyword">new</span> Woman();</span><br><span class="line">man.say(man);</span><br><span class="line">woman.say(woman);</span><br><span class="line">man = <span class="keyword">new</span> Woman();</span><br><span class="line">man.say(man);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">man</span></span><br><span class="line"><span class="comment">woman</span></span><br><span class="line"><span class="comment">woman</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><pre><code>1. 实际参数不同2. invokevirtual指令的多态查找    1. 找到操作数栈顶的第一个元素所指向的对象的实际类型，记为C。    2. 如果在类型C中找到与常量中描述符和简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束。    3. 否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索。    4. 如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常。3. 重写的本质也就是把Class文件中常量池中的符号引用在运行期解析到了不同的直接引用上。</code></pre><h2 id="动态分配的实现"><a href="#动态分配的实现" class="headerlink" title="动态分配的实现"></a>动态分配的实现</h2><p><a href="https://blog.csdn.net/sinat_34311901/article/details/52208124" target="_blank" rel="noopener">https://blog.csdn.net/sinat_34311901/article/details/52208124</a></p><pre><code>动态分派比较频繁，同时动态分派的方法版本选择过程需要在运行时在类的方法元数据中搜索合适的目标方法。最常用的稳定优化说就是在方法区来一个虚方法表（vtable/itable），使用虚方法表索引来代替元数据查找以提高性能。虚方法表中存放着各个方法的实际入口地址。如果子类没有实现父类的方法，那么子类和父类的入口地址一样。</code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String staticStr = <span class="string">"A's static field"</span>; </span><br><span class="line">    <span class="keyword">public</span> String nonStaticStr = <span class="string">"A's nonstatic field"</span>; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"A's static method"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nonStaticMethod</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"A's nonstatic method"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String staticStr = <span class="string">"B's static field"</span>; </span><br><span class="line">    <span class="keyword">public</span> String nonStaticStr = <span class="string">"B's nonstatic field"</span>; <span class="comment">//super.nonStaticStr;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"B's static method"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOverride</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        C c = <span class="keyword">new</span> C(); </span><br><span class="line">        System.out.println(c.nonStaticStr);  <span class="comment">//A's nonstatic field</span></span><br><span class="line">        System.out.println(c.staticStr);  <span class="comment">//A's static field</span></span><br><span class="line">        c.staticMethod(); <span class="comment">//A's static method</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"-------------------------------"</span>); </span><br><span class="line">           </span><br><span class="line">        A c1 = <span class="keyword">new</span> C(); </span><br><span class="line">        System.out.println(c1.nonStaticStr);  <span class="comment">//A's nonstatic field</span></span><br><span class="line">        System.out.println(c1.staticStr);  <span class="comment">//A's static field</span></span><br><span class="line">        c1.staticMethod(); <span class="comment">//A's static method</span></span><br><span class="line">          </span><br><span class="line">        <span class="comment">// 以上这说明java中静态属性和静态方法可以被继承</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"-------------------------------"</span>); </span><br><span class="line">        B b = <span class="keyword">new</span> B(); </span><br><span class="line">        System.out.println(b.nonStaticStr); <span class="comment">// B's nonstatic field</span></span><br><span class="line">        System.out.println(b.staticStr);   <span class="comment">//B's static field</span></span><br><span class="line">        b.staticMethod();  <span class="comment">//B's static method</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"-------------------------------"</span>); </span><br><span class="line">        A b1 = <span class="keyword">new</span> B(); </span><br><span class="line">        System.out.println(b1.nonStaticStr);  <span class="comment">//A's nonstatic field</span></span><br><span class="line">        System.out.println(b1.staticStr);  <span class="comment">//A's static field</span></span><br><span class="line">        b1.staticMethod(); <span class="comment">//A's static method</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>1. 静态方法，属性可以继承，但是不能被重写（形式上的重写其实是隐藏）2. 属性都是不能被重写的，因为Java中属性依赖的是同名属性依赖机制：具有父子关系的两个类中，子类中相同名字的属性会失去从父类中继承的数据，不管两个属性的类型是否一致，只要重名，就隐藏父类的。3. 一般不要用实例对象去调用静态方法。（容易混淆）</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;?&gt;[] collections = &#123;<span class="keyword">new</span> HashSet&lt;String&gt;(), <span class="keyword">new</span> ArrayList&lt;String&gt;(), <span class="keyword">new</span> HashMap&lt;String, String&gt;().values()&#125;;</span><br><span class="line">        Super subToSuper = <span class="keyword">new</span> Sub();</span><br><span class="line">        <span class="keyword">for</span>(Collection&lt;?&gt; collection: collections) &#123;</span><br><span class="line">        System.out.println(subToSuper.getType(collection));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getType</span><span class="params">(Collection&lt;?&gt; collection)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Super:collection"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getType</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Super:list"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(ArrayList&lt;?&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Super:arrayList"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getType</span><span class="params">(Set&lt;?&gt; set)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Super:set"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(HashSet&lt;?&gt; set)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Super:hashSet"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getType</span><span class="params">(Collection&lt;?&gt; collection)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Sub"</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Super:collection</span></span><br><span class="line"><span class="comment">Super:collection</span></span><br><span class="line"><span class="comment">Super:collection</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><pre><code>1. 静态方法没有被重写，只是被覆盖了，所有调用的还是父类的getType(Collection&lt;?&gt; collection) 2. 同时数组的类型是Collection，也就是说静态类型被确定了，剩下都是静态解析和静态分配（重载）做的事情，而重载看的又只是静态类型，那么走的都是getType(Collection&lt;?&gt; collection)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;?&gt;[] collections = &#123;<span class="keyword">new</span> LinkedList&lt;String&gt;(), <span class="keyword">new</span> ArrayList&lt;String&gt;()&#125;;</span><br><span class="line">        Super subToSuper = <span class="keyword">new</span> Sub();</span><br><span class="line">        <span class="keyword">for</span>(List&lt;?&gt; collection: collections) &#123;</span><br><span class="line">        System.out.println(subToSuper.getType(collection));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getType</span><span class="params">(Collection&lt;?&gt; collection)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Super:collection"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getType</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Super:list"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(ArrayList&lt;?&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Super:arrayList"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getType</span><span class="params">(Set&lt;?&gt; set)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Super:set"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(HashSet&lt;?&gt; set)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Super:hashSet"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getType</span><span class="params">(Collection&lt;?&gt; collection)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Sub"</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getType</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Sub:list"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Super:list</span></span><br><span class="line"><span class="comment">Super:list</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/369917882746482594.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多态的实现原理&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaSE" scheme="http://abelchao.com/categories/JavaSE/"/>
    
    
      <category term="JavaSE" scheme="http://abelchao.com/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>操作系统基础复习</title>
    <link href="http://abelchao.com/2018/05/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <id>http://abelchao.com/2018/05/04/操作系统基础复习/</id>
    <published>2018-05-04T01:00:00.000Z</published>
    <updated>2018-07-20T03:19:18.885Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/576858003667931605.jpg" alt=""></p><p><strong>操作系统基础复习</strong><br><a id="more"></a></p><h1 id="之前的总结"><a href="#之前的总结" class="headerlink" title="之前的总结"></a>之前的总结</h1><p><a href="http://bbblemon.top/2017/12/28/Operating%20System%EF%BC%88%E5%BC%95%E8%AE%BA&amp;%E8%BF%9B%E7%A8%8B&amp;%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%EF%BC%89/" target="_blank" rel="noopener">http://bbblemon.top/2017/12/28/Operating%20System%EF%BC%88%E5%BC%95%E8%AE%BA&amp;%E8%BF%9B%E7%A8%8B&amp;%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%EF%BC%89/</a></p><p><a href="http://bbblemon.top/2018/01/08/Operating%20System%EF%BC%88%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86&amp;%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%89/" target="_blank" rel="noopener">http://bbblemon.top/2018/01/08/Operating%20System%EF%BC%88%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86&amp;%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%89/</a></p><h1 id="操作系统的特性"><a href="#操作系统的特性" class="headerlink" title="操作系统的特性"></a>操作系统的特性</h1><pre><code>1. 并发：同一时段内多个程序执行（并行说的是某一时刻有多个事件发生了，并发说的是某个时间段，微观上是多个事件交替进行，交替占用CPU）2. 共享：系统中的资源可以被内存中多个并发执行的进线程共同使用。3. 虚拟：通过时分复用（如分时系统）以及空分复用（如虚拟内存）技术实现把一个物理实体虚拟为多个4. 异步：系统中的进程是以走走停停的方式执行的，且以一种不可预知的速度推进。并发和共享是多用户OS的两个最基本特性。又互为存在条件。资源的共享是以并发为前提的，资源共享如果无法有效管理，影响并发。</code></pre><h1 id="操作系统的分类"><a href="#操作系统的分类" class="headerlink" title="操作系统的分类"></a>操作系统的分类</h1><pre><code>1. 批处理：批处理系统旨在提高系统资源的利用率和系统吞吐量。    1. 单批道：系统虽然对作业的处理是成批的，但是在内存中却始终只有一道作业。    2. 多批道：系统利用作业调度算法，从外存中一次取若干个作业调入内存，使它们共享CPU和系统中的资源。利用一个作业I/O的时间，在CPU上执行另一个作业。特点：资源利用率高，系统吞吐量大，平均周转时间长，无交互能力。2. 分时：批处理是为了提高资源利用率和系统吞吐量，分时是为了满足人-机交互。分时系统说的是，一台主机上连接了多个配有显示器和键盘的终端并由此组成的系统。该系统允许多个用户同时通过自己的终端，以交互方式使用计算机，共享主机的资源。多道批处理是把作业都先驻留在了外存上，即使被调如内存，也要经过较长时间的等待后才能运行，也就失去了交互性。分时的人-机交互，关键就在这个交互与系统及时接收，处理，返回结果。    1. 及时接收：利用多路卡，实现分时多路复用。主机以很快的速度周期性的扫描各个终端，在每个终端处停留的时间很短，用来接收各个终端的数据。    2. 及时处理：        1. 作业直接进入内存。（批处理是现在外存的）        2. 采用轮转运行方式。（时间片，一段很短的时间，每个作业每次只能运行一个时间片，然后就暂停该作业的运行，立即调度下一个作业运行）特点：多路性，独立性，及时性，交互性。3. 实时：计算机能及时响应外部时间的i去年请求，在规定的严格时间内完成对该事件的处理，并控制所有实时设备和任务协调一致的工作。实时系统追求的目标就是对外部请求在严格时间范围内做出反应，有高可靠性和完整性。资源的分配和调度首先考虑的是实时性然后才是效率。分类：    1. 周期实时任务和非周期实时任务    2. 硬实时任务和软实时任务特点：多路性，独立性，及时性，交互性，可靠性。4. 网络和分布式</code></pre><h1 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h1><pre><code>1. 处理机管理：处理机分配是以进程为单位的，处理机管理也被看作进程管理。处理机的管理主要是，将作业调入内存，为其创建，撤销进程，控制进程的运行过程，实现进程通信，和为进程分配处理机。    1. 进程控制：每道作业都需要一个或者多个进程，进程控制就是创建，撤销进程和控制进程在运行过程中的状态转换。    2. 进程同步：为多个进程的运行进行协调。协调方式        1. 进程互斥，进程在对临界资源访问时，采用互斥的方式。最常用的就是给每个临界资源加锁。        2. 进程同步，相互协作去完成共同任务的进程间，利用同步机构对这些进程的执行次序进行控制。最常用的进程同步机制就是信号量机制。    3. 进程通信：        https://www.cnblogs.com/LUO77/p/5816326.html    4. 调度：        1. 作业调度：从后备队列中按照一定的算法选择若干作业，为它们分配运行时需要的资源，再将这些作业调入内存后，分别为它们建立进程，使它们都能称为可能获得处理机的就绪进程，并将它们插入就绪队列中。        2. 进程调度：从进程就绪队列中按照算法选一个进程，将处理机分配给它，并为它设置运行现场。2. 存储器管理为多道程序提供良好的环境，提高存储器的利用率，方便用户使用，逻辑上扩充内存。    1. 内存分配：为每道程序分配内存，提高存储器的利用率，尽量减少碎片，允许正在运行的程序申请附加的内存空间。    内存分配的方式：        1. 静态：每个作业的内存空间在作业装入内存时确定，运行期间不可修改，作业不允许在内存中移动。        2. 动态：每个作业的内存空间在作业装入内存的时候只是确定一个基本量，在运行时允许扩充，允许作业在内存中移动。    2. 内存保护：内存保护机制，简单的就是设置两个界限寄存器，分别放在正在执行程序的上下界。        1. 每道程序都只能在自己的内存空间运行        2. 用户程序禁止访问OS程序和数据，也不允许用户程序转移到非共享的其他用户程序中去执行。    3. 地址映射：每道程序编译和链接后所形成的可装入程序其地址都是从0开始的，但是不可能将它们从0这个物理地址装入，地址映射也就是把地址空间中的逻辑地址转换成内存空间中与之对应的物理地址。    4. 内存扩充：虚拟存储        1. 请求调入：系统可以在仅装入一部分用户程序和数据的情况下运行，后面需要了再调入        2. 置换功能：内存中没有足够的空间调入程序和数据，系统将内存中一部分暂时不用的程序和数据调至硬盘上，然后腾出内存空间，把需要用的再调入内存。3. 设备管理    1. 完成用户进程提出的I/OC请求。    2. 提高CPU与I/O设备的利用率。    1. 缓冲管理：I/O设备和CPU运行速度的不匹配，之间设置高速缓冲区。        单缓冲机制，双缓冲机制，公用缓冲池机制    2. 设备分配：为程序的I/O请求分配I/O设备。    3. 设备处理：实现CPU和设备控制器之间的通信，CPU向设备控制器发送I/O命令，设备控制器发送中断请求给CPU。4. 文件管理对用户文件和系统文件进行管理，以方便用户使用，并保证文件的安全性。    1. 文件存储空间的管理    2. 目录管理    3. 文件的读写管理与保护5. 提供用户接口    1. 程序接口，API    2. 用户接口，GUI</code></pre><h1 id="进程的状态与转换"><a href="#进程的状态与转换" class="headerlink" title="进程的状态与转换"></a>进程的状态与转换</h1><p><a href="http://bbblemon.top/2017/12/28/Operating%20System%EF%BC%88%E5%BC%95%E8%AE%BA&amp;%E8%BF%9B%E7%A8%8B&amp;%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%EF%BC%89/" target="_blank" rel="noopener">http://bbblemon.top/2017/12/28/Operating%20System%EF%BC%88%E5%BC%95%E8%AE%BA&amp;%E8%BF%9B%E7%A8%8B&amp;%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%EF%BC%89/</a></p><h1 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h1><pre><code>1. 调度单元：进程是可拥有系统资源的基本单位，线程调度和分配的基本单元（能独立运行的基本单元）2. 并发性：线程是轻量级的进程，一个进程中多个线程并发执行3. 拥有资源：不管有没有线程，进程都是拥有系统资源的解基本单位。而线程本身不拥有系统资源，而只有又一点不可少的，能保证独立运行的资源（TCB,程序计数器，保留局部变量，少数状态参数和返回地址等一组寄存器和堆栈）4. 独立性：进程只有自己独立空间和其他资源，除了共享全局变量外，不允许其他进程访问。而同一进程的所有线程可以访问所属进程空空间中的所有地址。5. 系统开销：创建，切换，撤销进程的开销大注意：一个进程中至少又一个线程，CPU上可以没有正在运行的进程。一个线程只属于某一个特定的进程。</code></pre><h1 id="进程描述"><a href="#进程描述" class="headerlink" title="进程描述"></a>进程描述</h1><pre><code>一个进程就是一个完成程序的一次执行。为了使参与并发的程序可以独立运行，引入了PCB。程序段，相关数据段，PCB三部分组成了进程实体。创建进程，其实就是创建PCB。PCB是进程存在的唯一标识进程的其他定义:    1. 进程是程序的一次执行    2. 进程是一个程序及其数据在处理机上顺序执行时所发生的活动。    3. 进程是系统进行资源分配和调度的一个独立单元。进程的特征：动态性，并发性，独立性，异步性。</code></pre><h2 id="PCB（Process-Control-Block）"><a href="#PCB（Process-Control-Block）" class="headerlink" title="PCB（Process Control Block）"></a>PCB（Process Control Block）</h2><pre><code>PCB作为进程实体的一部分，记录了操作系统所需的，用于描述当前进程情况已经管理进程的一切信息。PCB的作用是在多道程序的环境下，让不能独立运行的程序成为一个独立运行的基本单位。</code></pre><h1 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h1><pre><code>1. 进程申请空白PCB，并向PCB中填写控制和管理进程的信息2. 为进程分配运行时需要的资源，包括逻辑和物理的3. 进程转入就绪状态并插入就绪队列注意：进程不能拒绝其子进程的继承。但是也存在没有父进程的进程。在WindowOS中不存在任何进程层次结构的概念，也就是说，所有的进程都是相同的地位。</code></pre><h1 id="线程描述"><a href="#线程描述" class="headerlink" title="线程描述"></a>线程描述</h1><pre><code>在OS中引入进程的目的是为了在多道环境下，多个进程并发执行，以提高资源利用率和系统吞吐量。那么引入线程就是为了减小程序在并发执行时所付出的时空开销，让OS具有更好的并发性。</code></pre><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><pre><code>1. 线程标识符，每个线程是唯一的。2. 一组寄存器：程序计数器PC、状态寄存器、通用寄存器3. 线程运行状态4. 优先级5. 线程专有存储区，用于线程切换时存放现场保护信息6. 信号屏蔽7. 堆栈指针，每个线程有自己的堆栈，用来保存局部变量和返回地址，而TCB中也就有了两个对应的指向堆栈的指针：指向用户自己堆栈的指针（线程运行在目态）和指向核心栈的指针（线程运行在管态）。</code></pre><h1 id="进程-线程通信"><a href="#进程-线程通信" class="headerlink" title="进程/线程通信"></a>进程/线程通信</h1><p><a href="https://www.cnblogs.com/LUO77/p/5816326.html" target="_blank" rel="noopener">https://www.cnblogs.com/LUO77/p/5816326.html</a></p><pre><code>Linux线程间通信：互斥量（mutex），信号量，条件变量Windows进程间通信：管道、有名管道、消息队列、共享内存、信号量（semaphore）、套接字(socket)Windows线程间通信：互斥量（mutex），信号量（semaphore）、临界区（critical section）、事件（event）整形信号量定义为一个用于表示资源数目的整形量S，除了初始化外，只能通过两个标准的原子操作wait（P）、Singal（V）来操作。其实就是说，S等于多少，就代表现在还有几个空闲的资源，为负数就说明没有了，还有线程在等待资源。但是信号量不能用于大批数据交换。管道是一种半双工的通信方式，数据只能单向流动，而且只能在有亲缘关系的进程中使用有名管道也是一种半双工的通信方式，但是它允许无亲缘关系进程间的通信。</code></pre><h1 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h1><pre><code>多进程虽然提高了系统资源利用率和吞吐量，但是由于进程的异步性可能造成系统的混乱。进程同步的任务就是对多个相关进程在执行顺序上进行协调，使并发执行的多个进程之间可以有效的共享资源和相互合作，保证程序执行的可再现性临界区：每个进程中访问临界资源的代码就是临界区。同步机制需要遵循的规则    1. 空闲让进：当没有进程处于临界区的时候，应该许可其他进程进入临界区的申请。    2. 忙则等待：当前如果有进程处于临界区，如果有其他进程申请进入，则必须等待，保证对临界区的互斥访问    3. 有限等待：对要求访问临界资源的进程，需要在有限时间内进入临界区，防止出现死等    4. 让权等待：当进程无法进入临界区的时候，需要释放处理机，边陷入忙等。</code></pre><h1 id="进程同步的解决"><a href="#进程同步的解决" class="headerlink" title="进程同步的解决"></a>进程同步的解决</h1><pre><code>进程同步：为多个进程的运行进行协调。协调方式    1. 进程互斥，进程在对临界资源访问时，采用互斥的方式。最常用的就是给每个临界资源加锁。    2. 进程同步，相互协作去完成共同任务的进程间，利用同步机构对这些进程的执行次序进行控制。最常用的进程同步机制就是信号量机制。</code></pre><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><pre><code>利用信号量实现进程互斥为使多个进程互斥地访问某临界资源，只需要为该资源设置-互斥信号量mutex，并设其值为1。利用信号量实现两个进程互斥的描述如下:设mutex为互斥信号量，其值为1，取值范围（-1，0，1）    1. mutex=1，两个进程都没有进入需要互斥的临界区    2. mutex=0，表示有一个进程进入临界区运行，另一个必须等待，挂入阻塞队列。    3. mutex=-1，表示有一个进程进入了临界区，另一个进程因等待而阻塞在信号量队列中，需要在被当前已在临界区运行的进程退出时唤醒。在利用信号量机制实现进程互斥的时候，wait(mutex)和signal(mutex)必须成对的出现。缺少wait(mutex)不能保证对临界资源的互斥访问，缺少signal(mutex)，会使临界资源永远不被释放。</code></pre><h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><pre><code>管程包含了面向对象的思想，它将表征共享资源的数据结构及其对数据结构操作的一组过程，封装到了一个对象内部，隐藏了实现细节。进程要访问临界资源的时候，都只能通过管程间接访问，而管程每次只允许一个进程进入。</code></pre><h1 id="用户态（目态）和核心态（系统态，管态）"><a href="#用户态（目态）和核心态（系统态，管态）" class="headerlink" title="用户态（目态）和核心态（系统态，管态）"></a>用户态（目态）和核心态（系统态，管态）</h1><pre><code>CPU的工作方式分为管态和目态，在管态方式CPU可以执行特权指令，而目态只能执行非特权指令。从用户态到管态：    使用特权指令，而不是系统调用，能进行系统调用，说明已经在管态了。用户态执行特权指令，肯定是非法的，要发生中断，而中断处理程序都是在管态的，中断一定能使系统从用户态转为管态。</code></pre><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><pre><code>一组进程中的每一个进程都在等待仅由该组进程中的其他进程才能引发的事件，那么这组进程是死锁的。1. 死锁的必要条件    1. 互斥条件：某个资源在一段时间内只能由一个进程占有。    2. 请求和保持条件：进程自己占有一个资源，同时对别的资源进行了请求，而这个资源被其他进程占有着。    3. 不可抢占条件:进程已经获取的资源在未使用完前不能被抢占。    4. 循环等待条件:存在一个进程-资源的循环链。2. 死锁的处理    1. 预防死锁：因为互斥条件是非共享设备必须的，所以一般都是破坏死锁的后三个条件。        1. 破坏请求保持：进程在请求资源时，不能持有不可抢占的资源。（静态资源分配法）        2. 破坏不可抢占：一个进程已占有某些不可抢占的资源，但是它又请求了资源，且不能被满足，这个进程就必须释放所有自己资源。（剥夺分配法）        3. 破坏循环等待：给资源事先分类编号，使进程在申请资源的时候，必须按照序号递增的顺序请求。（资源有序分配）    2. 避免死锁：在资源动态分配的过程中，用某种方法防止系统进入不安全状态。    安全状态一定不死锁，不安全状态不一定死锁。    3. 检测死锁：允许进程在运行的过程中死锁，但是可以检测出来，然后利用解除死锁的方法进行接触。（资源分配图法）    4. 解除死锁：        1. 抢占资源：从一个或者多个进程中抢占足够数量的资源，分配给死锁进程。        2. 终止进程：终止系统中一个或者多个死锁进程，直到打破循环环路。            1. 终止所有死锁进程            2. 逐个终止进程</code></pre><h1 id="线程同步与阻塞的关系？"><a href="#线程同步与阻塞的关系？" class="headerlink" title="线程同步与阻塞的关系？"></a>线程同步与阻塞的关系？</h1><p><a href="https://www.cnblogs.com/Anker/p/5965654.html" target="_blank" rel="noopener">https://www.cnblogs.com/Anker/p/5965654.html</a></p><pre><code>1. 线程同步和阻塞没有一点关系2. 同步和异步关注的是消息通信机制。    1. 同步：执行一个操作，等待结果返回后，才能继续后续的操作。    2. 异步：执行一个操作，不需要等到结果返回，就可以执行别的操作，等到结果返回了，再去执行后续操作3. 阻塞和非阻塞关注的是程序在等得调用结果时的状态。    1. 阻塞：进程给CPU传达一个任务后，等待CPU处理完以后，才执行后面的。    2. 非阻塞：进程给CPU任务后，继续执行后续操作，隔断时间再来询问之前的操作是不是完成了。（轮询）异步必然是非阻塞的。</code></pre><h1 id="作业-进程调度算法"><a href="#作业-进程调度算法" class="headerlink" title="作业/进程调度算法"></a>作业/进程调度算法</h1><pre><code>1. 先来先服务（FCFS，First-come First-Served）：作业/进程调度算法（作业/进程后备队列）。长作业有利。2. 短作业优先（SJF，Short Job First）：作业/进程调度算法（作业/进程后备队列）。短作业有利。    1. 必须预知作业/进程的运行时间    2. 对长作业不利，出现饥饿现象    3. 人-机无法交互3. 优先级调度（PSA，Priority-Scheduling Algorithm）： 作业/进程调度算法（作业/进程后备队列）。人为给作业/进程给了优先级4. 高响应比（HRRN，Highest Response Ratio Next）：作业/进程调度算法（作业/进程后备队列）。响应比=（等待时间+要求服务时间）/要求服务时间。    1. 响应时间=等待时间+要求服务时间    2. 周转时间=作业提交---&gt;作业完成5. 轮转调度（RR，Round Robin）：分时系统中中基于时间片的调度。（进程调度）按到达的先后将进程放入队列中（FCFS），然后给队首进程分配CPU时间片，时间片用完之后计时器发出中断，暂停当前进程并将其放到队列尾部，循环;一旦时间片内进程结束，直接将其从就绪队列中删除，引入新的队首进程。6. 优先级调度    1. 非抢占    2. 抢占如何确定优先级：    1. 静态：创建进程时确定，进程运行过程中不变    2. 动态：随着进程的推进和等待时间的增加而改变7. 多队列调度：将系统中进程就绪队列从一个拆成多个，每个就绪队列采用不同的调度算法。8. 多级反馈队列（Multileved Feedback Queue）    1. 设置多个就绪队列，每个队列又不同的优先级，第一个队列的最高，以此递减。优先级越高的队列分配的时间片越短。    2. 每个队列使用FCFS算法，进程到达之后按FCFS放入第一个队列尾部，如果调度执行（时间片内）没有完成，那么放到第二个队列尾部等待调度，如果第二次调度仍然没有完成，放入第三队列尾部…。    3. 按照队列优先级调度，只有当前一个队列为空的时候才会去调度下一个队列的进程。</code></pre><h1 id="内存的连续分配"><a href="#内存的连续分配" class="headerlink" title="内存的连续分配"></a>内存的连续分配</h1><pre><code>1. 单一连续分配：单道程序环境中，存储器管理方式把内存分为系统区和用户区两部分。系统区给OS使用，它通常是放在内存的低址部分，而用户区内存中，仅装有一道用户程序。整个内存的用户空间被该程序独占。2. 固定分区分配：对用户空间分区，然后每个区放一道程序。3. 动态分区分配    1. 数据结构：空闲分区表，空闲分区链    2. 动态分区分配算法：顺序式搜索，索引式搜索        1. 顺序式搜索：            1. 首次适应（FF,First Fit）：空闲分区使用地址递增的次序链接。分配内存时，每次都是从链首开始，直到找到一个大小适合的内存。            2. 循环首次适应（NF,Next Fit）：分配内存的时候，不再每次从链首开始，减少了没有比较的查找，而是从上次找到的空闲分区的下一个空闲分区开始。            3. 最佳适应（BF，Best Fit）：空闲分区按照其容量从小到大顺序形成。            4. 最坏适应（WF，Worst Fit）：空闲分区以容量递减的次序链接。找到第一个能满足要求的空闲分区，也就是挑选出最大的分区。        2. 索引式搜索：            1. 快速适应（QT，Quick Fit）            2. 伙伴系统（BS，Buddy System）            3. 哈希算法（Hash）    3. 分区操作：分配内存，回收内存。4. 动态可重定位分区分配    1. 紧凑    2. 动态重定位：内存地址=相对地址+重定位寄存器地址在内存连续分配中，固定分区会产生内部碎片，动态分区会产生外部碎片。</code></pre><h1 id="对换"><a href="#对换" class="headerlink" title="对换"></a>对换</h1><pre><code>1. 把内存中暂时不能运行的进程，或者暂时不能使用的程序和数据换出到外存上，然后把已经具备运行条件的进程或进程所需要的程序换入内存。2. 对换可以直接提高处理机的利用率和系统的吞吐量。</code></pre><h1 id="内存的离散分配（基础的分页，分段）"><a href="#内存的离散分配（基础的分页，分段）" class="headerlink" title="内存的离散分配（基础的分页，分段）"></a>内存的离散分配（基础的分页，分段）</h1><p><a href="http://bbblemon.top/2018/01/08/Operating%20System%EF%BC%88%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86&amp;%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%89/" target="_blank" rel="noopener">http://bbblemon.top/2018/01/08/Operating%20System%EF%BC%88%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86&amp;%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%89/</a></p><pre><code>内存连续分配会会形成很多的碎片，就算是有&quot;紧凑的方式&quot;，但是开销特别大，为了把一个进程直接分散的装入许多不连续的分区中，有了离散分配。离散分配允许一个程序分散地装入到不相邻的内存分区中，根据分区的大小是否固定（分配地址的基本单位不同）分为分页存储管理方式和分段存储管理方式。</code></pre><h2 id="基本分页存储管理"><a href="#基本分页存储管理" class="headerlink" title="基本分页存储管理"></a>基本分页存储管理</h2><pre><code> 分页：把用户程序分成若干固定大小的区域，称为&quot;页&quot;或&quot;页面&quot;，相应的把内存空间也分为若干个物理块或页框。页和块大小相同。1)页面和页面大小。进程中的块称为页(Page)，内存中的块称为页框（Page Frame，或页帧）。外存也以同样的单位进行划分，直接称为块(Block)。进程在执行时需要申请主存空间，就是要为每个页面分配主存中的可用页框，这就产生了页和页框的一一对应。为方便地址转换，页面大小应是2的整数幂。2)地址结构        页号+页内位移量（页内地址）    若一个逻辑地址空间中的地址是A，页面大小是L，页号是P，页内地址是d，则P=A/L,d=A%L。3)页表。为了便于在内存中找到进程的每个页面所对应的物理块，系统为每个进程建立一张页表，记录页面在内存中对应的物理块号，页表一般存放在内存中。在配置了页表后，进程执行时，通过查找该表，即可找到每页在内存中的物理块号。可见，页表的作用是实现从页号到物理块号的地址映射。</code></pre><h2 id="基本分段存储管理"><a href="#基本分段存储管理" class="headerlink" title="基本分段存储管理"></a>基本分段存储管理</h2><pre><code>分页管理方式是从计算机的角度考虑设计的，以提高内存的利用率，提升计算机的性能, 且分页通过硬件机制实现，对用户完全透明；而分段管理方式的提出则是考虑了用户和程序员，以满足方便编程、信息保护和共享、动态增长及动态链接等多方面的需要。段式管理方式按照用户进程中的自然段划分逻辑空间。例如，用户进程由主程序、两个子程序、栈和一段数据组成，于是可以把这个用户进程划分为5个段，每段从0 开始编址，并分配一段连续的地址空间（段内要求连续，段间不要求连续，因此整个作业的地址空间是二维的）。其逻辑地址由段号S与段内偏移量W两部分组成。在页式系统中，逻辑地址的页号和页内偏移量对用户是透明的（不可见），但在段式系统中，段号和段内偏移量必须由用户显示提供，在髙级程序设计语言中，这个工作由编译程序完成。</code></pre><h2 id="基本分页和分段的区别"><a href="#基本分页和分段的区别" class="headerlink" title="基本分页和分段的区别"></a>基本分页和分段的区别</h2><pre><code>1. 页是信息的物理单位，分页是为了消除内存的碎片。分页是系统管理的行为，用户不可见。而分段的信息的逻辑单位，分段只是为了方便用户2. 页的大小固定而且只和系统有关，每个系统中只能有一种大小的页面，而段的长度不固定，由用户决定。3. 分页的用户地址是一维的，分段是二维的。</code></pre><h1 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h1><pre><code>基于局部性原理，在程序装入时，可以将程序的一部分装入内存，而将其余部分留在外存，就可以启动程序执行。在程序执行过程中，当所访问的信息不在内存时，由操作系统将所需要的部分调入内存,然后继续执行程序。另一方面，操作系统将内存中暂时不使用的内容换出到外存上，从而腾出空间存放将要调入内存的信息。这样，系统好像为用户提供了一个比实际内存大得多的存储器，称为虚拟存储器。之所以将其称为虚拟存储器，是因为这种存储器实际上并不存在，只是由于系统提供了部分装入、请求调入和置换功能后（对用户完全透明），给用户的感觉是好像存在一个比实际物理内存大得多的存储器。虚拟存储器的大小由计算机的地址结构决定，并非是内存和外存的简单相加。虚拟内存的大小=min(内存+外存，2^n),其中n为计算机的位数。在传统存储器管理方式中，一次性和驻留性。虚拟存储器管理方式中，多次性，对换性，虚拟性。虚拟性是以多次性和对换性为基础的。多次性最重要。多次性和对换性又建立在离散分配的基础上。注意：虚拟存储器的实现都是建立在离散分配存储管理方式的基础上的。</code></pre><h2 id="虚拟存储器的实现"><a href="#虚拟存储器的实现" class="headerlink" title="虚拟存储器的实现"></a>虚拟存储器的实现</h2><pre><code>1. 请求分页系统2. 请求分段系统</code></pre><h2 id="请求分页-分段存储管理方式（页面置换算法）"><a href="#请求分页-分段存储管理方式（页面置换算法）" class="headerlink" title="请求分页/分段存储管理方式（页面置换算法）"></a>请求分页/分段存储管理方式（页面置换算法）</h2><p><a href="http://bbblemon.top/2018/01/08/Operating%20System%EF%BC%88%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86&amp;%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%89/" target="_blank" rel="noopener">http://bbblemon.top/2018/01/08/Operating%20System%EF%BC%88%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86&amp;%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%89/</a></p><h1 id="磁盘与设备管理"><a href="#磁盘与设备管理" class="headerlink" title="磁盘与设备管理"></a>磁盘与设备管理</h1><p><a href="http://bbblemon.top/2018/01/09/Operating%20System%EF%BC%88%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86&amp;IO%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86%EF%BC%89/" target="_blank" rel="noopener">http://bbblemon.top/2018/01/09/Operating%20System%EF%BC%88%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86&amp;IO%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86%EF%BC%89/</a></p><h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><p><a href="http://bbblemon.top/2018/01/08/Operating%20System%EF%BC%88%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86&amp;%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%89/" target="_blank" rel="noopener">http://bbblemon.top/2018/01/08/Operating%20System%EF%BC%88%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86&amp;%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%89/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/576858003667931605.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;操作系统基础复习&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="OS" scheme="http://abelchao.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://abelchao.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络基础复习</title>
    <link href="http://abelchao.com/2018/05/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <id>http://abelchao.com/2018/05/03/计算机网络基础复习/</id>
    <published>2018-05-03T01:00:00.000Z</published>
    <updated>2018-07-20T03:19:10.010Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/662703796983558046.jpg" alt=""></p><p><strong>计算机网络基础复习</strong><br><a id="more"></a></p><h1 id="Https与Http的区别"><a href="#Https与Http的区别" class="headerlink" title="Https与Http的区别"></a>Https与Http的区别</h1><pre><code>1. http是HTTP协议运行在TCP上。所有传输的内容都是明文，客户端和服务端都无法验证对方的身份。2. https是HTTP运行在SSL/TLS之上，SSL/TLS运行在TCP上，所有传输的内容都是经过加密的，加密采用对称加密。但是对称加密的密钥用服务器方的证书进行了非对称加密。3. http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。4. http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是4435. http无状态。</code></pre><h1 id="TCP如何保证可靠传输"><a href="#TCP如何保证可靠传输" class="headerlink" title="TCP如何保证可靠传输"></a>TCP如何保证可靠传输</h1><pre><code>1. 数据包校验2. 超时重传机制3. 应答机制4. 对失序数据包重排序5. TCP还能提供流量控制。</code></pre><h1 id="三次握手与四次挥手"><a href="#三次握手与四次挥手" class="headerlink" title="三次握手与四次挥手"></a>三次握手与四次挥手</h1><p><a href="https://www.zhihu.com/question/24853633" target="_blank" rel="noopener">https://www.zhihu.com/question/24853633</a></p><pre><code>TCP连接握手，握的就是通信双方数据原点的序列号。1. seq序号：用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。2. ack确认序号：只有ACK标志位为1时，确认序号字段才有效。3. 标志位    1. URG：紧急指针（Urgent Pointer）有效    2. ACK：确认序号有效    3. PSH：接收方应该尽快将这个报文交给应用层    4. RST：重置连接    5. SYN：发起一个新连接    6. FIN：释放一个连接4. 不要将确认序号ack与ACK标志位搞混；确认方ack=发起方seq+1</code></pre><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180502203956.png" alt=""></p><pre><code>1. 第一握手，客户端发送SYN（seq，随机选取一个序列号作为自己的初始序号）（Synchronize Sequence Numbers）包到服务器，并进入SYN_SNET状态，等待服务器确认。2. 第二次握手，服务器收到seq包，必须确认客户的seq，使用ack对A的数据包进行确认，因为以后收到了序列号为x的数据包，准备接收序列号是x+1的包，所以ack=x+1，同时告诉客户端自己的初始序列号。服务器进入SYN_RECV状态3. 第三次握手，客户端收到服务器的ack与seq，向服务器发送确认包seq、ack，客户端此条消息的序列号是x+1，所以seq=x+1，而ack=y+1，ack表示客户端正准备接收服务器序列号是y+1的数据包，此包发送完毕，客户端和服务器都进入ESTABLISHED（TCP连接成功），完成三次握手</code></pre><p><img src="http://oxk1vrcj4.bkt.clouddn.com/v2-c8b61ed2a249700583b11bc5d16c5711_r.jpg" alt=""></p><pre><code>1. 第一次挥手：A认为数据发送完了，需要向B发送连接释放请求。该请求只有报文头，头中携带主要参数为：    1. FIN=1，seq=u，此时A进入FIN-WAIT-1        1. FIN=1表示该报文段是一个连接释放请求。        2. seq=u，u-1是A向B发送的最后一个字节的序号。2. 第二次挥手：B接收到连接释放请求后，会通知相应的应用程序，告诉它A向B这个方向的连接已经释放了。B进入CLOSE-WAIT，并向A发送释放的应答，其报文头：    ACK=1,seq=v,ack=u+1。        1. ACK=1，除了TCP连接请求报文段以外，TCP通信过程中所有数据报的ACK都是1，表示应答。        2. seq=v，v-1是B向A发送的最后一个字节的序号        3. ack=u+1,表示希望收到第u+1字节开始的报文段，并且已经成功接收到了前u个字节。A收到该应答，进入FIN-WAIT-2状态，等待B发送连接释放请求。第二次挥手完成后，A到B的连接已经释放，B不会再接收数据，A不会再发送数据。但是B到A的连接还存在，B还可以向A发送数据。3. 第三次挥手：当B向A发完所有数据后，向A发送连接释放请求，请求头：FIN=1,ACK=1,seq=w，ack=u+1。4. 第四次挥手：A收到释放请求，向B发送确认应答，此时A进入TIME-WAIT状态，该状态会持续2MSL时间，若该时间段内没有B的重发请求，就进入CLOSED，撤销TCB。当B收到确认应答后，也进入CLOSED，撤销TCB。</code></pre><h2 id="为什么不是两次，或者四次"><a href="#为什么不是两次，或者四次" class="headerlink" title="为什么不是两次，或者四次"></a>为什么不是两次，或者四次</h2><pre><code>A &lt;-------&gt; B1. 两次连接，就是为了防止失效的连接请求报文段被服务器接收，从而产生了错误。ps:失效的连接请求，若客户端向服务端发送的连接请求丢失，客户端等待应答时间超时后，就会再次发送连接请求，此时上一个连接请求就是失效的。客户端的请求报文在某个网络结点长时间滞留了，以至于延误到连接释放后才到达B，本来就是一个失效的报文，但是B以为这个A又发的一个新的连接请求。于是向A发出确认报文，同一建立连接。假定不采用三次握手，那么只要B发出了确认，就建立了新的连接。但是A并没有发出连接，所以B以为自己连接建立了，一直等待A的数据，但是等不到。2. 四次连接，第三次已经确认了，没必要了</code></pre><h2 id="为什么A要先进入TINE-WAIT，等待2MSL时间才进入CLOSED"><a href="#为什么A要先进入TINE-WAIT，等待2MSL时间才进入CLOSED" class="headerlink" title="为什么A要先进入TINE-WAIT，等待2MSL时间才进入CLOSED"></a>为什么A要先进入TINE-WAIT，等待2MSL时间才进入CLOSED</h2><pre><code>为了保证B能收到A的确认应答。 若A发完确认应答后直接进入CLOSED状态，那么如果该应答丢失，B等待超时后就会重新发送连接释放请求，但此时A已经关闭了，不会作出任何响应，因此B永远无法正常关闭。</code></pre><h1 id="如何客户端不断的发送请求连接会怎样"><a href="#如何客户端不断的发送请求连接会怎样" class="headerlink" title="如何客户端不断的发送请求连接会怎样"></a>如何客户端不断的发送请求连接会怎样</h1><pre><code>1. 服务器会为每一个请求建立一个链接，然后向Client端发送创建链接时的回复，然后进行等待客户端发送第三次握手数据包，这样会白白浪费资源。2. DDos攻击：    1. 客户端向服务器端发送连接请求数据包    2. 服务器向客户端回复连接请求数据包，然后服务器等待客户端发送TCP/IP链接的第三次数据包    3. 如果客户端不向服务器发送最后一个数据包，则服务器需等待30s-2minutes才能将此连接进行关闭。当大量的请求只进行到第二步，然后不进行第三步，服务器又大量的资源等待第三个数据包，就会造成DDos攻击。3. DDos预防    1. 关闭不必要的服务    2. 限制同时打开的SYN的半连接数目    3. 缩短SYN半连接的Time out时间</code></pre><h1 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h1><pre><code>用户数据报协议（User Datagram Protocal）传输控制协议（Transmission Control Proptocol）1. TCP提供的是面向连接的，可靠的数据流传输，而UDP提供的是非面向连接的（面向报文），不可靠的数据流传输。2. TCP传输单位是TCP报文段，UDP传输单位是用户数据报3. TCP注重数据的安全，UDP数据传输快。4. UDP做不了流量控制</code></pre><h2 id="TCP与UDP常用协议"><a href="#TCP与UDP常用协议" class="headerlink" title="TCP与UDP常用协议"></a>TCP与UDP常用协议</h2><pre><code>（1） FTP：定义了文件传输协议，使用21端口。（2） Telnet：一种用于远程登陆的端口，使用23端口，用户可以以自己的身份远程连接到计算机上，可提供基于DOS模式下的通信服务。（3） SMTP：邮件传送协议，用于发送邮件。服务器开放的是25号端口。（4） POP3：它是和SMTP对应，POP3用于接收邮件。POP3协议所用的是110端口。（5）HTTP：是从Web服务器传输超文本到本地浏览器的传送协议。UDP对应的协议：（1） DNS：用于域名解析服务，将域名地址转换为IP地址。DNS用的是53号端口。（2） SNMP：简单网络管理协议，使用161号端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。（3） TFTP(Trival File Transfer Protocal)，简单文件传输协议，该协议在熟知端口69上使用UDP服务。</code></pre><h1 id="从输入网址到获得页面的过程"><a href="#从输入网址到获得页面的过程" class="headerlink" title="从输入网址到获得页面的过程"></a>从输入网址到获得页面的过程</h1><pre><code>1. 查询DNS，获取域名对应的IP地址    1. 浏览器搜索自己的DNS缓存    2. 搜索操作系统的DNS缓存    3. 读取本地的HOST文件（本地ISP域名服务器解析）    4. 发起一个DNS的系统调用（根域名服务器）        1. 宽带运营服务器查看本身缓存        2. 运营商服务器发起一个迭代DNS解析请求2. 浏览器获得域名对应的IP，通过IP地址找到客户端到服务端的路径。客户端发起HTTP会话到IP地址，然后通过TCP进行封装数据包，传输到网络层（三次握手）。3. TCP/IP连接建立起来后，浏览器向服务器发送HTTP请求。4. 服务器接收到这个请求，根据路径参数，经过后端的处理生成HTML代码返回给浏览器5. 浏览器拿到完整的HTML页面代码开始解析和渲染，如果遇到引用的外部JS,CSS，同样的也是一个个HTTP请求，也都是要经过上面的步骤6. 浏览器根据拿到的资源对页面进行渲染，最终得到页面</code></pre><h1 id="在浏览器中输入www-baidu-com后执行的全部过程"><a href="#在浏览器中输入www-baidu-com后执行的全部过程" class="headerlink" title="在浏览器中输入www.baidu.com后执行的全部过程"></a>在浏览器中输入www.baidu.com后执行的全部过程</h1><p><a href="https://blog.csdn.net/qq_16681169/article/details/50866290" target="_blank" rel="noopener">https://blog.csdn.net/qq_16681169/article/details/50866290</a></p><pre><code>从网络模型的角度来分析问题的，主要涉及应用层：DNS,HTTP,传输层：TCP,网络层：IP和路由选择协议：RIP,OSPF(内部网关协议),BGP(外部网关协议）和数据链路层：ARP（地址解析协议，这个协议可以说在数据链路层，也可以说在网络层）。下面来具体分析：1、客户端浏览器通过DNS解析到www.baidu.com的IP地址220.181.27.48，通过这个IP地址找到客户端到服务器的路径。客户端浏览器发起一个HTTP会话到220.161.27.48，然后通过TCP进行封装数据包，输入到网络层。2、在客户端的传输层，把HTTP会话请求分成报文段，添加源和目的端口，如服务器使用80端口监听客户端的请求，客户端由系统随机选择一个端口如5000，与服务器进行交换，服务器把相应的请求返回给客户端的5000端口。然后使用IP层的IP地址查找目的端。3、客户端的网络层不用关心应用层或者传输层的东西，主要做的是通过查找路由表确定如何到达服务器，期间可能经过多个路由器，这些都是由路由器来完成的工作，我不作过多的描述，无非就是通过查找路由表决定通过那个路径到达服务器。4、客户端的链路层，包通过链路层发送到路由器，通过邻居协议查找给定IP地址的MAC地址，然后发送ARP请求查找目的地址，如果得到回应后就可以使用ARP的请求应答交换的IP数据包现在就可以传输了，然后发送IP数据包到达服务器的地址。</code></pre><h1 id="ARP（地址协议）"><a href="#ARP（地址协议）" class="headerlink" title="ARP（地址协议）"></a>ARP（地址协议）</h1><pre><code>1. 首先，每个主机都会在主机的ARP缓冲区建立一个ARP列表，以表示IP地址和MAC地址之间的对应关系。2. 当源主机要发送数据时，首先检查APR列表中是否有对应IP地址的目的主机的MAC地址，如果有，直接发送数据，如果没有，就向本网段的所有主机发送ARP数据包，数据包里面有：源主机IP，MAC地址，目的主机IP地址。3. 当本网络的所有主机收到了ARP数据包，首先检查数据包中目的主机IP地址是否时自己的IP地址，如果不是，直接忽略，如果是，首先从数据包中取出源主机的IP和MAC，写入自己的ARP列表，如果存在，就覆盖，然后将自己的MAC地址写入ARP响应包，告诉源主机自己是它想要的MAC地址4. 源主机收到了ARP响应包以后，将目的主机的IP和MAC地址，ARP地址，并利用此信息发送数据。</code></pre><h1 id="RARP"><a href="#RARP" class="headerlink" title="RARP"></a>RARP</h1><pre><code>RARP是逆地址协议，从MAC地址到IP地址的映射，主要用于无盘工作站，因为给无盘工作站配置的IP地址不能保存。</code></pre><h1 id="常用的状态码"><a href="#常用的状态码" class="headerlink" title="常用的状态码"></a>常用的状态码</h1><p><a href="https://www.cnblogs.com/jly144000/archive/2017/12/07/7998615.html" target="_blank" rel="noopener">https://www.cnblogs.com/jly144000/archive/2017/12/07/7998615.html</a></p><pre><code>200：服务器成功返回页面400：错误请求，服务器不理解请求的语法404：请求的页面不存在500：服务内部错误503：服务器超时</code></pre><h2 id="临时响应"><a href="#临时响应" class="headerlink" title="临时响应"></a>临时响应</h2><pre><code>1xx（临时响应）    表示临时响应并需要请求者继续执行100（继续）：请求者应当继续提出请求。服务器返回此代码表示已经收到了请求的第一部分，正在等待其余部分101（切换协议）：请求者已经要求服务器切换协议，服务器已经确认，并且准备切换。</code></pre><h2 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h2><pre><code>2xx（成功）    表示成功处理了请求200（成功）：表示服务器已经成功处理了请求。201（已创建）：请求成功并且服务器创建了新的资源202（已接收）：服务器接收了请求，但是尚未处理203（非授权信息）：服务器已经成功处理了请求，但是返回的信息可能来自另一来源204（无内容）：服务器成功处理了请求，但是没有返回任何内容205（重置内容）:服务器成功处理了请求，但是没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图206（部分内容）:服务器成功处理了部分GET请求</code></pre><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><pre><code>3xx（重定向）    要完成请求，需要进一步操作。通常，这些状态码用来重定向。Google 建议您在每次请求中使用重定向不要超过 5 次。您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。诊断下的网络抓取页列出了由于重定向错误导致 Googlebot 无法抓取的网址。300(多种选择)：针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。301(永久移动)：请求的网页已永久移动到新位置。服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。302(临时移动)：服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。303(查看其他位置)请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。304(未修改)自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</code></pre><h2 id="请求错误"><a href="#请求错误" class="headerlink" title="请求错误"></a>请求错误</h2><pre><code>4xx（请求错误）    这些状态码表示请求可能出错，妨碍了服务器的处理。400(错误请求)：服务器不理解请求的语法。401(未授权)：请求要求身份验证。对于登录后请求的网页，服务器可能返回此响应。403(禁止)：服务器拒绝请求。如果您在 Googlebot 尝试抓取您网站上的有效网页时看到此状态码(您可以在 Google 网站管理员工具诊断下的网络抓取页面上看到此信息)，可能是您的服务器或主机拒绝了 Googlebot 访问。404(未找到)：服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。405(方法禁用)：禁用请求中指定的方法。</code></pre><h2 id="服务器错误"><a href="#服务器错误" class="headerlink" title="服务器错误"></a>服务器错误</h2><pre><code>5xx(服务器错误)    这些状态码表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。500(服务器内部错误)服务器遇到错误，无法完成请求。501(尚未实施)服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。502(错误网关)服务器作为网关或代理，从上游服务器收到无效响应503(服务不可用)服务器目前无法使用(由于超载或停机维护)。通常，这只是暂时状态。504(网关超时)服务器作为网关或代理，但是没有及时从上游服务器收到请求。505(HTTP 版本不受支持)服务器不支持请求中所用的 HTTP 协议版本。</code></pre><h1 id="OSI、TCP-IP、五层协议栈"><a href="#OSI、TCP-IP、五层协议栈" class="headerlink" title="OSI、TCP/IP、五层协议栈"></a>OSI、TCP/IP、五层协议栈</h1><pre><code>OSI（7层）： 物理层，数据链路层，网络层，传输层，会话层，表示层，应用层TCP/IP（4层）：网络接口层，网际层（IP），传输层，应用层五层：物理层，数据链路层，网络层，传输层，应用层</code></pre><h1 id="协议栈常用协议"><a href="#协议栈常用协议" class="headerlink" title="协议栈常用协议"></a>协议栈常用协议</h1><pre><code>物理层：RJ45、CLOCK、IEEE802.3    （中继器，集线器，网关）数据链路：PPP、FR、HDLC、VLAN、MAC  （网桥，交换机）网络层：IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器）传输层：TCP、UDP、SPX会话层：NFS、SQL、NETBIOS、RPC表示层：JPEG、MPEG、ASII应用层：FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS</code></pre><h1 id="协议栈每一层的作用"><a href="#协议栈每一层的作用" class="headerlink" title="协议栈每一层的作用"></a>协议栈每一层的作用</h1><pre><code>物理层：通过媒介传输比特,确定机械及电气规范（比特Bit）数据链路层：将比特组装成帧和点到点的传递（帧Frame）网络层：负责数据包从源到宿的传递和网际互连（包PackeT）传输层：提供端到端的可靠报文传递和错误恢复（段Segment）会话层：建立、管理和终止会话（会话协议数据单元SPDU）表示层：对数据进行翻译、加密和压缩（表示协议数据单元PPDU）应用层：允许访问OSI环境的手段（应用协议数据单元APDU）</code></pre><h1 id="IP地址的分类"><a href="#IP地址的分类" class="headerlink" title="IP地址的分类"></a>IP地址的分类</h1><pre><code>A类地址：以0开头，      第一个字节范围：0~127（1.0.0.0 - 126.255.255.255）；B类地址：以10开头，    第一个字节范围：128~191（128.0.0.0 - 191.255.255.255）；C类地址：以110开头，  第一个字节范围：192~223（192.0.0.0 - 223.255.255.255）；10.0.0.0—10.255.255.255， 172.16.0.0—172.31.255.255， 192.168.0.0—192.168.255.255。（Internet上保留地址用于内部）IP地址与子网掩码相与得到主机号</code></pre><h1 id="传输层协议与网络层协议的区别"><a href="#传输层协议与网络层协议的区别" class="headerlink" title="传输层协议与网络层协议的区别"></a>传输层协议与网络层协议的区别</h1><pre><code>网络层提供的是主机之间的逻辑通信。传输层提供的是进程之间的逻辑通信。</code></pre><h1 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h1><pre><code>利用滑动窗口实现流量控制。流量控制说的就是发送方的发送速率不要太快，让接收方来得及接收。TCP的窗口单元是字节，不是报文段。TCP为每一个连接设有一个持续计时器(persistence timer)。只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器。若持续计时器设置的时间到期，就发送一个零窗口控测报文段（携1字节的数据），那么收到这个报文段的一方就重新设置持续计时器。</code></pre><h1 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h1><pre><code>对资源的需求&gt;可用资源，产生拥塞防止过多的数据注入到网络中，这样可以使用网络中的路由器或者链路不至于过载。拥塞控制所要做的都有一个前提，网络能够承受现有的网络负荷。</code></pre><h1 id="交换机、路由器、网关"><a href="#交换机、路由器、网关" class="headerlink" title="交换机、路由器、网关"></a>交换机、路由器、网关</h1><pre><code>1. 交换机：交换机工作于OSI参考模型的第二层，即数据链路层。交换机内部的CPU会在每个端口成功连接时，通过ARP得到它的MAC地址，保存成一张 ARP表。在今后的通讯中，发往该MAC地址的数据包将仅送往其对应的端口，而不是所有的端口。因此，交换机可用于划分数据链路层广播，即冲突域；但它不 能划分网络层广播，即广播域。2. 路由器：路由器（Router）是一种计算机网络设备，提供了路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过 的路由路径（host到host之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行)，这称为转 送。路由工作在OSI模型的第三层——即网络层，例如网际协议。路由器的一个作用是连通不同的网络，另一个作用是选择信息传送的线路。 路由器与交换器的差别，路由器是属于OSI第三层的产品，交换器是OSI第二层的产品(这里特指二层交换机)。3. 网关：网关（Gateway），网关顾名思义就是连接两个网络的设备，区别于路由器（由于历史的原因，许多有关TCP/IP 的文献曾经把网络层使用的路由器（Router）称为网关，在今天很多局域网采用都是路由来接入网络，因此现在通常指的网关就是路由器的IP），经常在家 庭中或者小型企业网络中使用，用于连接局域网和Internet。 网关也经常指把一种协议转成另一种协议的设备，比如语音网关。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/662703796983558046.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算机网络基础复习&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CN" scheme="http://abelchao.com/categories/CN/"/>
    
    
      <category term="CN" scheme="http://abelchao.com/tags/CN/"/>
    
  </entry>
  
  <entry>
    <title>Spring&amp;SpringMVC&amp;MyBatis基础总结</title>
    <link href="http://abelchao.com/2018/05/02/Spring&amp;SpringMVC&amp;MyBatis%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <id>http://abelchao.com/2018/05/02/Spring&amp;SpringMVC&amp;MyBatis基础总结/</id>
    <published>2018-05-02T01:00:00.000Z</published>
    <updated>2018-07-20T03:19:50.992Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/223742655302558847.jpg" alt=""></p><p><strong>Spring&amp;SpringMVC&amp;MyBatis基础总结</strong><br><a id="more"></a></p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><pre><code>http://www.importnew.com/15851.htmlhttp://www.importnew.com/19538.html</code></pre><h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h2><pre><code>Spring是一个Java企业级应用的开源框架。同时它是一个轻量级的框架结构。核心思想有IoC，AOP，DISpring其实就是让模块与模块之前的关系不通过代码来关联，而是利用配置文件类来说明管理。（Spring根据在自己配置文件中引入的JavaBean，通过反射去动态的组装对象）记住！Spring说白了就是一个容器，凡是在容器里的对象才会有Spring提供的服务与功能。</code></pre><h2 id="Spring的核心模块"><a href="#Spring的核心模块" class="headerlink" title="Spring的核心模块"></a>Spring的核心模块</h2><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180428105623.png" alt=""></p><h2 id="什么是控制反转（IOC）-依赖注入（DI）"><a href="#什么是控制反转（IOC）-依赖注入（DI）" class="headerlink" title="什么是控制反转（IOC）/依赖注入（DI）"></a>什么是控制反转（IOC）/依赖注入（DI）</h2><p><a href="https://www.cnblogs.com/xdp-gacl/p/4249939.html" target="_blank" rel="noopener">https://www.cnblogs.com/xdp-gacl/p/4249939.html</a></p><p><strong>1. 什么是Ioc</strong></p><pre><code>IoC--Inversion of Control，不是什么技术，是一种设计思想。IoC就意味着将你设计好的对象交给容器本身来控制，而不是传统的在对象内部通过new来控制。谁控制谁？控制什么？为什么叫反转？那什么又是正转？1. 谁控制谁，控制什么：在Java SE中，我们获取对象的时候都是通过在new来创建，也就是在程序中主动的去创建依赖对象（正转），但是IoC是我创建了一个容器（Spring），然后把对象都标识（beanName）都放入整个容器，当我们程序中需要某个对象的时候，通过容器来动态的生成依赖对象。    1. 容器（Spring）控制了对象    2. 控制了对象的产生和外部资源的获取2. 正转就是我们主动在程序中new出来依赖的对象，反转是容器（Spring）利用beanName调用反射创建了对象，并且在创建的对象注入了程序中需要的地方。    1. 容器本身帮我们查找和注入了依赖对象，对象只是被动的接收依赖对象，所以是反转    2. 依赖对象的获取被反转了</code></pre><p><strong>2. IoC能干什么</strong></p><pre><code>传统的应用程序都是我们在类的内部主动的创建依赖对象，从而导致类与类之间高耦合，难于测试。但是有了IoC后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象和对象之前的耦合降低了。其实IoC对编程最大的改变不是从代码上，而是从思想上，发生了&quot;主从换位&quot;的变化。原来应用程序本身是老大，要获取什么资源都需要自己去获取，而IoC/DI中，应用程序就是被动了，被动的等待IoC容器来创建并注入自己需要的资源。</code></pre><p><strong>3. IoC与DI</strong></p><pre><code>DI--Dependency Injection，就是说组件的依赖关系是在容器运行时决定的。谁依赖谁？为什么需要依赖？谁注入谁？注入了什么？1. 应用程序依赖IoC容器2. 因为自己创建不了3. IoC把应用程序依赖的对象注入内部4. 注入的就是某个应用程序需要的外部资源</code></pre><p><strong>4. IoC和DI的关系</strong></p><pre><code>其实是同一个概念的不同描述，IoC感觉更强调容器控制了对象的产生，DI更强调容器把生成对象注入了应用程序（维护对象之间的关系）</code></pre><p><strong>5. 理解</strong></p><pre><code>首先想说说IoC（Inversion of Control，控制反转）。这是spring的核心，贯穿始终。所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。</code></pre><h2 id="依赖注入的方式"><a href="#依赖注入的方式" class="headerlink" title="依赖注入的方式"></a>依赖注入的方式</h2><p><a href="https://blog.csdn.net/u011637069/article/details/51958918" target="_blank" rel="noopener">https://blog.csdn.net/u011637069/article/details/51958918</a></p><pre><code>1. 构造器注入2. Setter方法注入3. 接口注入</code></pre><h2 id="Spring下的IoC核心包"><a href="#Spring下的IoC核心包" class="headerlink" title="Spring下的IoC核心包"></a>Spring下的IoC核心包</h2><pre><code>1. org.springframework.bean2. org.springframework.contextBeanFactory可以理解为还有bean集合的工厂类。BeanFactory中包含了很多bean的定义，以便在接收到客户端请求的时候将对应的bean实例化。ApplicationConext对BeanFactory进行了扩展（继承了，但是两个都是接口），提供了其他的功能。    1. 提供了支持国际化的文本信息    2. 统一了资源文件的读取方式    3. 在监听器中注入了bean事件下面是三个比较常见的ApplicationContext实现方式：    1. ClassPathXmlApplicationContext：从classpath的XML配置文件中读取上下文，并生成了上下文定义。应用程序上下文从程序环境变量中获取。        ApplicationContext context = new ClassPathXmlApplicationContext(“bean.xml”);    2. FileSystemXmlApplicationContext ：由文件系统中的XML配置文件读取上下文。        ApplicationContext context = new FileSystemXmlApplicationContext(“bean.xml”);    3. XmlWebApplicationContext：由Web应用的XML文件读取上下文。</code></pre><h2 id="BeanFactory与ApplicationContext的区别"><a href="#BeanFactory与ApplicationContext的区别" class="headerlink" title="BeanFactory与ApplicationContext的区别"></a>BeanFactory与ApplicationContext的区别</h2><pre><code>1. 首先BeanFactory和ApplicationContext都是接口，并且ApplicationContext是BeanFactory的子接口。2. 其实BeanFactory是Spring中最底层的接口，提供了最简单的容器的功能，只提供了实例化对象和拿对象的功能，而ApplicationContext是Spring的一个高级容器，提供了更多的有用的功能。    1. ApplicationContext继承了BeanFactory接口，所以，ApplicationContext也能像BeanFactory从容器中得到Bean    2. ApplicationContext提供了国际化，消息发送，响应机制，统一加载资源的功能，事件机制，对Web的应用3. BeanFactory采用的是延迟加载的形式来注入Bean，即只有使用到某个Bean的时候，才会对该Bean进行加载实例化。4. ApplicationContext它是在Ioc容器启动的时候就一次性创建了所有的Bean。</code></pre><h2 id="如何使用注解的方式配置Spring"><a href="#如何使用注解的方式配置Spring" class="headerlink" title="如何使用注解的方式配置Spring"></a>如何使用注解的方式配置Spring</h2><pre><code>&lt;beans&gt;    &lt;context:annotation-config/&gt;   &lt;!-- bean definitions go here --&gt;&lt;/beans&gt;在 &lt;context:annotation-config/&gt;标签配置完成以后，就可以用注解的方式在Spring中向属性、方法和构造方法中自动装配变量。1. @Required：该注解应用于设值方法。2. @Autowired：该注解应用于有值设值方法、非设值方法、构造方法和变量。3. @Qualifier：该注解和@Autowired注解搭配使用，用于消除特定bean自动装配的歧义。4. JSR-250 Annotations：Spring支持基于JSR-250 注解的以下注解，@Resource、@PostConstruct 和 @PreDestroy。</code></pre><h2 id="什么是Spring-Bean的生命周期"><a href="#什么是Spring-Bean的生命周期" class="headerlink" title="什么是Spring Bean的生命周期"></a>什么是Spring Bean的生命周期</h2><pre><code>在一个bean实例被初始化的时候，需要执行一系列的初始化操作以达到可用的状态。同样的，当一个bean不再被调用的时候需要进行相关的析构操作，并从bean容器中移除。BeanFactory来完成这个过程。Bean的生命周期由两组回调组成（callback）    1. InitializingBean和DisposableBean回调接口    2. 针对特殊行为的其他Aware接口    3. Bean配置文件中的Custom init()方法和destroy()方法    4. @PostConstruct和@PreDestroy注解方式</code></pre><h2 id="Spring-Bean的作用域之间的区别"><a href="#Spring-Bean的作用域之间的区别" class="headerlink" title="Spring Bean的作用域之间的区别"></a>Spring Bean的作用域之间的区别</h2><pre><code>1. singleton,所有的bean请求，整个IoC容器中就一个Bean实例，单例的模式由BeanFactory自身来维护。2. prototype，和singleton刚好相反，为每一个bean请求都创建一个Bean实例。3. request，会为每一个来自客户端网络请求的Bean请求创建一个实例，请求完成后，Bean会失效，同时被GC4. session，和request类似5. global-session</code></pre><h2 id="Spring框架下的单例Bean是线程安全的么"><a href="#Spring框架下的单例Bean是线程安全的么" class="headerlink" title="Spring框架下的单例Bean是线程安全的么"></a>Spring框架下的单例Bean是线程安全的么</h2><pre><code>1. 不是，Spring框架中的单例Bean不是线程安全的。</code></pre><h2 id="什么是Spring的内部Bean"><a href="#什么是Spring的内部Bean" class="headerlink" title="什么是Spring的内部Bean"></a>什么是Spring的内部Bean</h2><pre><code>当一个Bean仅被用作另一个Bean的属性时，它就能被声明为一个内部Bean，为了定义Inner Bean，在Spring的基于XML的配置元数据中，可以在&lt;property/&gt;或&lt;constructor-arg/&gt;元素内使用&lt;bean/&gt;元素，内部Bean通常时匿名的，它们的Scope一般是Prototype。</code></pre><h2 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h2><p><a href="https://www.cnblogs.com/wang-meng/p/5701982.html" target="_blank" rel="noopener">https://www.cnblogs.com/wang-meng/p/5701982.html</a></p><pre><code>AOP（Aspect Oriented Programming），是对OOP的补充和完善（Object Oriented Programming，面向对象编程）。我们在OOP中，如果我们有一个方法，很多类都要使用，我们一般会抽象出来一个类（抽象类），去实现这个这些类中都要使用的方法，然后再让这些类去继承这个类。这是纵向的，但是这个样子如果突然某一个的需求变了，就在本类中重写这个方法。AOP说的是横向的（横切），把共用的方法叫做切面（Aspect），所谓切面，简单的说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合。1. 横切关注点：对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点2. 切面（aspect）：类是对物体特征的抽象，切面就是对横切关注点的抽象。3. 连接点（joinpoint）：被拦截的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点，就是被拦截到的方法，实际上连接点还可以是字段或者构造器。4. 切入点（pointcut）：对连接点进行拦截的定义5. 通知（advice）：拦截到连接点之后要执行的代码，通知分为前置，后置，异常，最终，环绕通知五类。6. 目标对象：代理的目标对象。7. 织入（weave）：将切面应用到目标对象并导致代理对象创建的过程。8. 引入（introduction）：在不修改代码的前提下，引入可以在运行期为类动态的添加一些方法或者字段。Spring中AOP的支持：    1. Spring中的AOP代理由Spring的IoC容器负责生成，管理，其依赖关系也由IoC容器负责管理。因此，AOP代理可以直接使用容器中的其他Bean实例来作为目标。这种关系可由IoC容器的依赖注入提供。    2. Spring创建代理的规则：        1. 默认使用Java动态代理来创建AOP处理，这样可以为任何接口实例创建代理了。        2. 当需要代理的类不是代理接口的时候，Spring会切换为使用CGBlib代理。</code></pre><h2 id="Spring基本概念"><a href="#Spring基本概念" class="headerlink" title="Spring基本概念"></a>Spring基本概念</h2><pre><code>IoC叫做控制反转，DI是依赖注入，后者是前者更简单的诠释。控制反转说的是把传统上程序代码直接new对象的调用权交给了容器，通过容器来实现对象组件的装配和关系。所谓的控制反转，也就是对组件对象控制权的转移，从代码本身转移到了外部容器，由容器来创建对象并管理对象之间的依赖关系。DI是说IoC来管理组件的关系，但是组件的关系是在容器运行期来决定的，也就是容器动态的把某种依赖的关系注入了组件中国，1. Spring AOP实现管理    1. 动态代理（利用反射和动态编译将代码模式编程动态的）    2. JDK的动态代理：JDKProxy返回动态代理类，是目标类所实现接口的另一个实现版本，它实现了对目标类的代理    3. CGLib动态代理：CGLibProxy返回的动态代理类，则是是目标代理类的一个子类2. 动态代理和CGLib实现的区别    1. JDK动态代理只能针对实现了接口的类生成代理，而不能针对类。    2. CGLib是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法因为是继承。    3. JDK代理不需要第三方的库    4. CGLib必须依赖CGLib的库</code></pre><h2 id="Spring的两种代理"><a href="#Spring的两种代理" class="headerlink" title="Spring的两种代理"></a>Spring的两种代理</h2><pre><code>当一个对象不能或者不想直接引用另一个对象（目标对象）时，可以在这之间弄一个桥梁--代理对象：    1. 静态代理：程序员事先写好代理对象类，在程序发布就已经存在了。    2. 动态代理：应用程序发布后，通过动态创建代理对象。</code></pre><p><strong>JDK动态代理</strong></p><pre><code>利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。</code></pre><p><strong>CGLib动态代理</strong></p><pre><code>利用ASM开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。1. 如果目标对象实现了接口，默认使用JDK，也可以强制只用CGLib2. 没有实现接口，必须采用CGLib。</code></pre><h2 id="Spring和工厂模式的区别"><a href="#Spring和工厂模式的区别" class="headerlink" title="Spring和工厂模式的区别"></a>Spring和工厂模式的区别</h2><pre><code>当需求改变的时候，工厂模式需要进行相应的变化。但是IoC的反射机制允许我们不重新编译代码，因为它的对象都是动态生成。在工厂中修改就得重新编译工厂类啊，你那机子上还得装着JDK。在XML中修改只要一个Text编辑器就搞定了。重新编译以后你要用新编译的类，得先停了JVM再重新启动，热插拔就是说你把XML改了spring就立刻发觉你改动了XML，重新读一遍XML，就会用你的新改动了，根本不用重新启动JVM。</code></pre><h2 id="IoC容器的加载过程"><a href="#IoC容器的加载过程" class="headerlink" title="IoC容器的加载过程"></a>IoC容器的加载过程</h2><pre><code>1. 创建IoC配置文件的抽象资源2. 创建BeanFactory3. 把读取配置信息的BeanDefinitionReader，这里是XmlBeanDefinitionReader配置给BeanFactory4. 从定义好的资源位置读取配置信息，具体解析由XmlBeanDefinitionReader来完成。</code></pre><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180502114112.png" alt=""></p><pre><code>1. 用户发送请求到前端控制器DispatcherServlet2. DispatcherServlet收到请求后调用HandlerMapping（处理器映射器）3. 处理器映射器找到具体的处理器，生成处理器对象和处理器拦截器（如果有的话），并将两者返回给DispatcherServlet4. DispatcherServlet调用HandlerAdapter处理器适配器5. HandlerAdapter经过适配调用具体的后端控制器（Controller）6. Controller执行完成返回ModelAndView7. HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet8. DispatcherServlet将ModelAndView传给ViewResolver视图解析器9. ViewResolver解析后返回具体的Veiw10. DisPatcherServlet根据View进行渲染视图（即将模型数据填充到视图中）11. DispatcherServlet响应用户。</code></pre><h2 id="SpringMVC与Struts2的区别"><a href="#SpringMVC与Struts2的区别" class="headerlink" title="SpringMVC与Struts2的区别"></a>SpringMVC与Struts2的区别</h2><pre><code>1. SpringMVC的入口是一个Servlet（DispatcherServlet），而Struts2入口是一个Filter2. SpringMVC是基于方法开发，传递参数通过方法形参（可以单例），Strust2是基于类开发，参数传递通过类的属性，只能设计为多例。3. Struts采用值栈存储请求和响应的数据，通过OGNL和JSTL来获取数据，SpringMVC是通过参数解析器将request对象内容进行解析成方法形参，响应数据与页面封装成ModelAndView对象，最后又通过模型数据通过request对象传输到页面。</code></pre><h2 id="SpringMVC的控制器是不是单例"><a href="#SpringMVC的控制器是不是单例" class="headerlink" title="SpringMVC的控制器是不是单例"></a>SpringMVC的控制器是不是单例</h2><pre><code>单例，所以多线程访问的时候又线程安全问题，但是不能加锁，会影响性能，解决方案是在控制器中不能写字段。</code></pre><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><pre><code>1. @Controller：表现层，控制器2. @RequestMapping：在类上表示这个类中所有响应请求方法都以这个地址为父路径，在方法上，就是方法特定的。3. SpringMVC通过@ResponseBody与AJAX进行交互。</code></pre><h1 id="Mybatis与Hibernate"><a href="#Mybatis与Hibernate" class="headerlink" title="Mybatis与Hibernate"></a>Mybatis与Hibernate</h1><h2 id="与"><a href="#与" class="headerlink" title="${}与#{}"></a>${}与#{}</h2><pre><code>1. ${},是从.properties中获取静态值，比如${driver}会被换成com.mysql.jdbc.Driver2. #{},是sql的参数占位符，MyBatis会将sql中的#{}替换成？，在SQL执行前会使用PreparedStatement的参数设置方法，按序号给？占位符设置参数。比如#{item.name}，会成为param.getItem().getName()。</code></pre><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><pre><code>resultMap、parameterMap、sql、include</code></pre><h2 id="Dao层接口与Mappring-xml如何映射"><a href="#Dao层接口与Mappring-xml如何映射" class="headerlink" title="Dao层接口与Mappring.xml如何映射"></a>Dao层接口与Mappring.xml如何映射</h2><pre><code>Dao接口中的方法，是不能重载的，因为全限定名+方法名的保存和寻找策略。全限定名+方法名拼接字符串成为一个Key,唯一定位一个MappingStstement。Dao接口的工作原理就是JDK动态代理，MyBatis运行时会使用JDK动态代理为Dao接口生成代理对象，代理对象会拦截接口方法，转而执行MappingStstement所代表的SQL，然后将SQL执行结果返回。</code></pre><h2 id="MyBatis的分页插件（PageHelper）"><a href="#MyBatis的分页插件（PageHelper）" class="headerlink" title="MyBatis的分页插件（PageHelper）"></a>MyBatis的分页插件（PageHelper）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xd.cop.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> xd.cop.common.ServerResponse;</span><br><span class="line"><span class="keyword">import</span> xd.cop.dao.ItemMapper;</span><br><span class="line"><span class="keyword">import</span> xd.cop.pojo.Item;</span><br><span class="line"><span class="keyword">import</span> xd.cop.service.inter.IItemService;</span><br><span class="line"><span class="keyword">import</span> xd.cop.util.DateTimeUtil;</span><br><span class="line"><span class="keyword">import</span> xd.cop.vo.ItemVo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Blemon on 2018/4/18.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"iItemService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title">IItemService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemMapper itemMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerResponse&lt;PageInfo&gt; <span class="title">getAllItemByPage</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.startPage--start</span></span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.填充自己的sql查询逻辑</span></span><br><span class="line">        List&lt;Item&gt; itemList = itemMapper.selectList();</span><br><span class="line">        List&lt;ItemVo&gt; itemVoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Item item : itemList)&#123;</span><br><span class="line">            ItemVo itemVo = assembleItemVo(item);</span><br><span class="line">            itemVoList.add(itemVo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.pageHelper收尾</span></span><br><span class="line">        PageInfo pageResult = <span class="keyword">new</span> PageInfo(itemList);<span class="comment">//确定个数</span></span><br><span class="line">        pageResult.setList(itemVoList);<span class="comment">//确定集合</span></span><br><span class="line">        <span class="keyword">return</span> ServerResponse.createBySuccess(pageResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ItemVo <span class="title">assembleItemVo</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">        ItemVo itemVo = <span class="keyword">new</span> ItemVo();</span><br><span class="line">        itemVo.setId(item.getId());</span><br><span class="line">        itemVo.setSecn(item.getSecn());</span><br><span class="line">        itemVo.setAbnc(item.getAbnc());</span><br><span class="line">        itemVo.setHum(item.getHum());</span><br><span class="line">        itemVo.setLat(item.getLat());</span><br><span class="line">        itemVo.setPre(item.getPre());</span><br><span class="line">        itemVo.setLon(item.getLon());</span><br><span class="line">        itemVo.setVib(item.getVib());</span><br><span class="line">        itemVo.setTem(item.getTem());</span><br><span class="line"></span><br><span class="line">        itemVo.setCreatetime(DateTimeUtil.dateToStrByStandard(item.getCreatetime()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> itemVo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis与Hibernate的区别"><a href="#MyBatis与Hibernate的区别" class="headerlink" title="MyBatis与Hibernate的区别"></a>MyBatis与Hibernate的区别</h2><pre><code>1. 两个都通过SessionFactoryBuilder由XML配置文件生成的SessionFactory，然后由SessionFactory生成的Session，最后由Session来开始执行事务和SQL语句。2. Hibernate是全自动的，MyBatis是半自动的。3. SQL直接优化，Hibernate不如MyBatis4. 缓存机制上，Hibernate比较好5. Hibernate的HQL语言，大大降低了对于与数据库的耦合性，而MyBatis由于需要手写SQL，因此与数据库的耦合性直接取决于程序员写SQL的方法，如果SQL不具有通用性而使用了某些数据库特性的SQL语句，移植性比较差。</code></pre><h2 id="Hibernate如何提高性能"><a href="#Hibernate如何提高性能" class="headerlink" title="Hibernate如何提高性能"></a>Hibernate如何提高性能</h2><pre><code>1. 延迟加载2. 缓存技术3. 优化SQL查询</code></pre><h2 id="Hibernate的二级缓存"><a href="#Hibernate的二级缓存" class="headerlink" title="Hibernate的二级缓存"></a>Hibernate的二级缓存</h2><pre><code>缓存的目的就是为了减少程序对物理数据源的访问，把从数据库中查询出来和使用过的对象保存在内存中，以便在后期需要用这个对象时，直接从缓存中获取（只有当缓存不存在的时候，才会从数据库中查询）。一级缓存，由Session来管理。二级缓存，由SessionFactory管理。二级缓存可有可无，但是一级缓存必不可少。一级缓存，使用Session查询时，首先在Session中找，没有才去数据库，并且把查到的数据缓存起来。但是Session线程不安全，生命周期没有SessionFactory长，效率不高。二级缓存，是独立于Hibernate的软件部件，属于第三方产品。属于全局缓存，先去Session找，再去SessionFactory，再去数据库。</code></pre><h2 id="Hibernate对象状态"><a href="#Hibernate对象状态" class="headerlink" title="Hibernate对象状态"></a>Hibernate对象状态</h2><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180502153127.png" alt=""></p><pre><code>瞬时态，持久态，脱管态临时态：刚刚使用new语句创建，没有被持久化，不处于Session缓存中。处于临时状态的Java对象被称为临时对象。持久态：已经被持久化，加入到Session缓存中。游离态：已经被持久化，但不处于Session的缓存中。</code></pre><h2 id="Hibernate中的get与load"><a href="#Hibernate中的get与load" class="headerlink" title="Hibernate中的get与load"></a>Hibernate中的get与load</h2><pre><code>1. 如果在数据库中不存在该对象，load方法会抛出一个ObjectNotFoundException，get方法返回null2. get方法先在Session中找，在去SessionFactory，再去数据库。load先在Session中找，不存在，就创建代理对象，实际使用数据的时候，才查询二级缓存和数据库。load方法延迟加载。3. get方法返回的都是实体类，load方法返回的都是实体类的代理类实例。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/223742655302558847.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring&amp;amp;SpringMVC&amp;amp;MyBatis基础总结&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://abelchao.com/categories/SSM/"/>
    
    
      <category term="SSM" scheme="http://abelchao.com/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>Servlet与JSP基础总结</title>
    <link href="http://abelchao.com/2018/05/01/Sevlet&amp;JSP%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <id>http://abelchao.com/2018/05/01/Sevlet&amp;JSP基础总结/</id>
    <published>2018-05-01T01:00:00.000Z</published>
    <updated>2018-07-20T03:19:43.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/527250571103345529.jpg" alt=""></p><p><strong>Servlet与JSP基础总结</strong><br><a id="more"></a></p><h1 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h1><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180427154143.png" alt=""></p><pre><code>1. 其实这就是个接口，里面就5个方法。但是我们约定俗成把实现了这个接口的类也叫做了Servlet2. 这个接口本身和网络协议，Http什么根本没关系，这东西就是为了规范一套处理网络请求，所有实现了Servlet的类都要实现它的那5个方法，最重要的就三个init/destory/service，也就是所有实现了这个接口的类，都必须回答三个问题:    1. 初始化要干嘛    2. 销毁要干嘛    3. 接收到请求又要干嘛3. Servlet就是一个规范，但是并不是实现了Servlet的类都能处理请求。这里面绝对不会又什么监听8080端口的东西之类的，因为Servlet根本就不是直接和客户端打交道的。那么请求怎么到这个类里面的，就是我们说的Servlet容器，也就是Tomcat，我们的Servlet实现类永远都是在容器中才能起作用的。Tomcat才是真正和客户端直接打交道的东西，它监听了端口，情趣过来，由Tomcat也确定这个请求要给哪个Servlet去处理。然后调用这个Servlet的service方法。service方法返回一个response，tomcat再把这个response返回客户端。</code></pre><h1 id="Servlet与CGI的区别"><a href="#Servlet与CGI的区别" class="headerlink" title="Servlet与CGI的区别"></a>Servlet与CGI的区别</h1><pre><code>CGI（Common GateWay Interface 公共网管接口）是用Perl脚本编写的程序，可以用来生成动态页面。1. Servlet在服务器进程中，多线程的方式运行service()，一个实例可以服务多个请求。并且实例一般不会销毁。2. CGI对每个请求都产生新的进程。服务完就销毁了。</code></pre><h1 id="Servlet生命周期和工作原理"><a href="#Servlet生命周期和工作原理" class="headerlink" title="Servlet生命周期和工作原理"></a>Servlet生命周期和工作原理</h1><p><img src="http://oxk1vrcj4.bkt.clouddn.com/24114945-4774512d1247438fa58c37399d3999ae.jpg" alt=""></p><pre><code>1. 加载：Tomcat通过类加载器使用Servlet类对应的文件来加载Servlet。2. 创建：调用Servlet的构造器生成一个Servlet实例。3. init()：在Servlet的生命周期中，仅执行一次，在Tomcat装入Servlet时执行的，这个方法在Servlet创建但是向客户端提供请求前被调用。4. service()：Tomcat接收到请求，发现这是对Servlet发起的请求，Tomcat这个时候会创建两个对象HttpServletRequest，HttpServletResponse。容器根据请求的URL找到对应的Servlet，然后针对这个请求创建一个线程，同时把之前创建的两个对象以参数的像是传递给这个线程。然后容器调用这个Servlet的service()，service()方法根据请求的method属性值来确定调用doGet还是doPost，然后把生成响应数据（动态页面）返回给容器，容器把响应消息组装成HTTP格式返回给客户端。5. destory：容器在卸载Servlet之前调用destory，让servlet释放了自己占用的系统资源。</code></pre><h1 id="Get和Post的区别"><a href="#Get和Post的区别" class="headerlink" title="Get和Post的区别"></a>Get和Post的区别</h1><pre><code>1. get不安全，同时页面提交数据时，get的数据大小由限制4k。2. post安全，同时没有数据大小限制。</code></pre><h1 id="JSP与Servlet的区别"><a href="#JSP与Servlet的区别" class="headerlink" title="JSP与Servlet的区别"></a>JSP与Servlet的区别</h1><pre><code>1. JSP可以被看作是一个特殊的Servlet，只不过是Servlet的扩展，只要是JSP能实现的，Servlet也都可以实现。因为JSP页面最后还是要被转换成Servlet来运行，因此处理请求实际上是编译后的Servlet。2. Servlet的实现方式是在Java中嵌入了HTML，JSP是在HTML中嵌入了Java3. Servlet中可没有内置对象，JSP里面有9个，但是都是通过HttpServletRequest，HttpServletResponse，HttpServlet对象得到的。</code></pre><h1 id="Servlet、Genericervlet、HttpServlet"><a href="#Servlet、Genericervlet、HttpServlet" class="headerlink" title="Servlet、Genericervlet、HttpServlet"></a>Servlet、Genericervlet、HttpServlet</h1><p><img src="http://oxk1vrcj4.bkt.clouddn.com/20161217184327553.png" alt=""></p><p><a href="https://www.cnblogs.com/libingbin/p/5960456.html" target="_blank" rel="noopener">https://www.cnblogs.com/libingbin/p/5960456.html</a></p><pre><code>1. Servlet是个接口，2. GenericServlet是个抽象类，实现了Servlet和ServletConfig，这个Servlet是个和协议没有半毛钱关系的Servlet。3. HttpServletRequest和HttpServletResponse是两个接口4. HttpServlet继承了GenericServlet，但是这也是个抽象类。5. GenericServlet做的事情：    1. init方法，保存了config对象，并实现了getServletInfo和getServletConfig。    2. 增加了一个空参数的init()，防止开发人员重写重生的init    3. service方法空实现--&gt;写成了抽象方法，强制开发人员实现。    4. destory空实现。    5. 实现了servletConfig接口，接口中的方法直接调用config实现类实现。6. HttpServlet做的事情：    1. servlet中强转参数        ServletRequest和ServletResponse--&gt;HttpServletRequest和HttpServletResponse。    2. 根据不同请求调用不同的方法。</code></pre><h1 id="Servlet、ServletContext、ServletConfig"><a href="#Servlet、ServletContext、ServletConfig" class="headerlink" title="Servlet、ServletContext、ServletConfig"></a>Servlet、ServletContext、ServletConfig</h1><p><a href="https://blog.csdn.net/u012077981/article/details/17137705" target="_blank" rel="noopener">https://blog.csdn.net/u012077981/article/details/17137705</a><br><a href="https://blog.csdn.net/gavin_john/article/details/51399425" target="_blank" rel="noopener">https://blog.csdn.net/gavin_john/article/details/51399425</a></p><pre><code>1. ServletContext是Servlet和Servlet容器（Tomcat）之间的直接通信接口。Servlet容器在启动一个Webapp时，会为它创建一个ServletContext，也就是Servlet上下文环境。每一个webapp都有唯一的ServletContext对象。同一个webapp下的所有servlet对象共享一个ServletContext。servlet的初始化参数，就是在这个ServletContext中。    1. 获取web上下文路径（context.getContextPath()）    2. 获取全局参数(context.getInitParameter(paramName))    3. 和域相关    2. ServletConfig是当Servlet容器（Tomcat）初始化一个Servlet类型的对象时，会为这个Servlet对象创建一个ServletConfig对象。在这个ServletConfig对象中包含了Servlet的初始化参数信息。3. ServeltConfig和ServletContext关联。Tomcat在调用Servlet对象的init(ServletConfig config)方法时，会把ServletConfig类型的对象当作参数传递给servlet对象。4. ServletContext是对于Webapp而言的，其实就是四大域中的Application，在Tomcat启动的时候就加载了。而ServletConfig是对于某一个Servlet而言的。</code></pre><h1 id="forward和redirect"><a href="#forward和redirect" class="headerlink" title="forward和redirect"></a>forward和redirect</h1><pre><code>1. forward：请求转发，服务器端行为，然后目标地址的URL，但是服务器内部转发了。（只有一次请求）2. redirect：重定向,客户端行为，目的地址的URL改变了，两次请求！！！3. 重定向会导致request对象信息丢失，而请求转发不会。</code></pre><h1 id="JSP执行原理"><a href="#JSP执行原理" class="headerlink" title="JSP执行原理"></a>JSP执行原理</h1><pre><code>客户端发出请求---&gt;JSP引擎将jsp页面翻译成Servlet的java源文件--&gt;Tomcat中将源文件编程成class并加载到内存中执行。</code></pre><h1 id="JavaWeb四大域"><a href="#JavaWeb四大域" class="headerlink" title="JavaWeb四大域"></a>JavaWeb四大域</h1><h2 id="Application-ServletContext"><a href="#Application-ServletContext" class="headerlink" title="Application(ServletContext)"></a>Application(ServletContext)</h2><pre><code>1. 作用域：整个Webapp，所有Servlet共用一个serveltContext。2. 生命周期：当Web应用被加载到Tomcat中时就创建了。</code></pre><h2 id="Session（HttpSession）"><a href="#Session（HttpSession）" class="headerlink" title="Session（HttpSession）"></a>Session（HttpSession）</h2><pre><code>1. 作用域：一次会话。2. 生命周期：当第一次调用request.getSession()的时候，服务器会检查是否已经有了对应的Session，如果没有就在内存中创建一个Session并返回。但是当一段时间以后，Session没有被使用（默认30min），Session就会被销毁了。如果服务器非正常关闭，没有到期的session也会跟着销毁。如果调用session提供的invalidate()，可以立即销毁session。</code></pre><h2 id="Request（ServletRequest）"><a href="#Request（ServletRequest）" class="headerlink" title="Request（ServletRequest）"></a>Request（ServletRequest）</h2><pre><code>1. 作用域：整个请求链，在Servlet处理好的数据给JSP显示，整个时候参数就可以放在ServletRequest域中2. 生命周期：整个请求链</code></pre><h2 id="Page（PageContext）"><a href="#Page（PageContext）" class="headerlink" title="Page（PageContext）"></a>Page（PageContext）</h2><pre><code>1. 作用域：当对JSP请求开始，当响应的结束时销毁。2. 作用范围：整个JSP页面，是四大域中最小的一个。</code></pre><h1 id="HttpServletRequest和HttpServletResponse"><a href="#HttpServletRequest和HttpServletResponse" class="headerlink" title="HttpServletRequest和HttpServletResponse"></a>HttpServletRequest和HttpServletResponse</h1><pre><code>1. HttpServletRequest    1. 请求地址(读取信息路径)    2. 请求头    3. 实体数据2. HttpServletResponse    1. 响应头    2. 状态码    3. 实体数据    4. 客户端写入Cookie（设置Cookie）    5. 重写URL</code></pre><h2 id="HttpServletRequest中的getParamter-Attribute"><a href="#HttpServletRequest中的getParamter-Attribute" class="headerlink" title="HttpServletRequest中的getParamter/Attribute"></a>HttpServletRequest中的getParamter/Attribute</h2><pre><code>1. getAttribute表示从Request域中获取数据，必须在request域中进行设置（setAttribute）后才能拿到，设置和获取的都是Object2. getParameter表示接收参数，参数为页面提交的参数（表单提交的参数，URL重写）因此整个方法并没有参数设置（没有setParameter），而且返回的参数String</code></pre><h1 id="JSP中的九大内置对象"><a href="#JSP中的九大内置对象" class="headerlink" title="JSP中的九大内置对象"></a>JSP中的九大内置对象</h1><p><a href="https://blog.csdn.net/icarus_wang/article/details/51107470" target="_blank" rel="noopener">https://blog.csdn.net/icarus_wang/article/details/51107470</a></p><pre><code>out对象：用于向客户端、浏览器输出数据。request对象：封装了来自客户端、浏览器的各种信息。response对象：封装了服务器的响应信息。exception对象：封装了jsp程序执行过程中发生的异常和错误信息。config对象：封装了应用程序的配置信息。page对象：指向了当前jsp程序本身。session对象：用来保存会话信息。也就是说，可以实现在同一用户的不同请求之间共享数application对象：代表了当前应用程序的上下文。可以在不同的用户之间共享信息。pageContext对象：提供了对jsp页面所有对象以及命名空间的访问。</code></pre><h1 id="JSP动作（6个）"><a href="#JSP动作（6个）" class="headerlink" title="JSP动作（6个）"></a>JSP动作（6个）</h1><pre><code>1. jsp：include，用来在页面被请求时引入一个文件。2. jsp：useBean，用来寻找或者实例化一个JavaBean3. jsp：setProperty，用来设置已经实例化的Bean对象。4. jsp：getProperty，用来获取某个JavaBean的属性。5. jsp：forward，用来把请求转到一个新页面6. jsp:plugin，用来在浏览器中显示一个对象。</code></pre><h1 id="include的静态，动态引入（include指令和include动作）"><a href="#include的静态，动态引入（include指令和include动作）" class="headerlink" title="include的静态，动态引入（include指令和include动作）"></a>include的静态，动态引入（include指令和include动作）</h1><pre><code>1. include指令：&lt;%@ include file=&quot;text.jsp&quot;%&gt;2. include动作：    &lt;jsp:include page=&quot;text.jsp&quot; flush=&quot;true&quot;&gt;        &lt;jsp:param name=&quot;name&quot;,value=&quot;value&quot;/&gt;    &lt;/jsp:include&gt;区别：    1. 根本区别：两者调用的时间。include指令是在编译阶段的指令，在编译时，编译器会把指令所指向的目标文件内容复制到指令所在的位置，替换指令本身，最终生成的一个文件，在运行时只有一个文件；include动作是在运行时的语法，在主页面被请求时，才将用到的页面包含进来，涉及到两个文件，类似于方法调用。</code></pre><h1 id="Session与Cookie"><a href="#Session与Cookie" class="headerlink" title="Session与Cookie"></a>Session与Cookie</h1><pre><code>1. Session在服务器端，Cookie在客户端2. Session的运行依赖Session id，而Session id是存在Cookie中的，也就说如果浏览器禁用了Cookie，同时Session也就无效了。3. Session可以放在文件，数据库，内存中4. 用户验证一般使用Session5. Cookie不安全，因为在本地，可能被被人用来进行Cookie欺骗6. Session会在一定时间内保存在服务器上，当访问太多的时候，并不好7. 单个Cookie保存的数据不能超过4k，很多浏览器都限制一个站点最多保存20个Cookie</code></pre><h1 id="保存会话状态，有哪些方法"><a href="#保存会话状态，有哪些方法" class="headerlink" title="保存会话状态，有哪些方法"></a>保存会话状态，有哪些方法</h1><pre><code>HTTP协议本身无状态，服务器为了区别不同的用户，需要对用户会话进行跟踪，也就说用户登录的时候，为用户分配唯一的ID，下一次用户在请求中包含此ID，服务器就知道这是哪个用户了。1. URL重写：在URL中添加用户会话的信息作为请求的参数，或者将唯一的会话ID添加到URL结尾以标识一个会话。2. 设置表单隐藏域：将会话跟踪相关的字段添加到隐式表单域中。3. Session共享：Session的运行依赖Session id，而Session id是存在Cookie中的，也就说如果浏览器禁用了Cookie，同时Session也就无效了。4. 会话Cookie：Cookie是Web服务器发送给客户端的一小段信息，客户端请求时可以读取该信息发送到服务器端，进而进行用户的识别。对于客户端的每次请求，服务器都会将Cookie发送到客户端,在客户端可以进行保存,以便下次使用</code></pre><h1 id="监听器，过滤器，拦截器"><a href="#监听器，过滤器，拦截器" class="headerlink" title="监听器，过滤器，拦截器"></a>监听器，过滤器，拦截器</h1><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><pre><code>1. contextInitialized2. contextDestroyed事件源：ServletContext，HttpSession，ServletRequest</code></pre><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p><a href="http://www.cnblogs.com/xdp-gacl/p/3948353.html" target="_blank" rel="noopener">http://www.cnblogs.com/xdp-gacl/p/3948353.html</a></p><p><a href="http://www.runoob.com/jsp/jsp-writing-filters.html" target="_blank" rel="noopener">http://www.runoob.com/jsp/jsp-writing-filters.html</a></p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p><a href="https://www.cnblogs.com/shangxiaofei/p/5328377.html" target="_blank" rel="noopener">https://www.cnblogs.com/shangxiaofei/p/5328377.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/527250571103345529.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Servlet与JSP基础总结&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://abelchao.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://abelchao.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="http://abelchao.com/2018/04/25/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://abelchao.com/2018/04/25/桥接模式/</id>
    <published>2018-04-25T10:00:00.000Z</published>
    <updated>2018-04-25T10:00:15.940Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/762846253515335835.jpg" alt=""></p><p><strong>桥接模式</strong></p><a id="more"></a><h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180425170555.png" alt=""></p><pre><code>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</code></pre><h2 id="创建桥接实现接口"><a href="#创建桥接实现接口" class="headerlink" title="创建桥接实现接口"></a>创建桥接实现接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建实现了-DrawAPI-接口的实体桥接实现类"><a href="#创建实现了-DrawAPI-接口的实体桥接实现类" class="headerlink" title="创建实现了 DrawAPI 接口的实体桥接实现类"></a>创建实现了 DrawAPI 接口的实体桥接实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Drawing Circle[ color: red, radius: "</span></span><br><span class="line">         + radius +<span class="string">", x: "</span> +x+<span class="string">", "</span>+ y +<span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Drawing Circle[ color: green, radius: "</span></span><br><span class="line">         + radius +<span class="string">", x: "</span> +x+<span class="string">", "</span>+ y +<span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-DrawAPI-接口创建抽象类-Shape"><a href="#使用-DrawAPI-接口创建抽象类-Shape" class="headerlink" title="使用 DrawAPI 接口创建抽象类 Shape"></a>使用 DrawAPI 接口创建抽象类 Shape</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> DrawAPI drawAPI;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Shape</span><span class="params">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.drawAPI = drawAPI;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建实现了-Shape-接口的实体类"><a href="#创建实现了-Shape-接口的实体类" class="headerlink" title="创建实现了 Shape 接口的实体类"></a>创建实现了 Shape 接口的实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> x, y, radius;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> radius,DrawAPI drawAPI)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(drawAPI);</span><br><span class="line"><span class="keyword">this</span>.x = x;  </span><br><span class="line"><span class="keyword">this</span>.y = y;  </span><br><span class="line"><span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">drawAPI.drawCircle(radius,x,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Shape-和-DrawAPI-类画出不同颜色的圆"><a href="#使用-Shape-和-DrawAPI-类画出不同颜色的圆" class="headerlink" title="使用 Shape 和 DrawAPI 类画出不同颜色的圆"></a>使用 Shape 和 DrawAPI 类画出不同颜色的圆</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgePatternDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Shape redCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> RedCircle());</span><br><span class="line">      Shape greenCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> GreenCircle());</span><br><span class="line"></span><br><span class="line">      redCircle.draw();</span><br><span class="line">      greenCircle.draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/762846253515335835.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;桥接模式&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://abelchao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://abelchao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://abelchao.com/2018/04/25/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://abelchao.com/2018/04/25/适配器模式/</id>
    <published>2018-04-25T09:00:00.000Z</published>
    <updated>2018-04-25T10:00:01.904Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oxk1vrcj4.bkt.clouddn.com/39807078769124751.jpg" alt=""></p><p><strong>适配器模式</strong></p><a id="more"></a><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p><img src="http://oxk1vrcj4.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180425162504.png" alt=""></p><pre><code>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</code></pre><h2 id="为媒体播放器和更高级的媒体播放器创建接口"><a href="#为媒体播放器和更高级的媒体播放器创建接口" class="headerlink" title="为媒体播放器和更高级的媒体播放器创建接口"></a>为媒体播放器和更高级的媒体播放器创建接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String audioType,String filename)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdvancedMediaPlayer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playVlc</span><span class="params">(String fileName)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMp4</span><span class="params">(String fileName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建实现了-AdvancedMediaPlayer-接口的实体类"><a href="#创建实现了-AdvancedMediaPlayer-接口的实体类" class="headerlink" title="创建实现了 AdvancedMediaPlayer 接口的实体类"></a>创建实现了 AdvancedMediaPlayer 接口的实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VlcPlayer</span> <span class="keyword">implements</span> <span class="title">AdvancedMediaPlayer</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playVlc</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Playing vlc file. Name: "</span>+ fileName);        </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMp4</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//什么也不做</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mp4Player</span> <span class="keyword">implements</span> <span class="title">AdvancedMediaPlayer</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playVlc</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//什么也不做</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMp4</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Playing mp4 file. Name: "</span>+ fileName);        </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建实现了-MediaPlayer-接口的适配器类"><a href="#创建实现了-MediaPlayer-接口的适配器类" class="headerlink" title="创建实现了 MediaPlayer 接口的适配器类"></a>创建实现了 MediaPlayer 接口的适配器类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediaAdapter</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span></span>&#123;</span><br><span class="line">AdvancedMediaPlayer advancedMediaPlayer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MediaAdapter</span><span class="params">(String audioType)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"vlc"</span>))</span><br><span class="line">advancedMediaPlayer = <span class="keyword">new</span> VlcPlayer();</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">advancedMediaPlayer = <span class="keyword">new</span> Mp4Player();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String audioType, String filename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"vlc"</span>))</span><br><span class="line">advancedMediaPlayer.playVlc(filename);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">advancedMediaPlayer.playMp4(filename);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建实现了-MediaPlayer-接口的实体类"><a href="#创建实现了-MediaPlayer-接口的实体类" class="headerlink" title="创建实现了 MediaPlayer 接口的实体类"></a>创建实现了 MediaPlayer 接口的实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudioPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span></span>&#123;</span><br><span class="line">MediaAdapter mediaAdapter;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String audioType,String filename)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"mp3"</span>))</span><br><span class="line">System.out.println(<span class="string">"Playing mp3 file. Name: "</span>+filename);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(audioType.equals(<span class="string">"mp4"</span>)||audioType.equals(<span class="string">"vlc"</span>))</span><br><span class="line"><span class="keyword">new</span> MediaAdapter(audioType).play(audioType, filename);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">System.out.println(<span class="string">"Invalid media. "</span>+audioType + <span class="string">" format not supported"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-AudioPlayer-来播放不同类型的音频格式"><a href="#使用-AudioPlayer-来播放不同类型的音频格式" class="headerlink" title="使用 AudioPlayer 来播放不同类型的音频格式"></a>使用 AudioPlayer 来播放不同类型的音频格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterPatternDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      AudioPlayer audioPlayer = <span class="keyword">new</span> AudioPlayer();</span><br><span class="line"></span><br><span class="line">      audioPlayer.play(<span class="string">"mp3"</span>, <span class="string">"beyond the horizon.mp3"</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">"mp4"</span>, <span class="string">"alone.mp4"</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">"vlc"</span>, <span class="string">"far far away.vlc"</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">"avi"</span>, <span class="string">"mind me.avi"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oxk1vrcj4.bkt.clouddn.com/39807078769124751.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;适配器模式&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://abelchao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://abelchao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
